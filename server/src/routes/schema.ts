// apps/server/src/schemas/operator.schema.ts
import { Role } from '@cashflow/database'
import { z } from 'zod'

// Assuming Role enum is generated by Prisma

// --- Base Schemas ---
// const commonIdParams = z.object({
// Example for routes that might have ID in params, not body.
// These are typically not used for body validation directly but can be part of route definitions.
// For body validation, if no body is expected, use z.object({}).
// operatorId: z.string().uuid("Invalid Operator ID"),
// userId: z.string().uuid("Invalid User ID"), // or cuid() if that's what you use
// });

// --- Schemas for Request Bodies ---

export const operatorSchema = {
  // POST /operator/create
  create: z.object({
    name: z.string().min(1, 'Operator name cannot be empty.'),
    description: z.string().optional(),
    // Add any other fields expected during operator creation based on your OperatorCreatePayload
    // Note: ownerId is handled by the service based on the authenticated user.
  }),

  // POST /operator/invite
  invite: z.object({
    operatorId: z.string().uuid('Invalid Operator ID format.'), // Or cuid() if your IDs are CUIDs
    userEmails: z
      .array(z.string().email('Invalid email format.'))
      .min(1, 'At least one user email is required.'),
    role: z.nativeEnum(Role).optional(), // Defaults to MEMBER in the service
  }),

  // POST /operator/accept-invitation
  acceptInvitation: z.object({
    invitationToken: z.string().uuid('Invalid invitation token format.'), // Assuming tokens are UUIDs
  }),

  // PUT /operator/:id (Update Operator Details)
  update: z.object({
    name: z.string().min(1, 'Operator name cannot be empty.').optional(),
    description: z.string().nullable().optional(), // Allow setting description to null or omitting it
    // Add other updatable fields for an operator.
    // All fields should be optional for partial updates.
  }),

  // PUT /operator/:operatorId/users/:userId/role (Assign Role)
  assignRole: z.object({
    role: z.nativeEnum(Role, {
      errorMap: () => ({ message: 'Invalid role specified.' }),
    }),
  }),

  // --- Schemas for operations that primarily use path params (empty body) ---
  // These are placeholders if you need to ensure no unexpected body data is passed.
  // Actual path param validation (e.g., :id, :userId) happens in the route handler.

  // GET /operator/user/:userId
  getAllForUser: z.object({}), // No body expected

  // PUT /operator/deactivate/:id (or more specific /operator/:operatorId/users/:userId/deactivate)
  // Assuming the ID is part of the path and no body is needed for this specific action.
  // If it was /operator/:id/deactivate-user with { userId } in body, it would be different.
  deactivateUser: z.object({}), // No body expected for the route in the original code; ID is a param.

  // GET /operator/:id
  getById: z.object({}), // No body expected

  // DELETE /operator/:id
  delete: z.object({}), // No body expected

  // GET /operator/:operatorId/users
  getUsersByOperator: z.object({}), // No body expected

  // GET /operator/:operatorId/users/:userId/role
  getUserRoleInOperator: z.object({}), // No body expected
}

// --- Exported TypeScript Types Inferred from Schemas ---
export type OperatorCreatePayload = z.infer<typeof operatorSchema.create>
export type OperatorInvitePayload = z.infer<typeof operatorSchema.invite>
export type OperatorAcceptInvitationPayload = z.infer<typeof operatorSchema.acceptInvitation>
export type OperatorUpdatePayload = z.infer<typeof operatorSchema.update>
export type OperatorAssignRolePayload = z.infer<typeof operatorSchema.assignRole>

// If you wanted to define schemas for path parameters (useful for documentation or more advanced routing libraries)
// export const operatorPathParamsSchema = z.object({
//   operatorId: z.string().uuid("Invalid Operator ID"),
// });
// export const userInOperatorPathParamsSchema = z.object({
//   operatorId: z.string().uuid("Invalid Operator ID"),
//   userId: z.string().uuid("Invalid User ID"), // or cuid()
// });
// import { z } from 'zod'
// import { messageSchema } from '../sockets/router'

// export const JoinRoom = messageSchema('JOIN_ROOM', {
//   roomId: z.string(),
// })

// export const UserJoined = messageSchema('USER_JOINED', {
//   roomId: z.string(),
//   userId: z.string().optional(),
// })

// export const UserLeft = messageSchema('USER_LEFT', {
//   roomId: z.string(),
//   userId: z.string(),
// })

// export const SendMessage = messageSchema('SEND_MESSAGE', {
//   roomId: z.string(),
//   text: z.string(),
// })

// export const NewMessage = messageSchema('NEW_MESSAGE', {
//   roomId: z.string(),
//   userId: z.string(),
//   text: z.string(),
//   timestamp: z.number().optional(),
// })
