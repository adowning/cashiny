This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: *.json
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  assets/
    styles/
      main.css
  components/
    dashboard/
      ProductOverviewWidget.vue
      RecentActivityWidget.vue
      SalesTrendWidget.vue
      StatsWidget.vue
    AppConfig.vue
    AppFooter.vue
    AppTopbar.vue
  composables/
    useLayout.ts
    x.js
  App.vue
  main.ts
.eslintrc.cjs
.gitignore
auto-imports.d.ts
components.d.ts
env.d.ts
index.html
README.md
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/assets/styles/main.css">

</file>

<file path="src/components/dashboard/ProductOverviewWidget.vue">
<script setup lang="ts">
  import { ref, watch, onMounted } from 'vue'
  const products = ref([
    {
      name: 'Laptop Pro',
      category: 'Electronics',
      price: 2499,
      status: 'In Stock',
    },
    {
      name: 'Wireless Mouse',
      category: 'Accessories',
      price: 49,
      status: 'Low Stock',
    },
    {
      name: 'Monitor 4K',
      category: 'Electronics',
      price: 699,
      status: 'Out of Stock',
    },
    { name: 'Keyboard', category: 'Accessories', price: 149, status: 'In Stock' },
  ])
  const selectedProduct = ref(null)
  const searchQuery = ref('')
  const loading = ref(false)
  const filteredProducts = ref([])
  const searchProducts = () => {
    loading.value = true
    filteredProducts.value = products.value.filter(
      (product) =>
        product.name.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
        product.category.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
        product.status.toLowerCase().includes(searchQuery.value.toLowerCase())
    )
    setTimeout(() => {
      loading.value = false
    }, 300)
  }
  watch(searchQuery, () => {
    searchProducts()
  })
  onMounted(() => {
    filteredProducts.value = [...products.value]
  })
</script>
<template>
  <div
    class="bg-surface-0 dark:bg-surface-900 p-6 rounded-xl border border-surface-200 dark:border-surface-700 flex flex-col gap-4"
  >
    <div class="flex sm:items-center justify-between mb-4 sm:flex-row flex-col gap-2">
      <span class="font-medium text-base">Products Overview</span>
      <IconField class="sm:w-auto w-full">
        <InputIcon class="pi pi-search" />
        <InputText
          v-model="searchQuery"
          placeholder="Search products..."
          class="p-inputtext-sm md:w-auto! w-full!"
          @keyup.enter="searchProducts"
        />
      </IconField>
    </div>
    <div class="flex flex-col gap-2">
      <DataTable
        :value="filteredProducts"
        v-model:selection="selectedProduct"
        selectionMode="single"
        :loading="loading"
        :rows="5"
        :pt="{
          mask: {
            class: 'backdrop-blur-sm! bg-surface-0/20! dark:bg-surface-900/20!',
          },
          loadingIcon: {
            class: 'text-primary!',
          },
        }"
      >
        <Column field="name" header="Name" sortable></Column>
        <Column field="category" header="Category" sortable></Column>
        <Column field="price" header="Price" sortable>
          <template #body="{ data }"> ${{ data.price }} </template>
        </Column>
        <Column field="status" header="Status">
          <template #body="{ data }">
            <Tag
              :severity="
                data.status === 'In Stock'
                  ? 'success'
                  : data.status === 'Low Stock'
                    ? 'warn'
                    : 'danger'
              "
            >
              {{ data.status }}
            </Tag>
          </template>
        </Column>
      </DataTable>
    </div>
  </div>
</template>
⋮----
<template #body="{ data }"> ${{ data.price }} </template>
⋮----
<template #body="{ data }">
            <Tag
              :severity="
                data.status === 'In Stock'
                  ? 'success'
                  : data.status === 'Low Stock'
                    ? 'warn'
                    : 'danger'
              "
            >
              {{ data.status }}
            </Tag>
          </template>
⋮----
{{ data.status }}
</file>

<file path="src/components/dashboard/RecentActivityWidget.vue">
<script setup lang="ts">
  const activities = [
    {
      icon: 'pi-shopping-cart',
      text: 'New order #1123',
      time: '2 minutes ago',
      color: 'text-primary',
    },
    {
      icon: 'pi-user-plus',
      text: 'New customer registered',
      time: '15 minutes ago',
      color: 'text-green-500',
    },
    {
      icon: 'pi-check-circle',
      text: 'Payment processed',
      time: '25 minutes ago',
      color: 'text-blue-500',
    },
    {
      icon: 'pi-inbox',
      text: 'Inventory updated',
      time: '40 minutes ago',
      color: 'text-yellow-500',
    },
  ]
</script>
<template>
  <div
    class="bg-surface-0 dark:bg-surface-900 p-6 rounded-xl border border-surface-200 dark:border-surface-700 flex flex-col gap-4"
  >
    <span class="font-medium text-base">Recent Activity</span>
    <div class="flex flex-col gap-3">
      <div
        v-for="(activity, index) in activities"
        :key="index"
        class="flex items-center gap-3 p-3 border border-surface-200 dark:border-surface-700 rounded-lg bg-surface-50 dark:bg-surface-800"
      >
        <i :class="['pi', activity.icon, activity.color, 'text-lg!']"></i>
        <div class="flex flex-col gap-1">
          <span class="text-sm font-medium">{{ activity.text }}</span>
          <span class="text-xs text-surface-600 dark:text-surface-400">{{ activity.time }}</span>
        </div>
      </div>
    </div>
  </div>
</template>
⋮----
<span class="text-sm font-medium">{{ activity.text }}</span>
<span class="text-xs text-surface-600 dark:text-surface-400">{{ activity.time }}</span>
</file>

<file path="src/components/dashboard/SalesTrendWidget.vue">
<script setup lang="ts">
  import { ref, watch, onMounted } from 'vue'
  import { useLayout } from '../../composables/useLayout'
  const { primary, surface, isDarkMode } = useLayout()
  const chartData = ref(null)
  const chartOptions = ref(null)
  function setChartData() {
    const documentStyle = getComputedStyle(document.documentElement)
    return {
      labels: ['Q1', 'Q2', 'Q3', 'Q4'],
      datasets: [
        {
          type: 'bar',
          label: 'Subscriptions',
          backgroundColor: documentStyle.getPropertyValue('--p-primary-400'),
          data: [4000, 10000, 15000, 4000],
          barThickness: 32,
        },
        {
          type: 'bar',
          label: 'Advertising',
          backgroundColor: documentStyle.getPropertyValue('--p-primary-300'),
          data: [2100, 8400, 2400, 7500],
          barThickness: 32,
        },
        {
          type: 'bar',
          label: 'Affiliate',
          backgroundColor: documentStyle.getPropertyValue('--p-primary-200'),
          data: [4100, 5200, 3400, 7400],
          borderRadius: {
            topLeft: 8,
            topRight: 8,
          },
          barThickness: 32,
        },
      ],
    }
  }
  function setChartOptions() {
    return {
      maintainAspectRatio: false,
      responsive: true,
      plugins: {
        legend: {
          position: 'top',
        },
      },
      scales: {
        x: {
          stacked: true,
          grid: {
            color: 'transparent',
            borderColor: 'transparent',
          },
        },
        y: {
          stacked: true,
          grid: {
            color: 'transparent',
            borderColor: 'transparent',
            drawTicks: false,
          },
        },
      },
    }
  }
  watch([primary, surface, isDarkMode], () => {
    chartData.value = setChartData()
    chartOptions.value = setChartOptions()
  })
  onMounted(() => {
    chartData.value = setChartData()
    chartOptions.value = setChartOptions()
  })
</script>
<template>
  <div
    class="bg-surface-0 dark:bg-surface-900 p-6 rounded-xl border border-surface-200 dark:border-surface-700 flex flex-col gap-4"
  >
    <div class="flex flex-col gap-4">
      <div class="flex items-center justify-between">
        <span class="font-medium text-base">Sales Trend</span>
      </div>
      <Chart type="bar" :data="chartData" :options="chartOptions" class="h-[300px]" />
    </div>
  </div>
</template>
</file>

<file path="src/components/dashboard/StatsWidget.vue">
<script setup lang="ts">
  const stats = [
    {
      title: 'Total Orders',
      icon: 'pi-shopping-cart',
      value: '1,234',
      subtitle: 'Last 7 days',
    },
    {
      title: 'Active Users',
      icon: 'pi-users',
      value: '2,573',
      subtitle: 'Last 7 days',
    },
    {
      title: 'Revenue',
      icon: 'pi-dollar',
      value: '$45,200',
      subtitle: 'Last 7 days',
    },
    {
      title: 'Success Rate',
      icon: 'pi-chart-line',
      value: '95%',
      subtitle: 'Last 7 days',
    },
  ]
</script>
<template>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
    <div
      v-for="(stat, index) in stats"
      :key="index"
      class="bg-surface-0 dark:bg-surface-900 p-6 rounded-xl border border-surface-200 dark:border-surface-700 flex flex-col gap-2"
    >
      <div class="flex items-start gap-2 justify-between">
        <span class="text-xl font-light leading-tight">{{ stat.title }}</span>
        <span
          class="shrink-0 bg-primary-100 dark:bg-primary-400/20 text-primary rounded-lg w-8 h-8 flex items-center justify-center border border-primary-200 dark:border-primary-400/40"
        >
          <i :class="['pi', stat.icon, 'text-xl!', 'leading-none!']"></i>
        </span>
      </div>
      <div class="flex flex-col gap-1 w-full">
        <div class="text-3xl font-medium leading-tight">{{ stat.value }}</div>
        <div class="text-surface-600 dark:text-surface-400 text-sm leading-tight">
          {{ stat.subtitle }}
        </div>
      </div>
    </div>
  </div>
</template>
⋮----
<span class="text-xl font-light leading-tight">{{ stat.title }}</span>
⋮----
<div class="text-3xl font-medium leading-tight">{{ stat.value }}</div>
⋮----
{{ stat.subtitle }}
</file>

<file path="src/components/AppConfig.vue">
<script setup lang="ts">
  import { useLayout } from '../composables/useLayout'
  const { primaryColors, surfaces, primary, surface, isDarkMode, updateColors } = useLayout()
</script>
<template>
  <div
    class="absolute top-16 right-0 w-64 p-4 bg-white dark:bg-surface-900 rounded-md shadow-lg border border-surface-200 dark:border-surface-700 origin-top z-50 hidden"
  >
    <div class="flex flex-col gap-4">
      <div>
        <span class="text-sm text-surface-600 dark:text-surface-400 font-semibold">Primary</span>
        <div class="pt-2 flex gap-2 flex-wrap justify-between">
          <button
            v-for="pc of primaryColors"
            :key="pc.name"
            type="button"
            :title="pc.name"
            :class="[
              'border-none w-5 h-5 rounded-full p-0 cursor-pointer focus:outline-none focus:ring-2 focus:ring-offset-2',
              { 'ring-2 ring-primary ring-offset-2': primary === pc.name },
            ]"
            :style="{ backgroundColor: pc.palette['500'] }"
            @click="updateColors('primary', pc.name)"
          />
        </div>
      </div>
      <div>
        <span class="text-sm text-surface-600 dark:text-surface-400 font-semibold">Surface</span>
        <div class="pt-2 flex gap-2 flex-wrap justify-between">
          <button
            v-for="s of surfaces"
            :key="s.name"
            type="button"
            :title="s.name"
            :class="[
              'border-none w-5 h-5 rounded-full p-0 cursor-pointer focus:outline-none focus:ring-2 focus:ring-offset-2',
              {
                'ring-2 ring-primary ring-offset-2': surface
                  ? surface === s.name
                  : isDarkMode
                    ? s.name === 'zinc'
                    : s.name === 'slate',
              },
            ]"
            :style="{ backgroundColor: s.palette['500'] }"
            @click="updateColors('surface', s.name)"
          />
        </div>
      </div>
    </div>
  </div>
</template>
</file>

<file path="src/components/AppFooter.vue">
<script setup lang="ts"></script>
<template>
  <div
    class="bg-surface-0 dark:bg-surface-900 p-6 rounded-2xl max-w-7xl mx-auto border border-surface-200 dark:border-surface-700 w-full"
  >
    <div class="flex justify-between items-center sm:flex-row flex-col gap-2">
      <div class="text-sm text-surface-600 dark:text-surface-400">202X PrimeVue.</div>
      <div class="flex gap-4">
        <a
          href="https://twitter.com/primevue"
          target="_blank"
          rel="noopener noreferrer"
          class="text-surface-600 dark:text-surface-400 hover:text-primary transition-colors text-sm"
        >
          <i class="pi pi-twitter text-xl"></i>
        </a>
        <a
          href="https://primevue.org"
          target="_blank"
          rel="noopener noreferrer"
          class="text-surface-600 dark:text-surface-400 hover:text-primary transition-colors text-sm"
        >
          <i class="pi pi-globe text-xl"></i>
        </a>
        <a
          href="https://github.com/primefaces/primevue"
          target="_blank"
          rel="noopener noreferrer"
          class="text-surface-600 dark:text-surface-400 hover:text-primary transition-colors text-sm"
        >
          <i class="pi pi-github text-xl"></i>
        </a>
      </div>
    </div>
  </div>
</template>
</file>

<file path="src/components/AppTopbar.vue">
<script setup lang="ts">
  import { useLayout } from '../composables/useLayout'
  import AppConfig from './AppConfig.vue'
  const { isDarkMode, toggleDarkMode } = useLayout()
</script>
<template>
  <div
    class="bg-surface-0 dark:bg-surface-900 p-6 rounded-2xl max-w-7xl mx-auto border border-surface-200 dark:border-surface-700 w-full"
  >
    <div class="flex justify-between items-center">
      <div class="flex gap-3 items-center">
        <svg
          width="35"
          height="40"
          viewBox="0 0 35 40"
          fill="none"
          class="w-8"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M25.87 18.05L23.16 17.45L25.27 20.46V29.78L32.49 23.76V13.53L29.18 14.73L25.87 18.04V18.05ZM25.27 35.49L29.18 31.58V27.67L25.27 30.98V35.49ZM20.16 17.14H20.03H20.17H20.16ZM30.1 5.19L34.89 4.81L33.08 12.33L24.1 15.67L30.08 5.2L30.1 5.19ZM5.72 14.74L2.41 13.54V23.77L9.63 29.79V20.47L11.74 17.46L9.03 18.06L5.72 14.75V14.74ZM9.63 30.98L5.72 27.67V31.58L9.63 35.49V30.98ZM4.8 5.2L10.78 15.67L1.81 12.33L0 4.81L4.79 5.19L4.8 5.2ZM24.37 21.05V34.59L22.56 37.29L20.46 39.4H14.44L12.34 37.29L10.53 34.59V21.05L12.42 18.23L17.45 26.8L22.48 18.23L24.37 21.05ZM22.85 0L22.57 0.69L17.45 13.08L12.33 0.69L12.05 0H22.85Z"
            class="fill-primary"
          />
          <path
            d="M30.69 4.21L24.37 4.81L22.57 0.69L22.86 0H26.48L30.69 4.21ZM23.75 5.67L22.66 3.08L18.05 14.24V17.14H19.7H20.03H20.16H20.2L24.1 15.7L30.11 5.19L23.75 5.67ZM4.21002 4.21L10.53 4.81L12.33 0.69L12.05 0H8.43002L4.22002 4.21H4.21002ZM21.9 17.4L20.6 18.2H14.3L13 17.4L12.4 18.2L12.42 18.23L17.45 26.8L22.48 18.23L22.5 18.2L21.9 17.4ZM4.79002 5.19L10.8 15.7L14.7 17.14H14.74H15.2H16.85V14.24L12.24 3.09L11.15 5.68L4.79002 5.2V5.19Z"
            class="fill-surface-900 dark:fill-surface-0"
          />
        </svg>
        <span class="hidden sm:flex flex-col"
          ><span class="text-xl font-light text-surface-700 dark:text-surface-100 leading-none"
            >PrimeVue Examples</span
          >
          <span class="text-sm font-medium text-primary leading-tight"
            >Vite + Tailwindcss v4</span
          ></span
        >
      </div>
      <div class="flex items-center gap-2">
        <button
          type="button"
          class="w-10 h-10 flex items-center justify-center rounded-full hover:bg-surface-100 dark:hover:bg-surface-800 transition-all text-surface-900 dark:text-surface-0 focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-surface-0 dark:focus-visible:ring-offset-surface-950"
          @click="toggleDarkMode"
        >
          <i :class="['pi text-base', { 'pi-moon': isDarkMode, 'pi-sun': !isDarkMode }]" />
        </button>
        <div class="relative">
          <Button
            v-styleclass="{
              selector: '@next',
              enterFromClass: 'hidden',
              enterActiveClass: 'animate-scalein',
              leaveToClass: 'hidden',
              leaveActiveClass: 'animate-fadeout',
              hideOnOutsideClick: true,
            }"
            icon="pi pi-cog"
            text
            rounded
            aria-label="Settings"
          />
          <AppConfig />
        </div>
      </div>
    </div>
  </div>
</template>
</file>

<file path="src/composables/useLayout.ts">
import { computed, ref } from 'vue'
interface AppState {
  primary: string
  surface: string | null
  darkMode: boolean
}
interface ColorPalette {
  [key: string]: string
}
interface Color {
  name: string
  palette: ColorPalette
}
⋮----
export function useLayout()
⋮----
function setPrimary(value: string)
function setSurface(value: string)
function toggleDarkMode()
function updateColors(type: string, color: Color)
function applyTheme(type: string, color: Color)
</file>

<file path="src/composables/x.js">
const appState = ref({
⋮----
const primaryColors = ref([
⋮----
const surfaces = ref([
⋮----
export function useLayout() {
function setPrimary(value) {
⋮----
function setSurface(value) {
⋮----
function toggleDarkMode() {
⋮----
document.documentElement.classList.toggle("p-dark");
⋮----
function updateColors(type, colorName) {
⋮----
setPrimary(colorName);
const color = primaryColors.value.find((c) => c.name === colorName);
updatePrimaryPalette(color.palette);
⋮----
setSurface(colorName);
const surfaceColor = surfaces.value.find((s) => s.name === colorName);
updateSurfacePalette(surfaceColor.palette);
⋮----
const isDarkMode = computed(() => appState.value.darkMode);
const primary = computed(() => appState.value.primary);
const surface = computed(() => appState.value.surface);
</file>

<file path="src/App.vue">
<script setup lang="ts">
  import AppFooter from './components/AppFooter.vue'
  import AppTopbar from './components/AppTopbar.vue'
  import StatsWidget from './components/dashboard/StatsWidget.vue'
  import SalesTrendWidget from './components/dashboard/SalesTrendWidget.vue'
  import RecentActivityWidget from './components/dashboard/RecentActivityWidget.vue'
  import ProductOverviewWidget from './components/dashboard/ProductOverviewWidget.vue'
</script>
<template>
  <div class="bg-surface-50 dark:bg-surface-950 min-h-screen p-8 flex flex-col gap-6">
    <AppTopbar />
    <div class="flex flex-col w-full max-w-7xl mx-auto gap-6 flex-1">
      <StatsWidget />
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <SalesTrendWidget />
        <RecentActivityWidget />
      </div>
      <ProductOverviewWidget />
    </div>
    <AppFooter />
  </div>
</template>
</file>

<file path="src/main.ts">
import Aura from "@primeuix/themes/aura";
import PrimeVue from "primevue/config";
import { createApp } from "vue";
import App from "./App.vue";
</file>

<file path=".eslintrc.cjs">
// apps/admin/.eslintrc.cjs
⋮----
root: false, // Set to false if you have a root ESLint config and this extends it.
// Set to true if this is standalone for the admin app or the root of its own linting.
// Assuming you might have a root config, adjust if needed.
⋮----
'plugin:vue/vue3-essential', // or vue3-recommended for more rules
⋮----
// If you have a root prettier config for the monorepo, you might not need this here
// or ensure it's compatible.
⋮----
// Add any project-specific rules here
⋮----
// If extending a root config, you might have something like:
// extends: ['../../.eslintrc.js'] // Adjust path as needed
</file>

<file path="auto-imports.d.ts">

</file>

<file path="components.d.ts">
export interface GlobalComponents {
    AppConfig: typeof import('./src/components/AppConfig.vue')['default']
    AppFooter: typeof import('./src/components/AppFooter.vue')['default']
    AppTopbar: typeof import('./src/components/AppTopbar.vue')['default']
    Button: typeof import('primevue/button')['default']
    Chart: typeof import('primevue/chart')['default']
    Column: typeof import('primevue/column')['default']
    DataTable: typeof import('primevue/datatable')['default']
    IconField: typeof import('primevue/iconfield')['default']
    InputIcon: typeof import('primevue/inputicon')['default']
    InputText: typeof import('primevue/inputtext')['default']
    ProductOverviewWidget: typeof import('./src/components/dashboard/ProductOverviewWidget.vue')['default']
    RecentActivityWidget: typeof import('./src/components/dashboard/RecentActivityWidget.vue')['default']
    RouterLink: typeof import('vue-router')['RouterLink']
    RouterView: typeof import('vue-router')['RouterView']
    SalesTrendWidget: typeof import('./src/components/dashboard/SalesTrendWidget.vue')['default']
    StatsWidget: typeof import('./src/components/dashboard/StatsWidget.vue')['default']
    Tag: typeof import('primevue/tag')['default']
  }
export interface ComponentCustomProperties {
    StyleClass: typeof import('primevue/styleclass')['default']
  }
</file>

<file path="env.d.ts">

</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite App</title>
  </head>
  <body class="bg-surface-50 dark:bg-surface-950 min-h-screen">
    <div id="app"></div>
    <script type="module" src="/src/main"></script>
  </body>
</html>
</file>

<file path="README.md">
#  PrimeVue + TailwindCSS v4 Example

## Overview

This example demonstrates how to integrate PrimeVue with TailwindCSS v4, showcasing a modern and responsive dashboard interface. The project features a dark/light theme toggle, responsive layout, and various PrimeVue components styled with TailwindCSS.

## Features

- Dark/Light theme support
- Fully responsive design
- PrimeVue components with TailwindCSS styling
- Chart.js integration
- Powered by Vite for fast development
- Real-time search functionality
- Customizable UI components

## Tech Stack

- [Vue.js](https://vuejs.org/) - The Progressive JavaScript Framework
- [PrimeVue](https://primevue.org/) - The Ultimate Vue UI Component Library
- [TailwindCSS](https://tailwindcss.com/) - A utility-first CSS framework
- [Vite](https://vitejs.dev/) - Next Generation Frontend Tooling
- [Chart.js](https://www.chartjs.org/) - Simple yet flexible JavaScript charting

## Getting Started

1. Clone the repository:

```bash
git clone https://github.com/primefaces/primevue-examples.git
cd primevue-examples/vite-tailwindv4
```

2. Install dependencies:

```bash
npm install
```

3. Start the development server:

```bash
npm run dev
```

4. Build for production:

```bash
npm run build
```

## Project Structure

```
vite-tailwindv4/
├── src/
│   ├── components/         # Vue components
│   ├── composables/        # Vue composables
│   ├── assets/            # Static assets
│   └── App.vue            # Root component
├── public/                # Public static assets
├── index.html            # Entry HTML file
└── vite.config.js        # Vite configuration
```

## Contributing

Contributions, issues, and feature requests are welcome! Feel free to check the [issues page](https://github.com/primefaces/primevue-examples/issues).
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import tailwindcss from '@tailwindcss/vite'
import Components from 'unplugin-vue-components/vite'
import { PrimeVueResolver } from '@primevue/auto-import-resolver'
import AutoImport from 'unplugin-auto-import/vite'
</file>

<file path=".gitignore">
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example
</file>

</files>
