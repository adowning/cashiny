// model VipInfo {
//   id     String @id @default(cuid())
//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   level               Int   @default(1) // Current VIP level
//   currentLevelXp      Float @default(0) // XP accumulated *within* the current level towards the next
//   totalXp             Float @default(0) // Total XP ever earned by the user
//   nextLevelXpRequired Float // The total XP required to complete the current level's XP bar (i.e., the "length" of this level's bar)
//   // This should be set based on your leveling.config.ts for the current 'level'

//   // Benefits based on VIP level (can be denormalized here or dynamically calculated)
//   cashbackPercentage      Float   @default(0.01) // e.g., 0.01 for 1%
//   prioritySupport         Boolean @default(false)
//   specialBonusesAvailable Int     @default(0) // Count of special, perhaps one-time, bonuses available

//   // Timestamps for last claimed periodic bonuses
//   dailyBonusClaimedAt   DateTime?
//   weeklyBonusClaimedAt  DateTime?
//   monthlyBonusClaimedAt DateTime?

//   // Other potential VIP-specific fields
//   // Example: dedicatedAccountManager Boolean @default(false)
//   // Example: higherWithdrawalLimits Boolean @default(false)
//   // Example: exclusiveAccessToEvents Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId]) // Ensure efficient lookups by userId
//   @@map("vipinfos")
// }

// enum RewardType {
//   DAILY_SIGN_IN
//   WEEKLY_CYCLE
//   MONTHLY_CYCLE
//   LEVEL_UP
//   VIP_TASK_COMPLETION
//   BET_REBATE // Cashback from wagers
//   // ... other specific reward types
//   ACHIEVEMENT_UNLOCKED
//   PROMO_CODE
//   DEPOSIT_BONUS
//   REGISTRATION_BONUS
//   FREE_SPINS
//   TOURNAMENT_PRIZE
//   OTHER
// }

// enum RewardStatus {
//   AVAILABLE // User can claim this reward
//   CLAIMED // User has successfully claimed this reward
//   EXPIRED // Reward was available but expired before being claimed
//   PENDING // Reward is pending, e.g., needs verification or processing before becoming available/claimed
//   VOIDED // Reward was voided by an admin or system rule
// }

// // Tracks specific instances of rewards available to or claimed by a user
// model UserReward {
//   id     String @id @default(cuid())
//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   rewardType  RewardType
//   description String // e.g., "Daily Sign-in Bonus - Day 3", "Level 5 Reached!", "Weekly Cashback"
//   status      RewardStatus @default(AVAILABLE)
//   amount      Float? // e.g., bonus currency amount, number of free spins
//   currencyId  String? // If the reward is monetary
//   // currency    Currency? @relation(fields: [currencyId], references: [id]) // If monetary
//   metaData    Json? // e.g., { "level": 5, "bonusCode": "VIPSPECIAL" }

//   claimedAt     DateTime?
//   expiresAt     DateTime? // Some rewards might expire
//   availableFrom DateTime  @default(now()) // When the reward becomes available

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   vipLevelRequirement Int? // Optional: if this reward is tied to being a certain VIP level

//   @@index([userId, status])
//   @@index([userId, rewardType])
// }

// enum VipTaskType {
//   DEPOSIT_STREAK // Make N deposits in X days
//   WAGER_AMOUNT // Wager X amount in Y period
//   LOGIN_STREAK // Log in for N consecutive days
//   PROFILE_COMPLETION // Complete user profile details
//   PLAY_SPECIFIC_GAME // Play N rounds on a specific game
//   VERIFY_EMAIL
//   PLACE_BETS // Place N number of bets
//   WIN_STREAK // Achieve N wins in a row on a specific game type
// }

// model VipTask {
//   id                String      @id @default(cuid())
//   taskType          VipTaskType
//   description       String
//   xpReward          Float?
//   itemRewardId      String? // Could link to an Item model if you have virtual items
//   // itemReward         Item?    @relation(fields: [itemRewardId], references: [id])
//   bonusRewardAmount Float?
//   bonusCurrencyId   String?
//   // bonusCurrency      Currency? @relation(fields: [bonusCurrencyId], references: [id])
//   targetValue       Float? // e.g., wager 1000 USD, deposit 3 days in a row
//   durationDays      Int? // For streak tasks
//   isActive          Boolean     @default(true)
//   requiredVipLevel  Int         @default(1) // Minimum VIP level to see/participate in this task

//   userTaskProgress UserVipTaskProgress[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model UserVipTaskProgress {
//   id     String  @id @default(cuid())
//   userId String
//   user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   taskId String
//   task   VipTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

//   progress  Float     @default(0) // Current progress towards targetValue
//   completed Boolean   @default(false)
//   claimedAt DateTime? // When the reward for this task was claimed

//   lastProgressAt DateTime @updatedAt // To track streaks or daily progress

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([userId, taskId]) // User has one progress record per task
// }

// // For rebate history, a specific model might be useful or it could be part of Transactions
// model RebateTransaction {
//   id                  String      @id @default(cuid())
//   userId              String
//   user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
//   transactionId       String      @unique // Original transaction that generated the rebate
//   originalTransaction Transaction @relation(fields: [transactionId], references: [id])

//   rebateAmount     Float
//   currencyId       String
//   // currency      Currency @relation(fields: [currencyId], references: [id])
//   vipLevel         Int // VIP level at the time of the original transaction
//   rebatePercentage Float // Cashback percentage applied

//   status    RewardStatus @default(PENDING) // PENDING until paid out, then CLAIMED/COMPLETED
//   paidOutAt DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId, status])
// }

// // // === prisma/schema.prisma (or your ps.txt) ===

// // // Add to existing User model or ensure these fields are considered:
// // // model User {
// // //   ...
// // //   vip UserVipProgress?
// // // }

// // // Defines each VIP level
// // model VipLevel {
// //   id          String  @id @default(cuid())
// //   level       Int     @unique // Numeric level (e.g., 0, 1, 2...)
// //   name        String // Display name (e.g., "Bronze", "Silver", "VIP1")
// //   rankName    String? // If you have a separate "rank" name from the level name
// //   iconUrl     String? // URL for the level's badge/icon
// //   description String? // Description of the level

// //   // Requirements to reach this level
// //   xpRequired         Int     @default(0) // Total XP points (if you use a unified XP system)
// //   depositExpRequired Decimal @default(0) @db.Decimal(18, 2) // Cumulative deposit amount or deposit-derived XP
// //   betExpRequired     Decimal @default(0) @db.Decimal(18, 2) // Cumulative betting turnover or bet-derived XP

// //   // Rewards for achieving this level
// //   levelUpBonusAmount Decimal? @db.Decimal(18, 2) // One-time bonus upon reaching this level
// //   // rankUpBonusAmount   Decimal?  @db.Decimal(18, 2) // If rank up is distinct from level up

// //   // Cyclical reward configurations for this level
// //   weeklyBonusAmount  Decimal? @db.Decimal(18, 2)
// //   monthlyBonusAmount Decimal? @db.Decimal(18, 2)

// //   // Benefit multipliers/rates
// //   dailySignInMultiplier Decimal? @default(1.0) @db.Decimal(5, 2) // e.g., 1.0, 1.2, 1.5
// //   cashbackRate          Decimal? @default(0) @db.Decimal(5, 4) // e.g., 0.05 for 5%
// //   rebateRate            Decimal? @default(0) @db.Decimal(5, 4) // If distinct from cashback

// //   // Switches from VipInfo (can be per-level or global app settings)
// //   // For per-level control:
// //   cycleAwardSwitch  Boolean @default(true) // Weekly/Monthly bonus active
// //   levelAwardSwitch  Boolean @default(true) // Level up bonus active
// //   signInAwardSwitch Boolean @default(true) // Sign-in bonus active (or multiplier)
// //   betAwardSwitch    Boolean @default(true) // Bet/Turnover based rewards active

// //   // Relegation protection settings
// //   protectionDays Int?   @default(0) // Days of protection before potential demotion
// //   keepRate       Float? @default(0) // e.g. 0.8 means 80% of exp needed to maintain level

// //   // JSON field for flexible/additional benefits not easily modeled otherwise
// //   // This aligns with `PrismaVipBenefit` from your vip_interface.ts
// //   additionalBenefits Json? // Store as array of { name: string, description: string, value: string, type: string }

// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt

// //   // Relations
// //   userVipProgresses UserVipProgress[] // Users who are at this VIP level
// //   // If you want a more structured approach for benefits instead of JSON:
// //   // specificBenefits    VipSpecificBenefit[]
// // }

// // // Tracks a user's specific VIP progress and status
// // model UserVipProgress {
// //   id     String @id @default(cuid())
// //   userId String @unique
// //   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

// //   currentVipLevelId     String
// //   currentVipLevel       VipLevel @relation(fields: [currentVipLevelId], references: [id])
// //   currentVipLevelNumber Int // Denormalized for querying convenience; matches currentVipLevel.level

// //   // Current cycle accumulation (for weekly/monthly rewards/maintenance)
// //   currentCycleDepositExp Decimal  @default(0) @db.Decimal(18, 2)
// //   currentCycleBetExp     Decimal  @default(0) @db.Decimal(18, 2)
// //   cycleStartDate         DateTime @default(now()) // Start of the current weekly/monthly cycle

// //   // Lifetime accumulation for level progression
// //   lifetimeDepositExp Decimal @default(0) @db.Decimal(18, 2)
// //   lifetimeBetExp     Decimal @default(0) @db.Decimal(18, 2)
// //   totalXp            BigInt  @default(0) // If you have a separate VIP XP system

// //   // Relegation Protection
// //   isRelegationProtected       Boolean   @default(false)
// //   relegationProtectionEndDate DateTime?

// //   // Timestamps for last claimed rewards
// //   lastLevelUpRewardClaimedForLevel Int? // Which level's reward was claimed
// //   lastWeeklyBonusClaimedAt         DateTime?
// //   lastMonthlyBonusClaimedAt        DateTime?
// //   lastDailySignInDate              DateTime? // Date of last successful daily sign-in for VIP
// //   lastBetRewardClaimedAt           DateTime? // For turnover/bet based rewards

// //   // User-specific overrides or notes
// //   telegramHandle String? // User's telegram handle, if provided

// //   // Matches exp_switch_type in VipInfo from your interface.
// //   // This might indicate how user's XP is calculated (e.g., 1 for deposit, 2 for bet, 3 for both)
// //   // Could also be a global setting or derived.
// //   expSwitchType Int? @default(3) // Example: 1=deposit, 2=bet, 3=both

// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt
// //   User      User[]   @relation("UserToVipProgress")

// //   @@index([userId])
// //   @@index([currentVipLevelId])
// // }

// // // Records claimed VIP rewards (for audit and preventing double claims)
// // model VipRewardClaim {
// //   id     String @id @default(cuid())
// //   userId String
// //   user   User   @relation(fields: [userId], references: [id])

// //   rewardType        String // e.g., "LEVEL_UP", "WEEKLY_BONUS", "DAILY_SIGN_IN", "BET_REBATE"
// //   vipLevelAtClaim   Int // VIP level when the reward was claimed
// //   claimedAmount     Decimal? @db.Decimal(18, 2) // Amount of the bonus/reward
// //   currency          String? // Currency of the reward, if applicable
// //   description       String? // e.g., "Level 5 Upgrade Bonus"
// //   relatedResourceId String? // e.g., ID of the VipLevel for level up, or a specific weekly cycle ID

// //   claimedAt DateTime @default(now())
// //   User      User[]   @relation("UserToVipRewardClaims")

// //   @@index([userId, rewardType])
// // }

// // // For VIP Tasks if you implement them
// // model VipTask {
// //   id               String   @id @default(cuid())
// //   title            String
// //   description      String?
// //   xpReward         Int      @default(0)
// //   bonusReward      Decimal? @db.Decimal(18, 2)
// //   currencyForBonus String?
// //   type             String // e.g., 'DEPOSIT_X_AMOUNT', 'BET_Y_TIMES', 'COMPLETE_PROFILE'
// //   targetValue      Decimal? // e.g., deposit amount, number of bets
// //   isActive         Boolean  @default(true)
// //   resetFrequency   String? // e.g., 'DAILY', 'WEEKLY', 'NONE' (for one-time tasks)

// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt

// //   userTaskProgress UserVipTaskProgress[]
// // }

// // model UserVipTaskProgress {
// //   id        String  @id @default(cuid())
// //   userId    String
// //   user      User    @relation(fields: [userId], references: [id])
// //   vipTaskId String
// //   vipTask   VipTask @relation(fields: [vipTaskId], references: [id])

// //   progress    Decimal   @default(0) // Current progress towards targetValue
// //   isCompleted Boolean   @default(false)
// //   completedAt DateTime?
// //   lastResetAt DateTime? // If the task resets

// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt

// //   @@unique([userId, vipTaskId]) // A user has one progress entry per task
// //   @@index([userId])
// //   @@index([vipTaskId])
// // }

// // // Make sure to add the 'vip' relation to your User model:
// // // model User {
// // //   ... existing fields ...
// // //   vipProgress UserVipProgress?
// // //   vipRewardClaims VipRewardClaim[]
// // //   vipTaskProgress UserVipTaskProgress[]
// // //   ... other relations ...
// // // }
