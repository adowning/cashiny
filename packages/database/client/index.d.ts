
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Currency
 * 
 */
export type Currency = $Result.DefaultSelection<Prisma.$CurrencyPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Settings
 * 
 */
export type Settings = $Result.DefaultSelection<Prisma.$SettingsPayload>
/**
 * Model Wallet
 * 
 */
export type Wallet = $Result.DefaultSelection<Prisma.$WalletPayload>
/**
 * Model OperatorAccess
 * 
 */
export type OperatorAccess = $Result.DefaultSelection<Prisma.$OperatorAccessPayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model GameSpin
 * 
 */
export type GameSpin = $Result.DefaultSelection<Prisma.$GameSpinPayload>
/**
 * Model GameSession
 * 
 */
export type GameSession = $Result.DefaultSelection<Prisma.$GameSessionPayload>
/**
 * Model UserAchievement
 * 
 */
export type UserAchievement = $Result.DefaultSelection<Prisma.$UserAchievementPayload>
/**
 * Model XpEvent
 * 
 */
export type XpEvent = $Result.DefaultSelection<Prisma.$XpEventPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model Friendship
 * 
 */
export type Friendship = $Result.DefaultSelection<Prisma.$FriendshipPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model GameLaunchLink
 * 
 */
export type GameLaunchLink = $Result.DefaultSelection<Prisma.$GameLaunchLinkPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model EventLog
 * 
 */
export type EventLog = $Result.DefaultSelection<Prisma.$EventLogPayload>
/**
 * Model OperatorInvitation
 * 
 */
export type OperatorInvitation = $Result.DefaultSelection<Prisma.$OperatorInvitationPayload>
/**
 * Model VipInfo
 * 
 */
export type VipInfo = $Result.DefaultSelection<Prisma.$VipInfoPayload>
/**
 * Model UserReward
 * 
 */
export type UserReward = $Result.DefaultSelection<Prisma.$UserRewardPayload>
/**
 * Model VipTask
 * 
 */
export type VipTask = $Result.DefaultSelection<Prisma.$VipTaskPayload>
/**
 * Model UserVipTaskProgress
 * 
 */
export type UserVipTaskProgress = $Result.DefaultSelection<Prisma.$UserVipTaskProgressPayload>
/**
 * Model RebateTransaction
 * 
 */
export type RebateTransaction = $Result.DefaultSelection<Prisma.$RebateTransactionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  VIP: 'VIP',
  MODERATOR: 'MODERATOR',
  SYSTEM: 'SYSTEM',
  OWNER: 'OWNER',
  MEMBER: 'MEMBER',
  OPERATOR: 'OPERATOR',
  SUPPORT_AGENT: 'SUPPORT_AGENT'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ProductType: {
  DEPOSIT_PACKAGE: 'DEPOSIT_PACKAGE',
  VIRTUAL_CURRENCY: 'VIRTUAL_CURRENCY',
  ITEM: 'ITEM',
  SUBSCRIPTION: 'SUBSCRIPTION',
  FEATURE_UNLOCK: 'FEATURE_UNLOCK'
};

export type ProductType = (typeof ProductType)[keyof typeof ProductType]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  DEACTIVATED: 'DEACTIVATED',
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  NON_BINARY: 'NON_BINARY',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const GameCategory: {
  FISH: 'FISH',
  POKER: 'POKER',
  SLOTS: 'SLOTS',
  TABLE_GAMES: 'TABLE_GAMES',
  LIVE_CASINO: 'LIVE_CASINO',
  SPORTSBOOK: 'SPORTSBOOK',
  VIRTUAL_SPORTS: 'VIRTUAL_SPORTS',
  LOTTERY: 'LOTTERY',
  CRASH: 'CRASH',
  OTHER: 'OTHER'
};

export type GameCategory = (typeof GameCategory)[keyof typeof GameCategory]


export const GameProvider: {
  PRAGMATICPLAY: 'PRAGMATICPLAY',
  EVOPLAY: 'EVOPLAY',
  NETENT: 'NETENT',
  PLAYNGO: 'PLAYNGO',
  RELAXGAMING: 'RELAXGAMING',
  HACKSAW: 'HACKSAW',
  BGAMING: 'BGAMING',
  SPRIBE: 'SPRIBE',
  INTERNAL: 'INTERNAL',
  REDTIGER: 'REDTIGER',
  NETGAME: 'NETGAME',
  BIGFISHGAMES: 'BIGFISHGAMES',
  CQNINE: 'CQNINE',
  NOLIMIT: 'NOLIMIT',
  KICKASS: 'KICKASS'
};

export type GameProvider = (typeof GameProvider)[keyof typeof GameProvider]


export const TransactionType: {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  BET: 'BET',
  WIN: 'WIN',
  TRANSFER_SENT: 'TRANSFER_SENT',
  TRANSFER_RECEIVED: 'TRANSFER_RECEIVED',
  SYSTEM_ADJUSTMENT_CREDIT: 'SYSTEM_ADJUSTMENT_CREDIT',
  SYSTEM_ADJUSTMENT_DEBIT: 'SYSTEM_ADJUSTMENT_DEBIT',
  TOURNAMENT_BUYIN: 'TOURNAMENT_BUYIN',
  TOURNAMENT_PRIZE: 'TOURNAMENT_PRIZE',
  AFFILIATE_COMMISSION: 'AFFILIATE_COMMISSION',
  REFUND: 'REFUND',
  FEE: 'FEE',
  BONUS_AWARD: 'BONUS_AWARD',
  BET_PLACE: 'BET_PLACE',
  BET_WIN: 'BET_WIN',
  BET_LOSE: 'BET_LOSE',
  BET_REFUND: 'BET_REFUND',
  BONUS_WAGER: 'BONUS_WAGER',
  BONUS_CONVERT: 'BONUS_CONVERT',
  BONUS_EXPIRED: 'BONUS_EXPIRED',
  XP_AWARD: 'XP_AWARD',
  ADJUSTMENT_ADD: 'ADJUSTMENT_ADD',
  ADJUSTMENT_SUB: 'ADJUSTMENT_SUB',
  INTERNAL_TRANSFER: 'INTERNAL_TRANSFER',
  PRODUCT_PURCHASE: 'PRODUCT_PURCHASE',
  REBATE_PAYOUT: 'REBATE_PAYOUT'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]


export const TransactionStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  EXPIRED: 'EXPIRED',
  REJECTED: 'REJECTED',
  REQUIRES_ACTION: 'REQUIRES_ACTION',
  ON_HOLD: 'ON_HOLD'
};

export type TransactionStatus = (typeof TransactionStatus)[keyof typeof TransactionStatus]


export const NotificationType: {
  SYSTEM_MESSAGE: 'SYSTEM_MESSAGE',
  FRIEND_REQUEST_RECEIVED: 'FRIEND_REQUEST_RECEIVED',
  FRIEND_REQUEST_ACCEPTED: 'FRIEND_REQUEST_ACCEPTED',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  BALANCE_UPDATE: 'BALANCE_UPDATE',
  PROMOTIONAL_OFFER: 'PROMOTIONAL_OFFER',
  TOURNAMENT_INVITE: 'TOURNAMENT_INVITE',
  TOURNAMENT_RESULT: 'TOURNAMENT_RESULT',
  SECURITY_ALERT: 'SECURITY_ALERT',
  GAME_EVENT: 'GAME_EVENT',
  NEW_MESSAGE: 'NEW_MESSAGE',
  LEVEL_UP: 'LEVEL_UP',
  GENERAL_INFO: 'GENERAL_INFO',
  PROMOTION: 'PROMOTION',
  SECUITY_ALERT: 'SECUITY_ALERT',
  TRANSACTION_UPDATE: 'TRANSACTION_UPDATE',
  REWARD_UNLOCKED: 'REWARD_UNLOCKED',
  MAINTENANCE: 'MAINTENANCE'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const FriendshipStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  BLOCKED: 'BLOCKED'
};

export type FriendshipStatus = (typeof FriendshipStatus)[keyof typeof FriendshipStatus]


export const KeyMode: {
  read: 'read',
  write: 'write',
  upload: 'upload',
  manage_users: 'manage_users',
  manage_settings: 'manage_settings',
  launch_game: 'launch_game'
};

export type KeyMode = (typeof KeyMode)[keyof typeof KeyMode]


export const InvitationStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  INACTIVE: 'INACTIVE'
};

export type InvitationStatus = (typeof InvitationStatus)[keyof typeof InvitationStatus]


export const PaymentMethod: {
  INSTORE_CASH: 'INSTORE_CASH',
  INSTORE_CARD: 'INSTORE_CARD',
  CASH_APP: 'CASH_APP'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const CurrencyType: {
  FIAT: 'FIAT',
  CRYPTO: 'CRYPTO',
  VIRTUAL: 'VIRTUAL'
};

export type CurrencyType = (typeof CurrencyType)[keyof typeof CurrencyType]


export const RewardType: {
  DAILY_SIGN_IN: 'DAILY_SIGN_IN',
  WEEKLY_CYCLE: 'WEEKLY_CYCLE',
  MONTHLY_CYCLE: 'MONTHLY_CYCLE',
  LEVEL_UP: 'LEVEL_UP',
  VIP_TASK_COMPLETION: 'VIP_TASK_COMPLETION',
  BET_REBATE: 'BET_REBATE',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  PROMO_CODE: 'PROMO_CODE',
  DEPOSIT_BONUS: 'DEPOSIT_BONUS',
  REGISTRATION_BONUS: 'REGISTRATION_BONUS',
  FREE_SPINS: 'FREE_SPINS',
  TOURNAMENT_PRIZE: 'TOURNAMENT_PRIZE',
  OTHER: 'OTHER'
};

export type RewardType = (typeof RewardType)[keyof typeof RewardType]


export const RewardStatus: {
  AVAILABLE: 'AVAILABLE',
  CLAIMED: 'CLAIMED',
  EXPIRED: 'EXPIRED',
  PENDING: 'PENDING',
  VOIDED: 'VOIDED'
};

export type RewardStatus = (typeof RewardStatus)[keyof typeof RewardStatus]


export const VipTaskType: {
  DEPOSIT_STREAK: 'DEPOSIT_STREAK',
  WAGER_AMOUNT: 'WAGER_AMOUNT',
  LOGIN_STREAK: 'LOGIN_STREAK',
  PROFILE_COMPLETION: 'PROFILE_COMPLETION',
  PLAY_SPECIFIC_GAME: 'PLAY_SPECIFIC_GAME',
  VERIFY_EMAIL: 'VERIFY_EMAIL',
  PLACE_BETS: 'PLACE_BETS',
  WIN_STREAK: 'WIN_STREAK'
};

export type VipTaskType = (typeof VipTaskType)[keyof typeof VipTaskType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ProductType = $Enums.ProductType

export const ProductType: typeof $Enums.ProductType

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type GameCategory = $Enums.GameCategory

export const GameCategory: typeof $Enums.GameCategory

export type GameProvider = $Enums.GameProvider

export const GameProvider: typeof $Enums.GameProvider

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

export type TransactionStatus = $Enums.TransactionStatus

export const TransactionStatus: typeof $Enums.TransactionStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type FriendshipStatus = $Enums.FriendshipStatus

export const FriendshipStatus: typeof $Enums.FriendshipStatus

export type KeyMode = $Enums.KeyMode

export const KeyMode: typeof $Enums.KeyMode

export type InvitationStatus = $Enums.InvitationStatus

export const InvitationStatus: typeof $Enums.InvitationStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type CurrencyType = $Enums.CurrencyType

export const CurrencyType: typeof $Enums.CurrencyType

export type RewardType = $Enums.RewardType

export const RewardType: typeof $Enums.RewardType

export type RewardStatus = $Enums.RewardStatus

export const RewardStatus: typeof $Enums.RewardStatus

export type VipTaskType = $Enums.VipTaskType

export const VipTaskType: typeof $Enums.VipTaskType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.currency`: Exposes CRUD operations for the **Currency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Currencies
    * const currencies = await prisma.currency.findMany()
    * ```
    */
  get currency(): Prisma.CurrencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **Settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.SettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operatorAccess`: Exposes CRUD operations for the **OperatorAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OperatorAccesses
    * const operatorAccesses = await prisma.operatorAccess.findMany()
    * ```
    */
  get operatorAccess(): Prisma.OperatorAccessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameSpin`: Exposes CRUD operations for the **GameSpin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameSpins
    * const gameSpins = await prisma.gameSpin.findMany()
    * ```
    */
  get gameSpin(): Prisma.GameSpinDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameSession`: Exposes CRUD operations for the **GameSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameSessions
    * const gameSessions = await prisma.gameSession.findMany()
    * ```
    */
  get gameSession(): Prisma.GameSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAchievement`: Exposes CRUD operations for the **UserAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAchievements
    * const userAchievements = await prisma.userAchievement.findMany()
    * ```
    */
  get userAchievement(): Prisma.UserAchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.xpEvent`: Exposes CRUD operations for the **XpEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more XpEvents
    * const xpEvents = await prisma.xpEvent.findMany()
    * ```
    */
  get xpEvent(): Prisma.XpEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameLaunchLink`: Exposes CRUD operations for the **GameLaunchLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameLaunchLinks
    * const gameLaunchLinks = await prisma.gameLaunchLink.findMany()
    * ```
    */
  get gameLaunchLink(): Prisma.GameLaunchLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventLog`: Exposes CRUD operations for the **EventLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventLogs
    * const eventLogs = await prisma.eventLog.findMany()
    * ```
    */
  get eventLog(): Prisma.EventLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operatorInvitation`: Exposes CRUD operations for the **OperatorInvitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OperatorInvitations
    * const operatorInvitations = await prisma.operatorInvitation.findMany()
    * ```
    */
  get operatorInvitation(): Prisma.OperatorInvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vipInfo`: Exposes CRUD operations for the **VipInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VipInfos
    * const vipInfos = await prisma.vipInfo.findMany()
    * ```
    */
  get vipInfo(): Prisma.VipInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userReward`: Exposes CRUD operations for the **UserReward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRewards
    * const userRewards = await prisma.userReward.findMany()
    * ```
    */
  get userReward(): Prisma.UserRewardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vipTask`: Exposes CRUD operations for the **VipTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VipTasks
    * const vipTasks = await prisma.vipTask.findMany()
    * ```
    */
  get vipTask(): Prisma.VipTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userVipTaskProgress`: Exposes CRUD operations for the **UserVipTaskProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserVipTaskProgresses
    * const userVipTaskProgresses = await prisma.userVipTaskProgress.findMany()
    * ```
    */
  get userVipTaskProgress(): Prisma.UserVipTaskProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rebateTransaction`: Exposes CRUD operations for the **RebateTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RebateTransactions
    * const rebateTransactions = await prisma.rebateTransaction.findMany()
    * ```
    */
  get rebateTransaction(): Prisma.RebateTransactionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Currency: 'Currency',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Profile: 'Profile',
    Settings: 'Settings',
    Wallet: 'Wallet',
    OperatorAccess: 'OperatorAccess',
    Achievement: 'Achievement',
    Game: 'Game',
    Post: 'Post',
    Comment: 'Comment',
    GameSpin: 'GameSpin',
    GameSession: 'GameSession',
    UserAchievement: 'UserAchievement',
    XpEvent: 'XpEvent',
    Notification: 'Notification',
    ChatMessage: 'ChatMessage',
    Friendship: 'Friendship',
    Transaction: 'Transaction',
    GameLaunchLink: 'GameLaunchLink',
    Product: 'Product',
    EventLog: 'EventLog',
    OperatorInvitation: 'OperatorInvitation',
    VipInfo: 'VipInfo',
    UserReward: 'UserReward',
    VipTask: 'VipTask',
    UserVipTaskProgress: 'UserVipTaskProgress',
    RebateTransaction: 'RebateTransaction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "currency" | "session" | "account" | "verification" | "profile" | "settings" | "wallet" | "operatorAccess" | "achievement" | "game" | "post" | "comment" | "gameSpin" | "gameSession" | "userAchievement" | "xpEvent" | "notification" | "chatMessage" | "friendship" | "transaction" | "gameLaunchLink" | "product" | "eventLog" | "operatorInvitation" | "vipInfo" | "userReward" | "vipTask" | "userVipTaskProgress" | "rebateTransaction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Currency: {
        payload: Prisma.$CurrencyPayload<ExtArgs>
        fields: Prisma.CurrencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurrencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurrencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findFirst: {
            args: Prisma.CurrencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurrencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findMany: {
            args: Prisma.CurrencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          create: {
            args: Prisma.CurrencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          createMany: {
            args: Prisma.CurrencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurrencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          delete: {
            args: Prisma.CurrencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          update: {
            args: Prisma.CurrencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          deleteMany: {
            args: Prisma.CurrencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurrencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CurrencyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          upsert: {
            args: Prisma.CurrencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          aggregate: {
            args: Prisma.CurrencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurrency>
          }
          groupBy: {
            args: Prisma.CurrencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurrencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurrencyCountArgs<ExtArgs>
            result: $Utils.Optional<CurrencyCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Settings: {
        payload: Prisma.$SettingsPayload<ExtArgs>
        fields: Prisma.SettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findFirst: {
            args: Prisma.SettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findMany: {
            args: Prisma.SettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          create: {
            args: Prisma.SettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          createMany: {
            args: Prisma.SettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          delete: {
            args: Prisma.SettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          update: {
            args: Prisma.SettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          deleteMany: {
            args: Prisma.SettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          upsert: {
            args: Prisma.SettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          aggregate: {
            args: Prisma.SettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSettings>
          }
          groupBy: {
            args: Prisma.SettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SettingsCountAggregateOutputType> | number
          }
        }
      }
      Wallet: {
        payload: Prisma.$WalletPayload<ExtArgs>
        fields: Prisma.WalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findFirst: {
            args: Prisma.WalletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findMany: {
            args: Prisma.WalletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          create: {
            args: Prisma.WalletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          createMany: {
            args: Prisma.WalletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          delete: {
            args: Prisma.WalletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          update: {
            args: Prisma.WalletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          deleteMany: {
            args: Prisma.WalletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WalletUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          upsert: {
            args: Prisma.WalletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.WalletGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletCountArgs<ExtArgs>
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      OperatorAccess: {
        payload: Prisma.$OperatorAccessPayload<ExtArgs>
        fields: Prisma.OperatorAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperatorAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperatorAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>
          }
          findFirst: {
            args: Prisma.OperatorAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperatorAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>
          }
          findMany: {
            args: Prisma.OperatorAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>[]
          }
          create: {
            args: Prisma.OperatorAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>
          }
          createMany: {
            args: Prisma.OperatorAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperatorAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>[]
          }
          delete: {
            args: Prisma.OperatorAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>
          }
          update: {
            args: Prisma.OperatorAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>
          }
          deleteMany: {
            args: Prisma.OperatorAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperatorAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperatorAccessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>[]
          }
          upsert: {
            args: Prisma.OperatorAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorAccessPayload>
          }
          aggregate: {
            args: Prisma.OperatorAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperatorAccess>
          }
          groupBy: {
            args: Prisma.OperatorAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperatorAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperatorAccessCountArgs<ExtArgs>
            result: $Utils.Optional<OperatorAccessCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      GameSpin: {
        payload: Prisma.$GameSpinPayload<ExtArgs>
        fields: Prisma.GameSpinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameSpinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameSpinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>
          }
          findFirst: {
            args: Prisma.GameSpinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameSpinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>
          }
          findMany: {
            args: Prisma.GameSpinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>[]
          }
          create: {
            args: Prisma.GameSpinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>
          }
          createMany: {
            args: Prisma.GameSpinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameSpinCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>[]
          }
          delete: {
            args: Prisma.GameSpinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>
          }
          update: {
            args: Prisma.GameSpinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>
          }
          deleteMany: {
            args: Prisma.GameSpinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameSpinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameSpinUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>[]
          }
          upsert: {
            args: Prisma.GameSpinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSpinPayload>
          }
          aggregate: {
            args: Prisma.GameSpinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameSpin>
          }
          groupBy: {
            args: Prisma.GameSpinGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameSpinGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameSpinCountArgs<ExtArgs>
            result: $Utils.Optional<GameSpinCountAggregateOutputType> | number
          }
        }
      }
      GameSession: {
        payload: Prisma.$GameSessionPayload<ExtArgs>
        fields: Prisma.GameSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findFirst: {
            args: Prisma.GameSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findMany: {
            args: Prisma.GameSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          create: {
            args: Prisma.GameSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          createMany: {
            args: Prisma.GameSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          delete: {
            args: Prisma.GameSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          update: {
            args: Prisma.GameSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          deleteMany: {
            args: Prisma.GameSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          upsert: {
            args: Prisma.GameSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          aggregate: {
            args: Prisma.GameSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameSession>
          }
          groupBy: {
            args: Prisma.GameSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameSessionCountArgs<ExtArgs>
            result: $Utils.Optional<GameSessionCountAggregateOutputType> | number
          }
        }
      }
      UserAchievement: {
        payload: Prisma.$UserAchievementPayload<ExtArgs>
        fields: Prisma.UserAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findFirst: {
            args: Prisma.UserAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findMany: {
            args: Prisma.UserAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          create: {
            args: Prisma.UserAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          createMany: {
            args: Prisma.UserAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          delete: {
            args: Prisma.UserAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          update: {
            args: Prisma.UserAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          deleteMany: {
            args: Prisma.UserAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserAchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          upsert: {
            args: Prisma.UserAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          aggregate: {
            args: Prisma.UserAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAchievement>
          }
          groupBy: {
            args: Prisma.UserAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementCountAggregateOutputType> | number
          }
        }
      }
      XpEvent: {
        payload: Prisma.$XpEventPayload<ExtArgs>
        fields: Prisma.XpEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.XpEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.XpEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>
          }
          findFirst: {
            args: Prisma.XpEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.XpEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>
          }
          findMany: {
            args: Prisma.XpEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>[]
          }
          create: {
            args: Prisma.XpEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>
          }
          createMany: {
            args: Prisma.XpEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.XpEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>[]
          }
          delete: {
            args: Prisma.XpEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>
          }
          update: {
            args: Prisma.XpEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>
          }
          deleteMany: {
            args: Prisma.XpEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.XpEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.XpEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>[]
          }
          upsert: {
            args: Prisma.XpEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpEventPayload>
          }
          aggregate: {
            args: Prisma.XpEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateXpEvent>
          }
          groupBy: {
            args: Prisma.XpEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<XpEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.XpEventCountArgs<ExtArgs>
            result: $Utils.Optional<XpEventCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      Friendship: {
        payload: Prisma.$FriendshipPayload<ExtArgs>
        fields: Prisma.FriendshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FriendshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FriendshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findFirst: {
            args: Prisma.FriendshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FriendshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findMany: {
            args: Prisma.FriendshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          create: {
            args: Prisma.FriendshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          createMany: {
            args: Prisma.FriendshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FriendshipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          delete: {
            args: Prisma.FriendshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          update: {
            args: Prisma.FriendshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          deleteMany: {
            args: Prisma.FriendshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FriendshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FriendshipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          upsert: {
            args: Prisma.FriendshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          aggregate: {
            args: Prisma.FriendshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFriendship>
          }
          groupBy: {
            args: Prisma.FriendshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<FriendshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.FriendshipCountArgs<ExtArgs>
            result: $Utils.Optional<FriendshipCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      GameLaunchLink: {
        payload: Prisma.$GameLaunchLinkPayload<ExtArgs>
        fields: Prisma.GameLaunchLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameLaunchLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameLaunchLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>
          }
          findFirst: {
            args: Prisma.GameLaunchLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameLaunchLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>
          }
          findMany: {
            args: Prisma.GameLaunchLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>[]
          }
          create: {
            args: Prisma.GameLaunchLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>
          }
          createMany: {
            args: Prisma.GameLaunchLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameLaunchLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>[]
          }
          delete: {
            args: Prisma.GameLaunchLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>
          }
          update: {
            args: Prisma.GameLaunchLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>
          }
          deleteMany: {
            args: Prisma.GameLaunchLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameLaunchLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameLaunchLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>[]
          }
          upsert: {
            args: Prisma.GameLaunchLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameLaunchLinkPayload>
          }
          aggregate: {
            args: Prisma.GameLaunchLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameLaunchLink>
          }
          groupBy: {
            args: Prisma.GameLaunchLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameLaunchLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameLaunchLinkCountArgs<ExtArgs>
            result: $Utils.Optional<GameLaunchLinkCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      EventLog: {
        payload: Prisma.$EventLogPayload<ExtArgs>
        fields: Prisma.EventLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>
          }
          findFirst: {
            args: Prisma.EventLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>
          }
          findMany: {
            args: Prisma.EventLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>[]
          }
          create: {
            args: Prisma.EventLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>
          }
          createMany: {
            args: Prisma.EventLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>[]
          }
          delete: {
            args: Prisma.EventLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>
          }
          update: {
            args: Prisma.EventLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>
          }
          deleteMany: {
            args: Prisma.EventLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>[]
          }
          upsert: {
            args: Prisma.EventLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventLogPayload>
          }
          aggregate: {
            args: Prisma.EventLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventLog>
          }
          groupBy: {
            args: Prisma.EventLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventLogCountArgs<ExtArgs>
            result: $Utils.Optional<EventLogCountAggregateOutputType> | number
          }
        }
      }
      OperatorInvitation: {
        payload: Prisma.$OperatorInvitationPayload<ExtArgs>
        fields: Prisma.OperatorInvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperatorInvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperatorInvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>
          }
          findFirst: {
            args: Prisma.OperatorInvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperatorInvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>
          }
          findMany: {
            args: Prisma.OperatorInvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>[]
          }
          create: {
            args: Prisma.OperatorInvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>
          }
          createMany: {
            args: Prisma.OperatorInvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperatorInvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>[]
          }
          delete: {
            args: Prisma.OperatorInvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>
          }
          update: {
            args: Prisma.OperatorInvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>
          }
          deleteMany: {
            args: Prisma.OperatorInvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperatorInvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperatorInvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>[]
          }
          upsert: {
            args: Prisma.OperatorInvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorInvitationPayload>
          }
          aggregate: {
            args: Prisma.OperatorInvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperatorInvitation>
          }
          groupBy: {
            args: Prisma.OperatorInvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperatorInvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperatorInvitationCountArgs<ExtArgs>
            result: $Utils.Optional<OperatorInvitationCountAggregateOutputType> | number
          }
        }
      }
      VipInfo: {
        payload: Prisma.$VipInfoPayload<ExtArgs>
        fields: Prisma.VipInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VipInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VipInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>
          }
          findFirst: {
            args: Prisma.VipInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VipInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>
          }
          findMany: {
            args: Prisma.VipInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>[]
          }
          create: {
            args: Prisma.VipInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>
          }
          createMany: {
            args: Prisma.VipInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VipInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>[]
          }
          delete: {
            args: Prisma.VipInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>
          }
          update: {
            args: Prisma.VipInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>
          }
          deleteMany: {
            args: Prisma.VipInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VipInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VipInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>[]
          }
          upsert: {
            args: Prisma.VipInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipInfoPayload>
          }
          aggregate: {
            args: Prisma.VipInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVipInfo>
          }
          groupBy: {
            args: Prisma.VipInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VipInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VipInfoCountArgs<ExtArgs>
            result: $Utils.Optional<VipInfoCountAggregateOutputType> | number
          }
        }
      }
      UserReward: {
        payload: Prisma.$UserRewardPayload<ExtArgs>
        fields: Prisma.UserRewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRewardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRewardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          findFirst: {
            args: Prisma.UserRewardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRewardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          findMany: {
            args: Prisma.UserRewardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          create: {
            args: Prisma.UserRewardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          createMany: {
            args: Prisma.UserRewardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRewardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          delete: {
            args: Prisma.UserRewardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          update: {
            args: Prisma.UserRewardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          deleteMany: {
            args: Prisma.UserRewardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRewardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRewardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          upsert: {
            args: Prisma.UserRewardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          aggregate: {
            args: Prisma.UserRewardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserReward>
          }
          groupBy: {
            args: Prisma.UserRewardGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRewardCountArgs<ExtArgs>
            result: $Utils.Optional<UserRewardCountAggregateOutputType> | number
          }
        }
      }
      VipTask: {
        payload: Prisma.$VipTaskPayload<ExtArgs>
        fields: Prisma.VipTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VipTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VipTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>
          }
          findFirst: {
            args: Prisma.VipTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VipTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>
          }
          findMany: {
            args: Prisma.VipTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>[]
          }
          create: {
            args: Prisma.VipTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>
          }
          createMany: {
            args: Prisma.VipTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VipTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>[]
          }
          delete: {
            args: Prisma.VipTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>
          }
          update: {
            args: Prisma.VipTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>
          }
          deleteMany: {
            args: Prisma.VipTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VipTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VipTaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>[]
          }
          upsert: {
            args: Prisma.VipTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VipTaskPayload>
          }
          aggregate: {
            args: Prisma.VipTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVipTask>
          }
          groupBy: {
            args: Prisma.VipTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<VipTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.VipTaskCountArgs<ExtArgs>
            result: $Utils.Optional<VipTaskCountAggregateOutputType> | number
          }
        }
      }
      UserVipTaskProgress: {
        payload: Prisma.$UserVipTaskProgressPayload<ExtArgs>
        fields: Prisma.UserVipTaskProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserVipTaskProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserVipTaskProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>
          }
          findFirst: {
            args: Prisma.UserVipTaskProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserVipTaskProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>
          }
          findMany: {
            args: Prisma.UserVipTaskProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>[]
          }
          create: {
            args: Prisma.UserVipTaskProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>
          }
          createMany: {
            args: Prisma.UserVipTaskProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserVipTaskProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>[]
          }
          delete: {
            args: Prisma.UserVipTaskProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>
          }
          update: {
            args: Prisma.UserVipTaskProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>
          }
          deleteMany: {
            args: Prisma.UserVipTaskProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserVipTaskProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserVipTaskProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>[]
          }
          upsert: {
            args: Prisma.UserVipTaskProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVipTaskProgressPayload>
          }
          aggregate: {
            args: Prisma.UserVipTaskProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserVipTaskProgress>
          }
          groupBy: {
            args: Prisma.UserVipTaskProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserVipTaskProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserVipTaskProgressCountArgs<ExtArgs>
            result: $Utils.Optional<UserVipTaskProgressCountAggregateOutputType> | number
          }
        }
      }
      RebateTransaction: {
        payload: Prisma.$RebateTransactionPayload<ExtArgs>
        fields: Prisma.RebateTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RebateTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RebateTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>
          }
          findFirst: {
            args: Prisma.RebateTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RebateTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>
          }
          findMany: {
            args: Prisma.RebateTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>[]
          }
          create: {
            args: Prisma.RebateTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>
          }
          createMany: {
            args: Prisma.RebateTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RebateTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>[]
          }
          delete: {
            args: Prisma.RebateTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>
          }
          update: {
            args: Prisma.RebateTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>
          }
          deleteMany: {
            args: Prisma.RebateTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RebateTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RebateTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>[]
          }
          upsert: {
            args: Prisma.RebateTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RebateTransactionPayload>
          }
          aggregate: {
            args: Prisma.RebateTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRebateTransaction>
          }
          groupBy: {
            args: Prisma.RebateTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RebateTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RebateTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<RebateTransactionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    currency?: CurrencyOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    profile?: ProfileOmit
    settings?: SettingsOmit
    wallet?: WalletOmit
    operatorAccess?: OperatorAccessOmit
    achievement?: AchievementOmit
    game?: GameOmit
    post?: PostOmit
    comment?: CommentOmit
    gameSpin?: GameSpinOmit
    gameSession?: GameSessionOmit
    userAchievement?: UserAchievementOmit
    xpEvent?: XpEventOmit
    notification?: NotificationOmit
    chatMessage?: ChatMessageOmit
    friendship?: FriendshipOmit
    transaction?: TransactionOmit
    gameLaunchLink?: GameLaunchLinkOmit
    product?: ProductOmit
    eventLog?: EventLogOmit
    operatorInvitation?: OperatorInvitationOmit
    vipInfo?: VipInfoOmit
    userReward?: UserRewardOmit
    vipTask?: VipTaskOmit
    userVipTaskProgress?: UserVipTaskProgressOmit
    rebateTransaction?: RebateTransactionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    otherProfiles: number
    wallets: number
    posts: number
    comments: number
    gameSessions: number
    xpEvents: number
    userAchievements: number
    sentMessages: number
    friendshipsSent: number
    friendshipsReceived: number
    gameLaunchLinks: number
    eventLogsAsActor: number
    createdOperators: number
    invitationsSent: number
    invitationsReceived: number
    referrals: number
    account: number
    Session: number
    rebateTransaction: number
    userRewards: number
    userVipTaskProgress: number
    sentNotifications: number
    receivedNotifications: number
    originatedTransactions: number
    receivedTransactions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    otherProfiles?: boolean | UserCountOutputTypeCountOtherProfilesArgs
    wallets?: boolean | UserCountOutputTypeCountWalletsArgs
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    gameSessions?: boolean | UserCountOutputTypeCountGameSessionsArgs
    xpEvents?: boolean | UserCountOutputTypeCountXpEventsArgs
    userAchievements?: boolean | UserCountOutputTypeCountUserAchievementsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    friendshipsSent?: boolean | UserCountOutputTypeCountFriendshipsSentArgs
    friendshipsReceived?: boolean | UserCountOutputTypeCountFriendshipsReceivedArgs
    gameLaunchLinks?: boolean | UserCountOutputTypeCountGameLaunchLinksArgs
    eventLogsAsActor?: boolean | UserCountOutputTypeCountEventLogsAsActorArgs
    createdOperators?: boolean | UserCountOutputTypeCountCreatedOperatorsArgs
    invitationsSent?: boolean | UserCountOutputTypeCountInvitationsSentArgs
    invitationsReceived?: boolean | UserCountOutputTypeCountInvitationsReceivedArgs
    referrals?: boolean | UserCountOutputTypeCountReferralsArgs
    account?: boolean | UserCountOutputTypeCountAccountArgs
    Session?: boolean | UserCountOutputTypeCountSessionArgs
    rebateTransaction?: boolean | UserCountOutputTypeCountRebateTransactionArgs
    userRewards?: boolean | UserCountOutputTypeCountUserRewardsArgs
    userVipTaskProgress?: boolean | UserCountOutputTypeCountUserVipTaskProgressArgs
    sentNotifications?: boolean | UserCountOutputTypeCountSentNotificationsArgs
    receivedNotifications?: boolean | UserCountOutputTypeCountReceivedNotificationsArgs
    originatedTransactions?: boolean | UserCountOutputTypeCountOriginatedTransactionsArgs
    receivedTransactions?: boolean | UserCountOutputTypeCountReceivedTransactionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOtherProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWalletsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountXpEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XpEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFriendshipsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFriendshipsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameLaunchLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameLaunchLinkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventLogsAsActorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedOperatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorAccessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitationsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorInvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitationsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorInvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRebateTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RebateTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRewardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserVipTaskProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserVipTaskProgressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOriginatedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type CurrencyCountOutputType
   */

  export type CurrencyCountOutputType = {
    usersPreferringThisCurrency: number
    wallets: number
    transactions: number
    products: number
  }

  export type CurrencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usersPreferringThisCurrency?: boolean | CurrencyCountOutputTypeCountUsersPreferringThisCurrencyArgs
    wallets?: boolean | CurrencyCountOutputTypeCountWalletsArgs
    transactions?: boolean | CurrencyCountOutputTypeCountTransactionsArgs
    products?: boolean | CurrencyCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyCountOutputType
     */
    select?: CurrencyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountUsersPreferringThisCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountWalletsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type WalletCountOutputType
   */

  export type WalletCountOutputType = {
    transactions: number
  }

  export type WalletCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | WalletCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletCountOutputType
     */
    select?: WalletCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type OperatorAccessCountOutputType
   */

  export type OperatorAccessCountOutputType = {
    invitations: number
    gameLaunchLinks: number
    products: number
    games: number
    profiles: number
  }

  export type OperatorAccessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invitations?: boolean | OperatorAccessCountOutputTypeCountInvitationsArgs
    gameLaunchLinks?: boolean | OperatorAccessCountOutputTypeCountGameLaunchLinksArgs
    products?: boolean | OperatorAccessCountOutputTypeCountProductsArgs
    games?: boolean | OperatorAccessCountOutputTypeCountGamesArgs
    profiles?: boolean | OperatorAccessCountOutputTypeCountProfilesArgs
  }

  // Custom InputTypes
  /**
   * OperatorAccessCountOutputType without action
   */
  export type OperatorAccessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccessCountOutputType
     */
    select?: OperatorAccessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperatorAccessCountOutputType without action
   */
  export type OperatorAccessCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorInvitationWhereInput
  }

  /**
   * OperatorAccessCountOutputType without action
   */
  export type OperatorAccessCountOutputTypeCountGameLaunchLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameLaunchLinkWhereInput
  }

  /**
   * OperatorAccessCountOutputType without action
   */
  export type OperatorAccessCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * OperatorAccessCountOutputType without action
   */
  export type OperatorAccessCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * OperatorAccessCountOutputType without action
   */
  export type OperatorAccessCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }


  /**
   * Count Type AchievementCountOutputType
   */

  export type AchievementCountOutputType = {
    userAchievements: number
  }

  export type AchievementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAchievements?: boolean | AchievementCountOutputTypeCountUserAchievementsArgs
  }

  // Custom InputTypes
  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchievementCountOutputType
     */
    select?: AchievementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeCountUserAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    gameSessions: number
    gameLaunchLinks: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSessions?: boolean | GameCountOutputTypeCountGameSessionsArgs
    gameLaunchLinks?: boolean | GameCountOutputTypeCountGameLaunchLinksArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameLaunchLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameLaunchLinkWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    comments: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | PostCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type GameSessionCountOutputType
   */

  export type GameSessionCountOutputType = {
    spins: number
    Profile: number
  }

  export type GameSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spins?: boolean | GameSessionCountOutputTypeCountSpinsArgs
    Profile?: boolean | GameSessionCountOutputTypeCountProfileArgs
  }

  // Custom InputTypes
  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSessionCountOutputType
     */
    select?: GameSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeCountSpinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSpinWhereInput
  }

  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeCountProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }


  /**
   * Count Type TransactionCountOutputType
   */

  export type TransactionCountOutputType = {
    Product: number
  }

  export type TransactionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | TransactionCountOutputTypeCountProductArgs
  }

  // Custom InputTypes
  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionCountOutputType
     */
    select?: TransactionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    transactions: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | ProductCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type OperatorInvitationCountOutputType
   */

  export type OperatorInvitationCountOutputType = {
    User: number
  }

  export type OperatorInvitationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | OperatorInvitationCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * OperatorInvitationCountOutputType without action
   */
  export type OperatorInvitationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitationCountOutputType
     */
    select?: OperatorInvitationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperatorInvitationCountOutputType without action
   */
  export type OperatorInvitationCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type VipTaskCountOutputType
   */

  export type VipTaskCountOutputType = {
    userTaskProgress: number
  }

  export type VipTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userTaskProgress?: boolean | VipTaskCountOutputTypeCountUserTaskProgressArgs
  }

  // Custom InputTypes
  /**
   * VipTaskCountOutputType without action
   */
  export type VipTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTaskCountOutputType
     */
    select?: VipTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VipTaskCountOutputType without action
   */
  export type VipTaskCountOutputTypeCountUserTaskProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserVipTaskProgressWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    totalXp: number | null
    currentLevel: number | null
    commissionRate: number | null
  }

  export type UserSumAggregateOutputType = {
    totalXp: number | null
    currentLevel: number | null
    commissionRate: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    displayUsername: string | null
    phone: string | null
    cashtag: string | null
    phoneVerified: Date | null
    isVerified: boolean | null
    passwordHash: string | null
    role: $Enums.Role | null
    status: $Enums.UserStatus | null
    totalXp: number | null
    currentLevel: number | null
    referralCode: string | null
    commissionRate: number | null
    twoFactorEnabled: boolean | null
    isOnline: boolean | null
    twoFactorSecret: string | null
    image: string | null
    lastLogin: Date | null
    lastIp: string | null
    createdAt: Date | null
    updatedAt: Date | null
    activeWalletId: string | null
    referrerId: string | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    dob: Date | null
    gender: $Enums.Gender | null
    preferredCurrencyId: string | null
    timezone: string | null
    locale: string | null
    mfaEnabled: boolean | null
    mfaSecret: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    displayUsername: string | null
    phone: string | null
    cashtag: string | null
    phoneVerified: Date | null
    isVerified: boolean | null
    passwordHash: string | null
    role: $Enums.Role | null
    status: $Enums.UserStatus | null
    totalXp: number | null
    currentLevel: number | null
    referralCode: string | null
    commissionRate: number | null
    twoFactorEnabled: boolean | null
    isOnline: boolean | null
    twoFactorSecret: string | null
    image: string | null
    lastLogin: Date | null
    lastIp: string | null
    createdAt: Date | null
    updatedAt: Date | null
    activeWalletId: string | null
    referrerId: string | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    dob: Date | null
    gender: $Enums.Gender | null
    preferredCurrencyId: string | null
    timezone: string | null
    locale: string | null
    mfaEnabled: boolean | null
    mfaSecret: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    name: number
    email: number
    emailVerified: number
    displayUsername: number
    phone: number
    cashtag: number
    phoneVerified: number
    isVerified: number
    passwordHash: number
    role: number
    status: number
    totalXp: number
    currentLevel: number
    referralCode: number
    commissionRate: number
    twoFactorEnabled: number
    isOnline: number
    twoFactorSecret: number
    image: number
    twoFactorRecoveryCodes: number
    lastLogin: number
    lastIp: number
    createdAt: number
    updatedAt: number
    activeWalletId: number
    referrerId: number
    firstName: number
    lastName: number
    avatarUrl: number
    dob: number
    gender: number
    preferredCurrencyId: number
    timezone: number
    locale: number
    mfaEnabled: number
    mfaSecret: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    totalXp?: true
    currentLevel?: true
    commissionRate?: true
  }

  export type UserSumAggregateInputType = {
    totalXp?: true
    currentLevel?: true
    commissionRate?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    emailVerified?: true
    displayUsername?: true
    phone?: true
    cashtag?: true
    phoneVerified?: true
    isVerified?: true
    passwordHash?: true
    role?: true
    status?: true
    totalXp?: true
    currentLevel?: true
    referralCode?: true
    commissionRate?: true
    twoFactorEnabled?: true
    isOnline?: true
    twoFactorSecret?: true
    image?: true
    lastLogin?: true
    lastIp?: true
    createdAt?: true
    updatedAt?: true
    activeWalletId?: true
    referrerId?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    dob?: true
    gender?: true
    preferredCurrencyId?: true
    timezone?: true
    locale?: true
    mfaEnabled?: true
    mfaSecret?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    emailVerified?: true
    displayUsername?: true
    phone?: true
    cashtag?: true
    phoneVerified?: true
    isVerified?: true
    passwordHash?: true
    role?: true
    status?: true
    totalXp?: true
    currentLevel?: true
    referralCode?: true
    commissionRate?: true
    twoFactorEnabled?: true
    isOnline?: true
    twoFactorSecret?: true
    image?: true
    lastLogin?: true
    lastIp?: true
    createdAt?: true
    updatedAt?: true
    activeWalletId?: true
    referrerId?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    dob?: true
    gender?: true
    preferredCurrencyId?: true
    timezone?: true
    locale?: true
    mfaEnabled?: true
    mfaSecret?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    emailVerified?: true
    displayUsername?: true
    phone?: true
    cashtag?: true
    phoneVerified?: true
    isVerified?: true
    passwordHash?: true
    role?: true
    status?: true
    totalXp?: true
    currentLevel?: true
    referralCode?: true
    commissionRate?: true
    twoFactorEnabled?: true
    isOnline?: true
    twoFactorSecret?: true
    image?: true
    twoFactorRecoveryCodes?: true
    lastLogin?: true
    lastIp?: true
    createdAt?: true
    updatedAt?: true
    activeWalletId?: true
    referrerId?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    dob?: true
    gender?: true
    preferredCurrencyId?: true
    timezone?: true
    locale?: true
    mfaEnabled?: true
    mfaSecret?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string | null
    name: string
    email: string
    emailVerified: boolean | null
    displayUsername: string | null
    phone: string | null
    cashtag: string | null
    phoneVerified: Date | null
    isVerified: boolean
    passwordHash: string | null
    role: $Enums.Role
    status: $Enums.UserStatus
    totalXp: number
    currentLevel: number
    referralCode: string | null
    commissionRate: number | null
    twoFactorEnabled: boolean | null
    isOnline: boolean | null
    twoFactorSecret: string | null
    image: string | null
    twoFactorRecoveryCodes: string[]
    lastLogin: Date | null
    lastIp: string | null
    createdAt: Date
    updatedAt: Date
    activeWalletId: string | null
    referrerId: string | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    dob: Date | null
    gender: $Enums.Gender | null
    preferredCurrencyId: string | null
    timezone: string | null
    locale: string | null
    mfaEnabled: boolean
    mfaSecret: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    displayUsername?: boolean
    phone?: boolean
    cashtag?: boolean
    phoneVerified?: boolean
    isVerified?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    totalXp?: boolean
    currentLevel?: boolean
    referralCode?: boolean
    commissionRate?: boolean
    twoFactorEnabled?: boolean
    isOnline?: boolean
    twoFactorSecret?: boolean
    image?: boolean
    twoFactorRecoveryCodes?: boolean
    lastLogin?: boolean
    lastIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activeWalletId?: boolean
    referrerId?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    dob?: boolean
    gender?: boolean
    preferredCurrencyId?: boolean
    timezone?: boolean
    locale?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    otherProfiles?: boolean | User$otherProfilesArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    wallets?: boolean | User$walletsArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    gameSessions?: boolean | User$gameSessionsArgs<ExtArgs>
    xpEvents?: boolean | User$xpEventsArgs<ExtArgs>
    userAchievements?: boolean | User$userAchievementsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    friendshipsSent?: boolean | User$friendshipsSentArgs<ExtArgs>
    friendshipsReceived?: boolean | User$friendshipsReceivedArgs<ExtArgs>
    gameLaunchLinks?: boolean | User$gameLaunchLinksArgs<ExtArgs>
    eventLogsAsActor?: boolean | User$eventLogsAsActorArgs<ExtArgs>
    createdOperators?: boolean | User$createdOperatorsArgs<ExtArgs>
    invitationsSent?: boolean | User$invitationsSentArgs<ExtArgs>
    invitationsReceived?: boolean | User$invitationsReceivedArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
    referrals?: boolean | User$referralsArgs<ExtArgs>
    account?: boolean | User$accountArgs<ExtArgs>
    Session?: boolean | User$SessionArgs<ExtArgs>
    vipInfo?: boolean | User$vipInfoArgs<ExtArgs>
    rebateTransaction?: boolean | User$rebateTransactionArgs<ExtArgs>
    preferredCurrency?: boolean | User$preferredCurrencyArgs<ExtArgs>
    userRewards?: boolean | User$userRewardsArgs<ExtArgs>
    userVipTaskProgress?: boolean | User$userVipTaskProgressArgs<ExtArgs>
    sentNotifications?: boolean | User$sentNotificationsArgs<ExtArgs>
    receivedNotifications?: boolean | User$receivedNotificationsArgs<ExtArgs>
    originatedTransactions?: boolean | User$originatedTransactionsArgs<ExtArgs>
    receivedTransactions?: boolean | User$receivedTransactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    displayUsername?: boolean
    phone?: boolean
    cashtag?: boolean
    phoneVerified?: boolean
    isVerified?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    totalXp?: boolean
    currentLevel?: boolean
    referralCode?: boolean
    commissionRate?: boolean
    twoFactorEnabled?: boolean
    isOnline?: boolean
    twoFactorSecret?: boolean
    image?: boolean
    twoFactorRecoveryCodes?: boolean
    lastLogin?: boolean
    lastIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activeWalletId?: boolean
    referrerId?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    dob?: boolean
    gender?: boolean
    preferredCurrencyId?: boolean
    timezone?: boolean
    locale?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    referrer?: boolean | User$referrerArgs<ExtArgs>
    preferredCurrency?: boolean | User$preferredCurrencyArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    displayUsername?: boolean
    phone?: boolean
    cashtag?: boolean
    phoneVerified?: boolean
    isVerified?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    totalXp?: boolean
    currentLevel?: boolean
    referralCode?: boolean
    commissionRate?: boolean
    twoFactorEnabled?: boolean
    isOnline?: boolean
    twoFactorSecret?: boolean
    image?: boolean
    twoFactorRecoveryCodes?: boolean
    lastLogin?: boolean
    lastIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activeWalletId?: boolean
    referrerId?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    dob?: boolean
    gender?: boolean
    preferredCurrencyId?: boolean
    timezone?: boolean
    locale?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    referrer?: boolean | User$referrerArgs<ExtArgs>
    preferredCurrency?: boolean | User$preferredCurrencyArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    displayUsername?: boolean
    phone?: boolean
    cashtag?: boolean
    phoneVerified?: boolean
    isVerified?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    totalXp?: boolean
    currentLevel?: boolean
    referralCode?: boolean
    commissionRate?: boolean
    twoFactorEnabled?: boolean
    isOnline?: boolean
    twoFactorSecret?: boolean
    image?: boolean
    twoFactorRecoveryCodes?: boolean
    lastLogin?: boolean
    lastIp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activeWalletId?: boolean
    referrerId?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    dob?: boolean
    gender?: boolean
    preferredCurrencyId?: boolean
    timezone?: boolean
    locale?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "name" | "email" | "emailVerified" | "displayUsername" | "phone" | "cashtag" | "phoneVerified" | "isVerified" | "passwordHash" | "role" | "status" | "totalXp" | "currentLevel" | "referralCode" | "commissionRate" | "twoFactorEnabled" | "isOnline" | "twoFactorSecret" | "image" | "twoFactorRecoveryCodes" | "lastLogin" | "lastIp" | "createdAt" | "updatedAt" | "activeWalletId" | "referrerId" | "firstName" | "lastName" | "avatarUrl" | "dob" | "gender" | "preferredCurrencyId" | "timezone" | "locale" | "mfaEnabled" | "mfaSecret", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    otherProfiles?: boolean | User$otherProfilesArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    wallets?: boolean | User$walletsArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    gameSessions?: boolean | User$gameSessionsArgs<ExtArgs>
    xpEvents?: boolean | User$xpEventsArgs<ExtArgs>
    userAchievements?: boolean | User$userAchievementsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    friendshipsSent?: boolean | User$friendshipsSentArgs<ExtArgs>
    friendshipsReceived?: boolean | User$friendshipsReceivedArgs<ExtArgs>
    gameLaunchLinks?: boolean | User$gameLaunchLinksArgs<ExtArgs>
    eventLogsAsActor?: boolean | User$eventLogsAsActorArgs<ExtArgs>
    createdOperators?: boolean | User$createdOperatorsArgs<ExtArgs>
    invitationsSent?: boolean | User$invitationsSentArgs<ExtArgs>
    invitationsReceived?: boolean | User$invitationsReceivedArgs<ExtArgs>
    referrer?: boolean | User$referrerArgs<ExtArgs>
    referrals?: boolean | User$referralsArgs<ExtArgs>
    account?: boolean | User$accountArgs<ExtArgs>
    Session?: boolean | User$SessionArgs<ExtArgs>
    vipInfo?: boolean | User$vipInfoArgs<ExtArgs>
    rebateTransaction?: boolean | User$rebateTransactionArgs<ExtArgs>
    preferredCurrency?: boolean | User$preferredCurrencyArgs<ExtArgs>
    userRewards?: boolean | User$userRewardsArgs<ExtArgs>
    userVipTaskProgress?: boolean | User$userVipTaskProgressArgs<ExtArgs>
    sentNotifications?: boolean | User$sentNotificationsArgs<ExtArgs>
    receivedNotifications?: boolean | User$receivedNotificationsArgs<ExtArgs>
    originatedTransactions?: boolean | User$originatedTransactionsArgs<ExtArgs>
    receivedTransactions?: boolean | User$receivedTransactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | User$referrerArgs<ExtArgs>
    preferredCurrency?: boolean | User$preferredCurrencyArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | User$referrerArgs<ExtArgs>
    preferredCurrency?: boolean | User$preferredCurrencyArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      otherProfiles: Prisma.$ProfilePayload<ExtArgs>[]
      settings: Prisma.$SettingsPayload<ExtArgs> | null
      wallets: Prisma.$WalletPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      gameSessions: Prisma.$GameSessionPayload<ExtArgs>[]
      xpEvents: Prisma.$XpEventPayload<ExtArgs>[]
      userAchievements: Prisma.$UserAchievementPayload<ExtArgs>[]
      sentMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      friendshipsSent: Prisma.$FriendshipPayload<ExtArgs>[]
      friendshipsReceived: Prisma.$FriendshipPayload<ExtArgs>[]
      gameLaunchLinks: Prisma.$GameLaunchLinkPayload<ExtArgs>[]
      eventLogsAsActor: Prisma.$EventLogPayload<ExtArgs>[]
      createdOperators: Prisma.$OperatorAccessPayload<ExtArgs>[]
      invitationsSent: Prisma.$OperatorInvitationPayload<ExtArgs>[]
      invitationsReceived: Prisma.$OperatorInvitationPayload<ExtArgs>[]
      referrer: Prisma.$UserPayload<ExtArgs> | null
      referrals: Prisma.$UserPayload<ExtArgs>[]
      account: Prisma.$AccountPayload<ExtArgs>[]
      Session: Prisma.$SessionPayload<ExtArgs>[]
      vipInfo: Prisma.$VipInfoPayload<ExtArgs> | null
      rebateTransaction: Prisma.$RebateTransactionPayload<ExtArgs>[]
      preferredCurrency: Prisma.$CurrencyPayload<ExtArgs> | null
      userRewards: Prisma.$UserRewardPayload<ExtArgs>[]
      userVipTaskProgress: Prisma.$UserVipTaskProgressPayload<ExtArgs>[]
      sentNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      receivedNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      originatedTransactions: Prisma.$TransactionPayload<ExtArgs>[]
      receivedTransactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string | null
      name: string
      email: string
      emailVerified: boolean | null
      displayUsername: string | null
      phone: string | null
      cashtag: string | null
      phoneVerified: Date | null
      isVerified: boolean
      passwordHash: string | null
      role: $Enums.Role
      status: $Enums.UserStatus
      totalXp: number
      currentLevel: number
      referralCode: string | null
      commissionRate: number | null
      twoFactorEnabled: boolean | null
      isOnline: boolean | null
      twoFactorSecret: string | null
      image: string | null
      twoFactorRecoveryCodes: string[]
      lastLogin: Date | null
      lastIp: string | null
      createdAt: Date
      updatedAt: Date
      activeWalletId: string | null
      referrerId: string | null
      firstName: string | null
      lastName: string | null
      avatarUrl: string | null
      dob: Date | null
      gender: $Enums.Gender | null
      preferredCurrencyId: string | null
      timezone: string | null
      locale: string | null
      mfaEnabled: boolean
      mfaSecret: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    otherProfiles<T extends User$otherProfilesArgs<ExtArgs> = {}>(args?: Subset<T, User$otherProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    settings<T extends User$settingsArgs<ExtArgs> = {}>(args?: Subset<T, User$settingsArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    wallets<T extends User$walletsArgs<ExtArgs> = {}>(args?: Subset<T, User$walletsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameSessions<T extends User$gameSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$gameSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    xpEvents<T extends User$xpEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$xpEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAchievements<T extends User$userAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, User$userAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    friendshipsSent<T extends User$friendshipsSentArgs<ExtArgs> = {}>(args?: Subset<T, User$friendshipsSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    friendshipsReceived<T extends User$friendshipsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$friendshipsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameLaunchLinks<T extends User$gameLaunchLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$gameLaunchLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    eventLogsAsActor<T extends User$eventLogsAsActorArgs<ExtArgs> = {}>(args?: Subset<T, User$eventLogsAsActorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdOperators<T extends User$createdOperatorsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdOperatorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitationsSent<T extends User$invitationsSentArgs<ExtArgs> = {}>(args?: Subset<T, User$invitationsSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitationsReceived<T extends User$invitationsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$invitationsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referrer<T extends User$referrerArgs<ExtArgs> = {}>(args?: Subset<T, User$referrerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    referrals<T extends User$referralsArgs<ExtArgs> = {}>(args?: Subset<T, User$referralsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    account<T extends User$accountArgs<ExtArgs> = {}>(args?: Subset<T, User$accountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Session<T extends User$SessionArgs<ExtArgs> = {}>(args?: Subset<T, User$SessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vipInfo<T extends User$vipInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$vipInfoArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    rebateTransaction<T extends User$rebateTransactionArgs<ExtArgs> = {}>(args?: Subset<T, User$rebateTransactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferredCurrency<T extends User$preferredCurrencyArgs<ExtArgs> = {}>(args?: Subset<T, User$preferredCurrencyArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userRewards<T extends User$userRewardsArgs<ExtArgs> = {}>(args?: Subset<T, User$userRewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userVipTaskProgress<T extends User$userVipTaskProgressArgs<ExtArgs> = {}>(args?: Subset<T, User$userVipTaskProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentNotifications<T extends User$sentNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedNotifications<T extends User$receivedNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    originatedTransactions<T extends User$originatedTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$originatedTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedTransactions<T extends User$receivedTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly displayUsername: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly cashtag: FieldRef<"User", 'String'>
    readonly phoneVerified: FieldRef<"User", 'DateTime'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly totalXp: FieldRef<"User", 'Int'>
    readonly currentLevel: FieldRef<"User", 'Int'>
    readonly referralCode: FieldRef<"User", 'String'>
    readonly commissionRate: FieldRef<"User", 'Float'>
    readonly twoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly isOnline: FieldRef<"User", 'Boolean'>
    readonly twoFactorSecret: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly twoFactorRecoveryCodes: FieldRef<"User", 'String[]'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly lastIp: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly activeWalletId: FieldRef<"User", 'String'>
    readonly referrerId: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly dob: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'Gender'>
    readonly preferredCurrencyId: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly locale: FieldRef<"User", 'String'>
    readonly mfaEnabled: FieldRef<"User", 'Boolean'>
    readonly mfaSecret: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.otherProfiles
   */
  export type User$otherProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User.settings
   */
  export type User$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    where?: SettingsWhereInput
  }

  /**
   * User.wallets
   */
  export type User$walletsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    cursor?: WalletWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.gameSessions
   */
  export type User$gameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    cursor?: GameSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * User.xpEvents
   */
  export type User$xpEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    where?: XpEventWhereInput
    orderBy?: XpEventOrderByWithRelationInput | XpEventOrderByWithRelationInput[]
    cursor?: XpEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: XpEventScalarFieldEnum | XpEventScalarFieldEnum[]
  }

  /**
   * User.userAchievements
   */
  export type User$userAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * User.friendshipsSent
   */
  export type User$friendshipsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * User.friendshipsReceived
   */
  export type User$friendshipsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * User.gameLaunchLinks
   */
  export type User$gameLaunchLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    where?: GameLaunchLinkWhereInput
    orderBy?: GameLaunchLinkOrderByWithRelationInput | GameLaunchLinkOrderByWithRelationInput[]
    cursor?: GameLaunchLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameLaunchLinkScalarFieldEnum | GameLaunchLinkScalarFieldEnum[]
  }

  /**
   * User.eventLogsAsActor
   */
  export type User$eventLogsAsActorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    where?: EventLogWhereInput
    orderBy?: EventLogOrderByWithRelationInput | EventLogOrderByWithRelationInput[]
    cursor?: EventLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventLogScalarFieldEnum | EventLogScalarFieldEnum[]
  }

  /**
   * User.createdOperators
   */
  export type User$createdOperatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    where?: OperatorAccessWhereInput
    orderBy?: OperatorAccessOrderByWithRelationInput | OperatorAccessOrderByWithRelationInput[]
    cursor?: OperatorAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperatorAccessScalarFieldEnum | OperatorAccessScalarFieldEnum[]
  }

  /**
   * User.invitationsSent
   */
  export type User$invitationsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    where?: OperatorInvitationWhereInput
    orderBy?: OperatorInvitationOrderByWithRelationInput | OperatorInvitationOrderByWithRelationInput[]
    cursor?: OperatorInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperatorInvitationScalarFieldEnum | OperatorInvitationScalarFieldEnum[]
  }

  /**
   * User.invitationsReceived
   */
  export type User$invitationsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    where?: OperatorInvitationWhereInput
    orderBy?: OperatorInvitationOrderByWithRelationInput | OperatorInvitationOrderByWithRelationInput[]
    cursor?: OperatorInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperatorInvitationScalarFieldEnum | OperatorInvitationScalarFieldEnum[]
  }

  /**
   * User.referrer
   */
  export type User$referrerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.referrals
   */
  export type User$referralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.account
   */
  export type User$accountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.Session
   */
  export type User$SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.vipInfo
   */
  export type User$vipInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    where?: VipInfoWhereInput
  }

  /**
   * User.rebateTransaction
   */
  export type User$rebateTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    where?: RebateTransactionWhereInput
    orderBy?: RebateTransactionOrderByWithRelationInput | RebateTransactionOrderByWithRelationInput[]
    cursor?: RebateTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RebateTransactionScalarFieldEnum | RebateTransactionScalarFieldEnum[]
  }

  /**
   * User.preferredCurrency
   */
  export type User$preferredCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    where?: CurrencyWhereInput
  }

  /**
   * User.userRewards
   */
  export type User$userRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    where?: UserRewardWhereInput
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    cursor?: UserRewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * User.userVipTaskProgress
   */
  export type User$userVipTaskProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    where?: UserVipTaskProgressWhereInput
    orderBy?: UserVipTaskProgressOrderByWithRelationInput | UserVipTaskProgressOrderByWithRelationInput[]
    cursor?: UserVipTaskProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserVipTaskProgressScalarFieldEnum | UserVipTaskProgressScalarFieldEnum[]
  }

  /**
   * User.sentNotifications
   */
  export type User$sentNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.receivedNotifications
   */
  export type User$receivedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.originatedTransactions
   */
  export type User$originatedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.receivedTransactions
   */
  export type User$receivedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Currency
   */

  export type AggregateCurrency = {
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  export type CurrencyAvgAggregateOutputType = {
    precision: number | null
    withdrawalFeeFixed: number | null
    withdrawalFeePercent: number | null
  }

  export type CurrencySumAggregateOutputType = {
    precision: number | null
    withdrawalFeeFixed: number | null
    withdrawalFeePercent: number | null
  }

  export type CurrencyMinAggregateOutputType = {
    id: string | null
    name: string | null
    symbol: string | null
    type: string | null
    precision: number | null
    isActive: boolean | null
    isDefault: boolean | null
    contractAddress: string | null
    blockchain: string | null
    withdrawalFeeFixed: number | null
    withdrawalFeePercent: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrencyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    symbol: string | null
    type: string | null
    precision: number | null
    isActive: boolean | null
    isDefault: boolean | null
    contractAddress: string | null
    blockchain: string | null
    withdrawalFeeFixed: number | null
    withdrawalFeePercent: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrencyCountAggregateOutputType = {
    id: number
    name: number
    symbol: number
    type: number
    precision: number
    isActive: number
    isDefault: number
    contractAddress: number
    blockchain: number
    withdrawalFeeFixed: number
    withdrawalFeePercent: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CurrencyAvgAggregateInputType = {
    precision?: true
    withdrawalFeeFixed?: true
    withdrawalFeePercent?: true
  }

  export type CurrencySumAggregateInputType = {
    precision?: true
    withdrawalFeeFixed?: true
    withdrawalFeePercent?: true
  }

  export type CurrencyMinAggregateInputType = {
    id?: true
    name?: true
    symbol?: true
    type?: true
    precision?: true
    isActive?: true
    isDefault?: true
    contractAddress?: true
    blockchain?: true
    withdrawalFeeFixed?: true
    withdrawalFeePercent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrencyMaxAggregateInputType = {
    id?: true
    name?: true
    symbol?: true
    type?: true
    precision?: true
    isActive?: true
    isDefault?: true
    contractAddress?: true
    blockchain?: true
    withdrawalFeeFixed?: true
    withdrawalFeePercent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrencyCountAggregateInputType = {
    id?: true
    name?: true
    symbol?: true
    type?: true
    precision?: true
    isActive?: true
    isDefault?: true
    contractAddress?: true
    blockchain?: true
    withdrawalFeeFixed?: true
    withdrawalFeePercent?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CurrencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currency to aggregate.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Currencies
    **/
    _count?: true | CurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrencyMaxAggregateInputType
  }

  export type GetCurrencyAggregateType<T extends CurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrency[P]>
      : GetScalarType<T[P], AggregateCurrency[P]>
  }




  export type CurrencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyWhereInput
    orderBy?: CurrencyOrderByWithAggregationInput | CurrencyOrderByWithAggregationInput[]
    by: CurrencyScalarFieldEnum[] | CurrencyScalarFieldEnum
    having?: CurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrencyCountAggregateInputType | true
    _avg?: CurrencyAvgAggregateInputType
    _sum?: CurrencySumAggregateInputType
    _min?: CurrencyMinAggregateInputType
    _max?: CurrencyMaxAggregateInputType
  }

  export type CurrencyGroupByOutputType = {
    id: string
    name: string
    symbol: string
    type: string
    precision: number
    isActive: boolean
    isDefault: boolean
    contractAddress: string | null
    blockchain: string | null
    withdrawalFeeFixed: number | null
    withdrawalFeePercent: number | null
    createdAt: Date
    updatedAt: Date
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  type GetCurrencyGroupByPayload<T extends CurrencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
        }
      >
    >


  export type CurrencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbol?: boolean
    type?: boolean
    precision?: boolean
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: boolean
    blockchain?: boolean
    withdrawalFeeFixed?: boolean
    withdrawalFeePercent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usersPreferringThisCurrency?: boolean | Currency$usersPreferringThisCurrencyArgs<ExtArgs>
    wallets?: boolean | Currency$walletsArgs<ExtArgs>
    transactions?: boolean | Currency$transactionsArgs<ExtArgs>
    products?: boolean | Currency$productsArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbol?: boolean
    type?: boolean
    precision?: boolean
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: boolean
    blockchain?: boolean
    withdrawalFeeFixed?: boolean
    withdrawalFeePercent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbol?: boolean
    type?: boolean
    precision?: boolean
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: boolean
    blockchain?: boolean
    withdrawalFeeFixed?: boolean
    withdrawalFeePercent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectScalar = {
    id?: boolean
    name?: boolean
    symbol?: boolean
    type?: boolean
    precision?: boolean
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: boolean
    blockchain?: boolean
    withdrawalFeeFixed?: boolean
    withdrawalFeePercent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CurrencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "symbol" | "type" | "precision" | "isActive" | "isDefault" | "contractAddress" | "blockchain" | "withdrawalFeeFixed" | "withdrawalFeePercent" | "createdAt" | "updatedAt", ExtArgs["result"]["currency"]>
  export type CurrencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usersPreferringThisCurrency?: boolean | Currency$usersPreferringThisCurrencyArgs<ExtArgs>
    wallets?: boolean | Currency$walletsArgs<ExtArgs>
    transactions?: boolean | Currency$transactionsArgs<ExtArgs>
    products?: boolean | Currency$productsArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CurrencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CurrencyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CurrencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Currency"
    objects: {
      usersPreferringThisCurrency: Prisma.$UserPayload<ExtArgs>[]
      wallets: Prisma.$WalletPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      symbol: string
      type: string
      precision: number
      isActive: boolean
      isDefault: boolean
      contractAddress: string | null
      blockchain: string | null
      withdrawalFeeFixed: number | null
      withdrawalFeePercent: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["currency"]>
    composites: {}
  }

  type CurrencyGetPayload<S extends boolean | null | undefined | CurrencyDefaultArgs> = $Result.GetResult<Prisma.$CurrencyPayload, S>

  type CurrencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CurrencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CurrencyCountAggregateInputType | true
    }

  export interface CurrencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Currency'], meta: { name: 'Currency' } }
    /**
     * Find zero or one Currency that matches the filter.
     * @param {CurrencyFindUniqueArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurrencyFindUniqueArgs>(args: SelectSubset<T, CurrencyFindUniqueArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Currency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CurrencyFindUniqueOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurrencyFindUniqueOrThrowArgs>(args: SelectSubset<T, CurrencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurrencyFindFirstArgs>(args?: SelectSubset<T, CurrencyFindFirstArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurrencyFindFirstOrThrowArgs>(args?: SelectSubset<T, CurrencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Currencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Currencies
     * const currencies = await prisma.currency.findMany()
     * 
     * // Get first 10 Currencies
     * const currencies = await prisma.currency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currencyWithIdOnly = await prisma.currency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CurrencyFindManyArgs>(args?: SelectSubset<T, CurrencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Currency.
     * @param {CurrencyCreateArgs} args - Arguments to create a Currency.
     * @example
     * // Create one Currency
     * const Currency = await prisma.currency.create({
     *   data: {
     *     // ... data to create a Currency
     *   }
     * })
     * 
     */
    create<T extends CurrencyCreateArgs>(args: SelectSubset<T, CurrencyCreateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Currencies.
     * @param {CurrencyCreateManyArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurrencyCreateManyArgs>(args?: SelectSubset<T, CurrencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Currencies and returns the data saved in the database.
     * @param {CurrencyCreateManyAndReturnArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurrencyCreateManyAndReturnArgs>(args?: SelectSubset<T, CurrencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Currency.
     * @param {CurrencyDeleteArgs} args - Arguments to delete one Currency.
     * @example
     * // Delete one Currency
     * const Currency = await prisma.currency.delete({
     *   where: {
     *     // ... filter to delete one Currency
     *   }
     * })
     * 
     */
    delete<T extends CurrencyDeleteArgs>(args: SelectSubset<T, CurrencyDeleteArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Currency.
     * @param {CurrencyUpdateArgs} args - Arguments to update one Currency.
     * @example
     * // Update one Currency
     * const currency = await prisma.currency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurrencyUpdateArgs>(args: SelectSubset<T, CurrencyUpdateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Currencies.
     * @param {CurrencyDeleteManyArgs} args - Arguments to filter Currencies to delete.
     * @example
     * // Delete a few Currencies
     * const { count } = await prisma.currency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurrencyDeleteManyArgs>(args?: SelectSubset<T, CurrencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurrencyUpdateManyArgs>(args: SelectSubset<T, CurrencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies and returns the data updated in the database.
     * @param {CurrencyUpdateManyAndReturnArgs} args - Arguments to update many Currencies.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CurrencyUpdateManyAndReturnArgs>(args: SelectSubset<T, CurrencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Currency.
     * @param {CurrencyUpsertArgs} args - Arguments to update or create a Currency.
     * @example
     * // Update or create a Currency
     * const currency = await prisma.currency.upsert({
     *   create: {
     *     // ... data to create a Currency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Currency we want to update
     *   }
     * })
     */
    upsert<T extends CurrencyUpsertArgs>(args: SelectSubset<T, CurrencyUpsertArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyCountArgs} args - Arguments to filter Currencies to count.
     * @example
     * // Count the number of Currencies
     * const count = await prisma.currency.count({
     *   where: {
     *     // ... the filter for the Currencies we want to count
     *   }
     * })
    **/
    count<T extends CurrencyCountArgs>(
      args?: Subset<T, CurrencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrencyAggregateArgs>(args: Subset<T, CurrencyAggregateArgs>): Prisma.PrismaPromise<GetCurrencyAggregateType<T>>

    /**
     * Group by Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrencyGroupByArgs['orderBy'] }
        : { orderBy?: CurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Currency model
   */
  readonly fields: CurrencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Currency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurrencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usersPreferringThisCurrency<T extends Currency$usersPreferringThisCurrencyArgs<ExtArgs> = {}>(args?: Subset<T, Currency$usersPreferringThisCurrencyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wallets<T extends Currency$walletsArgs<ExtArgs> = {}>(args?: Subset<T, Currency$walletsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends Currency$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Currency$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Currency$productsArgs<ExtArgs> = {}>(args?: Subset<T, Currency$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Currency model
   */
  interface CurrencyFieldRefs {
    readonly id: FieldRef<"Currency", 'String'>
    readonly name: FieldRef<"Currency", 'String'>
    readonly symbol: FieldRef<"Currency", 'String'>
    readonly type: FieldRef<"Currency", 'String'>
    readonly precision: FieldRef<"Currency", 'Int'>
    readonly isActive: FieldRef<"Currency", 'Boolean'>
    readonly isDefault: FieldRef<"Currency", 'Boolean'>
    readonly contractAddress: FieldRef<"Currency", 'String'>
    readonly blockchain: FieldRef<"Currency", 'String'>
    readonly withdrawalFeeFixed: FieldRef<"Currency", 'Int'>
    readonly withdrawalFeePercent: FieldRef<"Currency", 'Float'>
    readonly createdAt: FieldRef<"Currency", 'DateTime'>
    readonly updatedAt: FieldRef<"Currency", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Currency findUnique
   */
  export type CurrencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findUniqueOrThrow
   */
  export type CurrencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findFirst
   */
  export type CurrencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findFirstOrThrow
   */
  export type CurrencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findMany
   */
  export type CurrencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currencies to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency create
   */
  export type CurrencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Currency.
     */
    data: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
  }

  /**
   * Currency createMany
   */
  export type CurrencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency createManyAndReturn
   */
  export type CurrencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency update
   */
  export type CurrencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Currency.
     */
    data: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
    /**
     * Choose, which Currency to update.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency updateMany
   */
  export type CurrencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency updateManyAndReturn
   */
  export type CurrencyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency upsert
   */
  export type CurrencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Currency to update in case it exists.
     */
    where: CurrencyWhereUniqueInput
    /**
     * In case the Currency found by the `where` argument doesn't exist, create a new Currency with this data.
     */
    create: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
    /**
     * In case the Currency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
  }

  /**
   * Currency delete
   */
  export type CurrencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter which Currency to delete.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency deleteMany
   */
  export type CurrencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currencies to delete
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to delete.
     */
    limit?: number
  }

  /**
   * Currency.usersPreferringThisCurrency
   */
  export type Currency$usersPreferringThisCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Currency.wallets
   */
  export type Currency$walletsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    cursor?: WalletWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Currency.transactions
   */
  export type Currency$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Currency.products
   */
  export type Currency$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Currency without action
   */
  export type CurrencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    username: string | null
    name: string | null
    activeGameId: string | null
    ipAddress: string | null
    startTime: Date | null
    endTime: Date | null
    lastActivityAt: Date | null
    userAgent: string | null
    expiresAt: Date | null
    createdAt: Date | null
    refreshToken: string | null
    active: boolean | null
    token: string | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    username: string | null
    name: string | null
    activeGameId: string | null
    ipAddress: string | null
    startTime: Date | null
    endTime: Date | null
    lastActivityAt: Date | null
    userAgent: string | null
    expiresAt: Date | null
    createdAt: Date | null
    refreshToken: string | null
    active: boolean | null
    token: string | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    username: number
    name: number
    activeGameId: number
    ipAddress: number
    startTime: number
    endTime: number
    lastActivityAt: number
    userAgent: number
    expiresAt: number
    createdAt: number
    refreshToken: number
    active: number
    token: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    username?: true
    name?: true
    activeGameId?: true
    ipAddress?: true
    startTime?: true
    endTime?: true
    lastActivityAt?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
    refreshToken?: true
    active?: true
    token?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    username?: true
    name?: true
    activeGameId?: true
    ipAddress?: true
    startTime?: true
    endTime?: true
    lastActivityAt?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
    refreshToken?: true
    active?: true
    token?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    username?: true
    name?: true
    activeGameId?: true
    ipAddress?: true
    startTime?: true
    endTime?: true
    lastActivityAt?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
    refreshToken?: true
    active?: true
    token?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    username: string | null
    name: string | null
    activeGameId: string | null
    ipAddress: string | null
    startTime: Date
    endTime: Date | null
    lastActivityAt: Date | null
    userAgent: string | null
    expiresAt: Date
    createdAt: Date
    refreshToken: string | null
    active: boolean
    token: string
    updatedAt: Date | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    username?: boolean
    name?: boolean
    activeGameId?: boolean
    ipAddress?: boolean
    startTime?: boolean
    endTime?: boolean
    lastActivityAt?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    refreshToken?: boolean
    active?: boolean
    token?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    username?: boolean
    name?: boolean
    activeGameId?: boolean
    ipAddress?: boolean
    startTime?: boolean
    endTime?: boolean
    lastActivityAt?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    refreshToken?: boolean
    active?: boolean
    token?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    username?: boolean
    name?: boolean
    activeGameId?: boolean
    ipAddress?: boolean
    startTime?: boolean
    endTime?: boolean
    lastActivityAt?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    refreshToken?: boolean
    active?: boolean
    token?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    username?: boolean
    name?: boolean
    activeGameId?: boolean
    ipAddress?: boolean
    startTime?: boolean
    endTime?: boolean
    lastActivityAt?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    refreshToken?: boolean
    active?: boolean
    token?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "username" | "name" | "activeGameId" | "ipAddress" | "startTime" | "endTime" | "lastActivityAt" | "userAgent" | "expiresAt" | "createdAt" | "refreshToken" | "active" | "token" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      username: string | null
      name: string | null
      activeGameId: string | null
      ipAddress: string | null
      startTime: Date
      endTime: Date | null
      lastActivityAt: Date | null
      userAgent: string | null
      expiresAt: Date
      createdAt: Date
      refreshToken: string | null
      active: boolean
      token: string
      updatedAt: Date | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly username: FieldRef<"Session", 'String'>
    readonly name: FieldRef<"Session", 'String'>
    readonly activeGameId: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly startTime: FieldRef<"Session", 'DateTime'>
    readonly endTime: FieldRef<"Session", 'DateTime'>
    readonly lastActivityAt: FieldRef<"Session", 'DateTime'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly refreshToken: FieldRef<"Session", 'String'>
    readonly active: FieldRef<"Session", 'Boolean'>
    readonly token: FieldRef<"Session", 'String'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date | null
    updatedAt: Date | null
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    balance: number | null
    totalXpFromOperator: number | null
  }

  export type ProfileSumAggregateOutputType = {
    balance: number | null
    totalXpFromOperator: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    balance: number | null
    totalXpFromOperator: number | null
    activeCurrencyType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    currentGameSessionid: string | null
    userId: string | null
    otherUserid: string | null
    role: $Enums.Role | null
    operatorAccessId: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    balance: number | null
    totalXpFromOperator: number | null
    activeCurrencyType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    currentGameSessionid: string | null
    userId: string | null
    otherUserid: string | null
    role: $Enums.Role | null
    operatorAccessId: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    balance: number
    totalXpFromOperator: number
    activeCurrencyType: number
    createdAt: number
    updatedAt: number
    currentGameSessionid: number
    userId: number
    otherUserid: number
    role: number
    operatorAccessId: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    balance?: true
    totalXpFromOperator?: true
  }

  export type ProfileSumAggregateInputType = {
    balance?: true
    totalXpFromOperator?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    balance?: true
    totalXpFromOperator?: true
    activeCurrencyType?: true
    createdAt?: true
    updatedAt?: true
    currentGameSessionid?: true
    userId?: true
    otherUserid?: true
    role?: true
    operatorAccessId?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    balance?: true
    totalXpFromOperator?: true
    activeCurrencyType?: true
    createdAt?: true
    updatedAt?: true
    currentGameSessionid?: true
    userId?: true
    otherUserid?: true
    role?: true
    operatorAccessId?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    balance?: true
    totalXpFromOperator?: true
    activeCurrencyType?: true
    createdAt?: true
    updatedAt?: true
    currentGameSessionid?: true
    userId?: true
    otherUserid?: true
    role?: true
    operatorAccessId?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    balance: number
    totalXpFromOperator: number
    activeCurrencyType: string
    createdAt: Date
    updatedAt: Date
    currentGameSessionid: string | null
    userId: string
    otherUserid: string | null
    role: $Enums.Role | null
    operatorAccessId: string | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
    totalXpFromOperator?: boolean
    activeCurrencyType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentGameSessionid?: boolean
    userId?: boolean
    otherUserid?: boolean
    role?: boolean
    operatorAccessId?: boolean
    currentGameSession?: boolean | Profile$currentGameSessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    otherUser?: boolean | Profile$otherUserArgs<ExtArgs>
    operator?: boolean | Profile$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
    totalXpFromOperator?: boolean
    activeCurrencyType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentGameSessionid?: boolean
    userId?: boolean
    otherUserid?: boolean
    role?: boolean
    operatorAccessId?: boolean
    currentGameSession?: boolean | Profile$currentGameSessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    otherUser?: boolean | Profile$otherUserArgs<ExtArgs>
    operator?: boolean | Profile$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
    totalXpFromOperator?: boolean
    activeCurrencyType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentGameSessionid?: boolean
    userId?: boolean
    otherUserid?: boolean
    role?: boolean
    operatorAccessId?: boolean
    currentGameSession?: boolean | Profile$currentGameSessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    otherUser?: boolean | Profile$otherUserArgs<ExtArgs>
    operator?: boolean | Profile$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    balance?: boolean
    totalXpFromOperator?: boolean
    activeCurrencyType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentGameSessionid?: boolean
    userId?: boolean
    otherUserid?: boolean
    role?: boolean
    operatorAccessId?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "balance" | "totalXpFromOperator" | "activeCurrencyType" | "createdAt" | "updatedAt" | "currentGameSessionid" | "userId" | "otherUserid" | "role" | "operatorAccessId", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentGameSession?: boolean | Profile$currentGameSessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    otherUser?: boolean | Profile$otherUserArgs<ExtArgs>
    operator?: boolean | Profile$operatorArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentGameSession?: boolean | Profile$currentGameSessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    otherUser?: boolean | Profile$otherUserArgs<ExtArgs>
    operator?: boolean | Profile$operatorArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentGameSession?: boolean | Profile$currentGameSessionArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    otherUser?: boolean | Profile$otherUserArgs<ExtArgs>
    operator?: boolean | Profile$operatorArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      currentGameSession: Prisma.$GameSessionPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      otherUser: Prisma.$UserPayload<ExtArgs> | null
      operator: Prisma.$OperatorAccessPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      balance: number
      totalXpFromOperator: number
      activeCurrencyType: string
      createdAt: Date
      updatedAt: Date
      currentGameSessionid: string | null
      userId: string
      otherUserid: string | null
      role: $Enums.Role | null
      operatorAccessId: string | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    currentGameSession<T extends Profile$currentGameSessionArgs<ExtArgs> = {}>(args?: Subset<T, Profile$currentGameSessionArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    otherUser<T extends Profile$otherUserArgs<ExtArgs> = {}>(args?: Subset<T, Profile$otherUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    operator<T extends Profile$operatorArgs<ExtArgs> = {}>(args?: Subset<T, Profile$operatorArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly balance: FieldRef<"Profile", 'Int'>
    readonly totalXpFromOperator: FieldRef<"Profile", 'Int'>
    readonly activeCurrencyType: FieldRef<"Profile", 'String'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
    readonly currentGameSessionid: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly otherUserid: FieldRef<"Profile", 'String'>
    readonly role: FieldRef<"Profile", 'Role'>
    readonly operatorAccessId: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.currentGameSession
   */
  export type Profile$currentGameSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
  }

  /**
   * Profile.otherUser
   */
  export type Profile$otherUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Profile.operator
   */
  export type Profile$operatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    where?: OperatorAccessWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Settings
   */

  export type AggregateSettings = {
    _count: SettingsCountAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  export type SettingsMinAggregateOutputType = {
    id: string | null
    theme: string | null
    language: string | null
    emailNotifications: boolean | null
    smsNotifications: boolean | null
    pushNotifications: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type SettingsMaxAggregateOutputType = {
    id: string | null
    theme: string | null
    language: string | null
    emailNotifications: boolean | null
    smsNotifications: boolean | null
    pushNotifications: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type SettingsCountAggregateOutputType = {
    id: number
    theme: number
    language: number
    emailNotifications: number
    smsNotifications: number
    pushNotifications: number
    meta: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type SettingsMinAggregateInputType = {
    id?: true
    theme?: true
    language?: true
    emailNotifications?: true
    smsNotifications?: true
    pushNotifications?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type SettingsMaxAggregateInputType = {
    id?: true
    theme?: true
    language?: true
    emailNotifications?: true
    smsNotifications?: true
    pushNotifications?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type SettingsCountAggregateInputType = {
    id?: true
    theme?: true
    language?: true
    emailNotifications?: true
    smsNotifications?: true
    pushNotifications?: true
    meta?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type SettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to aggregate.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingsMaxAggregateInputType
  }

  export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSettings[P]>
      : GetScalarType<T[P], AggregateSettings[P]>
  }




  export type SettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingsWhereInput
    orderBy?: SettingsOrderByWithAggregationInput | SettingsOrderByWithAggregationInput[]
    by: SettingsScalarFieldEnum[] | SettingsScalarFieldEnum
    having?: SettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingsCountAggregateInputType | true
    _min?: SettingsMinAggregateInputType
    _max?: SettingsMaxAggregateInputType
  }

  export type SettingsGroupByOutputType = {
    id: string
    theme: string | null
    language: string | null
    emailNotifications: boolean
    smsNotifications: boolean
    pushNotifications: boolean
    meta: JsonValue | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: SettingsCountAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  type GetSettingsGroupByPayload<T extends SettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SettingsGroupByOutputType[P]>
        }
      >
    >


  export type SettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    language?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    language?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    language?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectScalar = {
    id?: boolean
    theme?: boolean
    language?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type SettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "theme" | "language" | "emailNotifications" | "smsNotifications" | "pushNotifications" | "meta" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["settings"]>
  export type SettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Settings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      theme: string | null
      language: string | null
      emailNotifications: boolean
      smsNotifications: boolean
      pushNotifications: boolean
      meta: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["settings"]>
    composites: {}
  }

  type SettingsGetPayload<S extends boolean | null | undefined | SettingsDefaultArgs> = $Result.GetResult<Prisma.$SettingsPayload, S>

  type SettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingsCountAggregateInputType | true
    }

  export interface SettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Settings'], meta: { name: 'Settings' } }
    /**
     * Find zero or one Settings that matches the filter.
     * @param {SettingsFindUniqueArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingsFindUniqueArgs>(args: SelectSubset<T, SettingsFindUniqueArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Settings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingsFindFirstArgs>(args?: SelectSubset<T, SettingsFindFirstArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.settings.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.settings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingsWithIdOnly = await prisma.settings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingsFindManyArgs>(args?: SelectSubset<T, SettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Settings.
     * @param {SettingsCreateArgs} args - Arguments to create a Settings.
     * @example
     * // Create one Settings
     * const Settings = await prisma.settings.create({
     *   data: {
     *     // ... data to create a Settings
     *   }
     * })
     * 
     */
    create<T extends SettingsCreateArgs>(args: SelectSubset<T, SettingsCreateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingsCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingsCreateManyArgs>(args?: SelectSubset<T, SettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingsCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingsWithIdOnly = await prisma.settings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Settings.
     * @param {SettingsDeleteArgs} args - Arguments to delete one Settings.
     * @example
     * // Delete one Settings
     * const Settings = await prisma.settings.delete({
     *   where: {
     *     // ... filter to delete one Settings
     *   }
     * })
     * 
     */
    delete<T extends SettingsDeleteArgs>(args: SelectSubset<T, SettingsDeleteArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Settings.
     * @param {SettingsUpdateArgs} args - Arguments to update one Settings.
     * @example
     * // Update one Settings
     * const settings = await prisma.settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingsUpdateArgs>(args: SelectSubset<T, SettingsUpdateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingsDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingsDeleteManyArgs>(args?: SelectSubset<T, SettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingsUpdateManyArgs>(args: SelectSubset<T, SettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings and returns the data updated in the database.
     * @param {SettingsUpdateManyAndReturnArgs} args - Arguments to update many Settings.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Settings and only return the `id`
     * const settingsWithIdOnly = await prisma.settings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Settings.
     * @param {SettingsUpsertArgs} args - Arguments to update or create a Settings.
     * @example
     * // Update or create a Settings
     * const settings = await prisma.settings.upsert({
     *   create: {
     *     // ... data to create a Settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Settings we want to update
     *   }
     * })
     */
    upsert<T extends SettingsUpsertArgs>(args: SelectSubset<T, SettingsUpsertArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.settings.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingsCountArgs>(
      args?: Subset<T, SettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingsAggregateArgs>(args: Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

    /**
     * Group by Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingsGroupByArgs['orderBy'] }
        : { orderBy?: SettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Settings model
   */
  readonly fields: SettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Settings model
   */
  interface SettingsFieldRefs {
    readonly id: FieldRef<"Settings", 'String'>
    readonly theme: FieldRef<"Settings", 'String'>
    readonly language: FieldRef<"Settings", 'String'>
    readonly emailNotifications: FieldRef<"Settings", 'Boolean'>
    readonly smsNotifications: FieldRef<"Settings", 'Boolean'>
    readonly pushNotifications: FieldRef<"Settings", 'Boolean'>
    readonly meta: FieldRef<"Settings", 'Json'>
    readonly createdAt: FieldRef<"Settings", 'DateTime'>
    readonly updatedAt: FieldRef<"Settings", 'DateTime'>
    readonly userId: FieldRef<"Settings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Settings findUnique
   */
  export type SettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findUniqueOrThrow
   */
  export type SettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findFirst
   */
  export type SettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findFirstOrThrow
   */
  export type SettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findMany
   */
  export type SettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings create
   */
  export type SettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a Settings.
     */
    data: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
  }

  /**
   * Settings createMany
   */
  export type SettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Settings createManyAndReturn
   */
  export type SettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Settings update
   */
  export type SettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a Settings.
     */
    data: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
    /**
     * Choose, which Settings to update.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings updateMany
   */
  export type SettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings updateManyAndReturn
   */
  export type SettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Settings upsert
   */
  export type SettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the Settings to update in case it exists.
     */
    where: SettingsWhereUniqueInput
    /**
     * In case the Settings found by the `where` argument doesn't exist, create a new Settings with this data.
     */
    create: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
    /**
     * In case the Settings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
  }

  /**
   * Settings delete
   */
  export type SettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
    /**
     * Filter which Settings to delete.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings deleteMany
   */
  export type SettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Settings without action
   */
  export type SettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SettingsInclude<ExtArgs> | null
  }


  /**
   * Model Wallet
   */

  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    balance: number | null
    bonusBalance: number | null
    lockedBalance: number | null
  }

  export type WalletSumAggregateOutputType = {
    balance: number | null
    bonusBalance: number | null
    lockedBalance: number | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    balance: number | null
    isActive: boolean | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    currencyId: string | null
    bonusBalance: number | null
    lockedBalance: number | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    balance: number | null
    isActive: boolean | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    currencyId: string | null
    bonusBalance: number | null
    lockedBalance: number | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    balance: number
    isActive: number
    address: number
    createdAt: number
    updatedAt: number
    userId: number
    currencyId: number
    bonusBalance: number
    lockedBalance: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    balance?: true
    bonusBalance?: true
    lockedBalance?: true
  }

  export type WalletSumAggregateInputType = {
    balance?: true
    bonusBalance?: true
    lockedBalance?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    balance?: true
    isActive?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    currencyId?: true
    bonusBalance?: true
    lockedBalance?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    balance?: true
    isActive?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    currencyId?: true
    bonusBalance?: true
    lockedBalance?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    balance?: true
    isActive?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    currencyId?: true
    bonusBalance?: true
    lockedBalance?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithAggregationInput | WalletOrderByWithAggregationInput[]
    by: WalletScalarFieldEnum[] | WalletScalarFieldEnum
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }

  export type WalletGroupByOutputType = {
    id: string
    balance: number
    isActive: boolean
    address: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    currencyId: string
    bonusBalance: number
    lockedBalance: number
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
    isActive?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    currencyId?: boolean
    bonusBalance?: boolean
    lockedBalance?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    transactions?: boolean | Wallet$transactionsArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
    isActive?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    currencyId?: boolean
    bonusBalance?: boolean
    lockedBalance?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
    isActive?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    currencyId?: boolean
    bonusBalance?: boolean
    lockedBalance?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    balance?: boolean
    isActive?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    currencyId?: boolean
    bonusBalance?: boolean
    lockedBalance?: boolean
  }

  export type WalletOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "balance" | "isActive" | "address" | "createdAt" | "updatedAt" | "userId" | "currencyId" | "bonusBalance" | "lockedBalance", ExtArgs["result"]["wallet"]>
  export type WalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    transactions?: boolean | Wallet$transactionsArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WalletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }
  export type WalletIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }

  export type $WalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wallet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      currency: Prisma.$CurrencyPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      balance: number
      isActive: boolean
      address: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      currencyId: string
      bonusBalance: number
      lockedBalance: number
    }, ExtArgs["result"]["wallet"]>
    composites: {}
  }

  type WalletGetPayload<S extends boolean | null | undefined | WalletDefaultArgs> = $Result.GetResult<Prisma.$WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WalletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletFindUniqueArgs>(args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wallet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletFindFirstArgs>(args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletFindManyArgs>(args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
     */
    create<T extends WalletCreateArgs>(args: SelectSubset<T, WalletCreateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wallets.
     * @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletCreateManyArgs>(args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets and returns the data saved in the database.
     * @param {WalletCreateManyAndReturnArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
     */
    delete<T extends WalletDeleteArgs>(args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletUpdateArgs>(args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletDeleteManyArgs>(args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletUpdateManyArgs>(args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets and returns the data updated in the database.
     * @param {WalletUpdateManyAndReturnArgs} args - Arguments to update many Wallets.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WalletUpdateManyAndReturnArgs>(args: SelectSubset<T, WalletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
     */
    upsert<T extends WalletUpsertArgs>(args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wallet model
   */
  readonly fields: WalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currency<T extends CurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyDefaultArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Wallet$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wallet model
   */
  interface WalletFieldRefs {
    readonly id: FieldRef<"Wallet", 'String'>
    readonly balance: FieldRef<"Wallet", 'Float'>
    readonly isActive: FieldRef<"Wallet", 'Boolean'>
    readonly address: FieldRef<"Wallet", 'String'>
    readonly createdAt: FieldRef<"Wallet", 'DateTime'>
    readonly updatedAt: FieldRef<"Wallet", 'DateTime'>
    readonly userId: FieldRef<"Wallet", 'String'>
    readonly currencyId: FieldRef<"Wallet", 'String'>
    readonly bonusBalance: FieldRef<"Wallet", 'Int'>
    readonly lockedBalance: FieldRef<"Wallet", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Wallet findUnique
   */
  export type WalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findFirst
   */
  export type WalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }

  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wallet createManyAndReturn
   */
  export type WalletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
  }

  /**
   * Wallet updateManyAndReturn
   */
  export type WalletUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }

  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to delete.
     */
    limit?: number
  }

  /**
   * Wallet.transactions
   */
  export type Wallet$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Wallet without action
   */
  export type WalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
  }


  /**
   * Model OperatorAccess
   */

  export type AggregateOperatorAccess = {
    _count: OperatorAccessCountAggregateOutputType | null
    _min: OperatorAccessMinAggregateOutputType | null
    _max: OperatorAccessMaxAggregateOutputType | null
  }

  export type OperatorAccessMinAggregateOutputType = {
    id: string | null
    name: string | null
    operator_secret: string | null
    operator_access: string | null
    callbackUrl: string | null
    active: boolean | null
    description: string | null
    lastUsedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
    ownedById: string | null
  }

  export type OperatorAccessMaxAggregateOutputType = {
    id: string | null
    name: string | null
    operator_secret: string | null
    operator_access: string | null
    callbackUrl: string | null
    active: boolean | null
    description: string | null
    lastUsedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
    ownedById: string | null
  }

  export type OperatorAccessCountAggregateOutputType = {
    id: number
    name: number
    operator_secret: number
    operator_access: number
    callbackUrl: number
    active: number
    permissions: number
    ips: number
    description: number
    lastUsedAt: number
    createdAt: number
    updatedAt: number
    ownerId: number
    acceptedPayments: number
    ownedById: number
    _all: number
  }


  export type OperatorAccessMinAggregateInputType = {
    id?: true
    name?: true
    operator_secret?: true
    operator_access?: true
    callbackUrl?: true
    active?: true
    description?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    ownedById?: true
  }

  export type OperatorAccessMaxAggregateInputType = {
    id?: true
    name?: true
    operator_secret?: true
    operator_access?: true
    callbackUrl?: true
    active?: true
    description?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    ownedById?: true
  }

  export type OperatorAccessCountAggregateInputType = {
    id?: true
    name?: true
    operator_secret?: true
    operator_access?: true
    callbackUrl?: true
    active?: true
    permissions?: true
    ips?: true
    description?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    acceptedPayments?: true
    ownedById?: true
    _all?: true
  }

  export type OperatorAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperatorAccess to aggregate.
     */
    where?: OperatorAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorAccesses to fetch.
     */
    orderBy?: OperatorAccessOrderByWithRelationInput | OperatorAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperatorAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OperatorAccesses
    **/
    _count?: true | OperatorAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperatorAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperatorAccessMaxAggregateInputType
  }

  export type GetOperatorAccessAggregateType<T extends OperatorAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateOperatorAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperatorAccess[P]>
      : GetScalarType<T[P], AggregateOperatorAccess[P]>
  }




  export type OperatorAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorAccessWhereInput
    orderBy?: OperatorAccessOrderByWithAggregationInput | OperatorAccessOrderByWithAggregationInput[]
    by: OperatorAccessScalarFieldEnum[] | OperatorAccessScalarFieldEnum
    having?: OperatorAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperatorAccessCountAggregateInputType | true
    _min?: OperatorAccessMinAggregateInputType
    _max?: OperatorAccessMaxAggregateInputType
  }

  export type OperatorAccessGroupByOutputType = {
    id: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active: boolean
    permissions: $Enums.KeyMode[]
    ips: string[]
    description: string | null
    lastUsedAt: Date | null
    createdAt: Date
    updatedAt: Date
    ownerId: string | null
    acceptedPayments: $Enums.PaymentMethod[]
    ownedById: string | null
    _count: OperatorAccessCountAggregateOutputType | null
    _min: OperatorAccessMinAggregateOutputType | null
    _max: OperatorAccessMaxAggregateOutputType | null
  }

  type GetOperatorAccessGroupByPayload<T extends OperatorAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperatorAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperatorAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperatorAccessGroupByOutputType[P]>
            : GetScalarType<T[P], OperatorAccessGroupByOutputType[P]>
        }
      >
    >


  export type OperatorAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    operator_secret?: boolean
    operator_access?: boolean
    callbackUrl?: boolean
    active?: boolean
    permissions?: boolean
    ips?: boolean
    description?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    acceptedPayments?: boolean
    ownedById?: boolean
    invitations?: boolean | OperatorAccess$invitationsArgs<ExtArgs>
    owner?: boolean | OperatorAccess$ownerArgs<ExtArgs>
    gameLaunchLinks?: boolean | OperatorAccess$gameLaunchLinksArgs<ExtArgs>
    products?: boolean | OperatorAccess$productsArgs<ExtArgs>
    games?: boolean | OperatorAccess$gamesArgs<ExtArgs>
    profiles?: boolean | OperatorAccess$profilesArgs<ExtArgs>
    _count?: boolean | OperatorAccessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operatorAccess"]>

  export type OperatorAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    operator_secret?: boolean
    operator_access?: boolean
    callbackUrl?: boolean
    active?: boolean
    permissions?: boolean
    ips?: boolean
    description?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    acceptedPayments?: boolean
    ownedById?: boolean
    owner?: boolean | OperatorAccess$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["operatorAccess"]>

  export type OperatorAccessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    operator_secret?: boolean
    operator_access?: boolean
    callbackUrl?: boolean
    active?: boolean
    permissions?: boolean
    ips?: boolean
    description?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    acceptedPayments?: boolean
    ownedById?: boolean
    owner?: boolean | OperatorAccess$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["operatorAccess"]>

  export type OperatorAccessSelectScalar = {
    id?: boolean
    name?: boolean
    operator_secret?: boolean
    operator_access?: boolean
    callbackUrl?: boolean
    active?: boolean
    permissions?: boolean
    ips?: boolean
    description?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    acceptedPayments?: boolean
    ownedById?: boolean
  }

  export type OperatorAccessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "operator_secret" | "operator_access" | "callbackUrl" | "active" | "permissions" | "ips" | "description" | "lastUsedAt" | "createdAt" | "updatedAt" | "ownerId" | "acceptedPayments" | "ownedById", ExtArgs["result"]["operatorAccess"]>
  export type OperatorAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invitations?: boolean | OperatorAccess$invitationsArgs<ExtArgs>
    owner?: boolean | OperatorAccess$ownerArgs<ExtArgs>
    gameLaunchLinks?: boolean | OperatorAccess$gameLaunchLinksArgs<ExtArgs>
    products?: boolean | OperatorAccess$productsArgs<ExtArgs>
    games?: boolean | OperatorAccess$gamesArgs<ExtArgs>
    profiles?: boolean | OperatorAccess$profilesArgs<ExtArgs>
    _count?: boolean | OperatorAccessCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OperatorAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | OperatorAccess$ownerArgs<ExtArgs>
  }
  export type OperatorAccessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | OperatorAccess$ownerArgs<ExtArgs>
  }

  export type $OperatorAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OperatorAccess"
    objects: {
      invitations: Prisma.$OperatorInvitationPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs> | null
      gameLaunchLinks: Prisma.$GameLaunchLinkPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
      games: Prisma.$GamePayload<ExtArgs>[]
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      operator_secret: string
      operator_access: string
      callbackUrl: string
      active: boolean
      permissions: $Enums.KeyMode[]
      ips: string[]
      description: string | null
      lastUsedAt: Date | null
      createdAt: Date
      updatedAt: Date
      ownerId: string | null
      acceptedPayments: $Enums.PaymentMethod[]
      ownedById: string | null
    }, ExtArgs["result"]["operatorAccess"]>
    composites: {}
  }

  type OperatorAccessGetPayload<S extends boolean | null | undefined | OperatorAccessDefaultArgs> = $Result.GetResult<Prisma.$OperatorAccessPayload, S>

  type OperatorAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperatorAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperatorAccessCountAggregateInputType | true
    }

  export interface OperatorAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OperatorAccess'], meta: { name: 'OperatorAccess' } }
    /**
     * Find zero or one OperatorAccess that matches the filter.
     * @param {OperatorAccessFindUniqueArgs} args - Arguments to find a OperatorAccess
     * @example
     * // Get one OperatorAccess
     * const operatorAccess = await prisma.operatorAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperatorAccessFindUniqueArgs>(args: SelectSubset<T, OperatorAccessFindUniqueArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OperatorAccess that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperatorAccessFindUniqueOrThrowArgs} args - Arguments to find a OperatorAccess
     * @example
     * // Get one OperatorAccess
     * const operatorAccess = await prisma.operatorAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperatorAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, OperatorAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OperatorAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAccessFindFirstArgs} args - Arguments to find a OperatorAccess
     * @example
     * // Get one OperatorAccess
     * const operatorAccess = await prisma.operatorAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperatorAccessFindFirstArgs>(args?: SelectSubset<T, OperatorAccessFindFirstArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OperatorAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAccessFindFirstOrThrowArgs} args - Arguments to find a OperatorAccess
     * @example
     * // Get one OperatorAccess
     * const operatorAccess = await prisma.operatorAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperatorAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, OperatorAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OperatorAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OperatorAccesses
     * const operatorAccesses = await prisma.operatorAccess.findMany()
     * 
     * // Get first 10 OperatorAccesses
     * const operatorAccesses = await prisma.operatorAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operatorAccessWithIdOnly = await prisma.operatorAccess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperatorAccessFindManyArgs>(args?: SelectSubset<T, OperatorAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OperatorAccess.
     * @param {OperatorAccessCreateArgs} args - Arguments to create a OperatorAccess.
     * @example
     * // Create one OperatorAccess
     * const OperatorAccess = await prisma.operatorAccess.create({
     *   data: {
     *     // ... data to create a OperatorAccess
     *   }
     * })
     * 
     */
    create<T extends OperatorAccessCreateArgs>(args: SelectSubset<T, OperatorAccessCreateArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OperatorAccesses.
     * @param {OperatorAccessCreateManyArgs} args - Arguments to create many OperatorAccesses.
     * @example
     * // Create many OperatorAccesses
     * const operatorAccess = await prisma.operatorAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperatorAccessCreateManyArgs>(args?: SelectSubset<T, OperatorAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OperatorAccesses and returns the data saved in the database.
     * @param {OperatorAccessCreateManyAndReturnArgs} args - Arguments to create many OperatorAccesses.
     * @example
     * // Create many OperatorAccesses
     * const operatorAccess = await prisma.operatorAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OperatorAccesses and only return the `id`
     * const operatorAccessWithIdOnly = await prisma.operatorAccess.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperatorAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, OperatorAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OperatorAccess.
     * @param {OperatorAccessDeleteArgs} args - Arguments to delete one OperatorAccess.
     * @example
     * // Delete one OperatorAccess
     * const OperatorAccess = await prisma.operatorAccess.delete({
     *   where: {
     *     // ... filter to delete one OperatorAccess
     *   }
     * })
     * 
     */
    delete<T extends OperatorAccessDeleteArgs>(args: SelectSubset<T, OperatorAccessDeleteArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OperatorAccess.
     * @param {OperatorAccessUpdateArgs} args - Arguments to update one OperatorAccess.
     * @example
     * // Update one OperatorAccess
     * const operatorAccess = await prisma.operatorAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperatorAccessUpdateArgs>(args: SelectSubset<T, OperatorAccessUpdateArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OperatorAccesses.
     * @param {OperatorAccessDeleteManyArgs} args - Arguments to filter OperatorAccesses to delete.
     * @example
     * // Delete a few OperatorAccesses
     * const { count } = await prisma.operatorAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperatorAccessDeleteManyArgs>(args?: SelectSubset<T, OperatorAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperatorAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OperatorAccesses
     * const operatorAccess = await prisma.operatorAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperatorAccessUpdateManyArgs>(args: SelectSubset<T, OperatorAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperatorAccesses and returns the data updated in the database.
     * @param {OperatorAccessUpdateManyAndReturnArgs} args - Arguments to update many OperatorAccesses.
     * @example
     * // Update many OperatorAccesses
     * const operatorAccess = await prisma.operatorAccess.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OperatorAccesses and only return the `id`
     * const operatorAccessWithIdOnly = await prisma.operatorAccess.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperatorAccessUpdateManyAndReturnArgs>(args: SelectSubset<T, OperatorAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OperatorAccess.
     * @param {OperatorAccessUpsertArgs} args - Arguments to update or create a OperatorAccess.
     * @example
     * // Update or create a OperatorAccess
     * const operatorAccess = await prisma.operatorAccess.upsert({
     *   create: {
     *     // ... data to create a OperatorAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OperatorAccess we want to update
     *   }
     * })
     */
    upsert<T extends OperatorAccessUpsertArgs>(args: SelectSubset<T, OperatorAccessUpsertArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OperatorAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAccessCountArgs} args - Arguments to filter OperatorAccesses to count.
     * @example
     * // Count the number of OperatorAccesses
     * const count = await prisma.operatorAccess.count({
     *   where: {
     *     // ... the filter for the OperatorAccesses we want to count
     *   }
     * })
    **/
    count<T extends OperatorAccessCountArgs>(
      args?: Subset<T, OperatorAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperatorAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OperatorAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperatorAccessAggregateArgs>(args: Subset<T, OperatorAccessAggregateArgs>): Prisma.PrismaPromise<GetOperatorAccessAggregateType<T>>

    /**
     * Group by OperatorAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperatorAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperatorAccessGroupByArgs['orderBy'] }
        : { orderBy?: OperatorAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperatorAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatorAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OperatorAccess model
   */
  readonly fields: OperatorAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OperatorAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperatorAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invitations<T extends OperatorAccess$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccess$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends OperatorAccess$ownerArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccess$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    gameLaunchLinks<T extends OperatorAccess$gameLaunchLinksArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccess$gameLaunchLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends OperatorAccess$productsArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccess$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    games<T extends OperatorAccess$gamesArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccess$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profiles<T extends OperatorAccess$profilesArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccess$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OperatorAccess model
   */
  interface OperatorAccessFieldRefs {
    readonly id: FieldRef<"OperatorAccess", 'String'>
    readonly name: FieldRef<"OperatorAccess", 'String'>
    readonly operator_secret: FieldRef<"OperatorAccess", 'String'>
    readonly operator_access: FieldRef<"OperatorAccess", 'String'>
    readonly callbackUrl: FieldRef<"OperatorAccess", 'String'>
    readonly active: FieldRef<"OperatorAccess", 'Boolean'>
    readonly permissions: FieldRef<"OperatorAccess", 'KeyMode[]'>
    readonly ips: FieldRef<"OperatorAccess", 'String[]'>
    readonly description: FieldRef<"OperatorAccess", 'String'>
    readonly lastUsedAt: FieldRef<"OperatorAccess", 'DateTime'>
    readonly createdAt: FieldRef<"OperatorAccess", 'DateTime'>
    readonly updatedAt: FieldRef<"OperatorAccess", 'DateTime'>
    readonly ownerId: FieldRef<"OperatorAccess", 'String'>
    readonly acceptedPayments: FieldRef<"OperatorAccess", 'PaymentMethod[]'>
    readonly ownedById: FieldRef<"OperatorAccess", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OperatorAccess findUnique
   */
  export type OperatorAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * Filter, which OperatorAccess to fetch.
     */
    where: OperatorAccessWhereUniqueInput
  }

  /**
   * OperatorAccess findUniqueOrThrow
   */
  export type OperatorAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * Filter, which OperatorAccess to fetch.
     */
    where: OperatorAccessWhereUniqueInput
  }

  /**
   * OperatorAccess findFirst
   */
  export type OperatorAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * Filter, which OperatorAccess to fetch.
     */
    where?: OperatorAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorAccesses to fetch.
     */
    orderBy?: OperatorAccessOrderByWithRelationInput | OperatorAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperatorAccesses.
     */
    cursor?: OperatorAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperatorAccesses.
     */
    distinct?: OperatorAccessScalarFieldEnum | OperatorAccessScalarFieldEnum[]
  }

  /**
   * OperatorAccess findFirstOrThrow
   */
  export type OperatorAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * Filter, which OperatorAccess to fetch.
     */
    where?: OperatorAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorAccesses to fetch.
     */
    orderBy?: OperatorAccessOrderByWithRelationInput | OperatorAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperatorAccesses.
     */
    cursor?: OperatorAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperatorAccesses.
     */
    distinct?: OperatorAccessScalarFieldEnum | OperatorAccessScalarFieldEnum[]
  }

  /**
   * OperatorAccess findMany
   */
  export type OperatorAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * Filter, which OperatorAccesses to fetch.
     */
    where?: OperatorAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorAccesses to fetch.
     */
    orderBy?: OperatorAccessOrderByWithRelationInput | OperatorAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OperatorAccesses.
     */
    cursor?: OperatorAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorAccesses.
     */
    skip?: number
    distinct?: OperatorAccessScalarFieldEnum | OperatorAccessScalarFieldEnum[]
  }

  /**
   * OperatorAccess create
   */
  export type OperatorAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a OperatorAccess.
     */
    data: XOR<OperatorAccessCreateInput, OperatorAccessUncheckedCreateInput>
  }

  /**
   * OperatorAccess createMany
   */
  export type OperatorAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OperatorAccesses.
     */
    data: OperatorAccessCreateManyInput | OperatorAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OperatorAccess createManyAndReturn
   */
  export type OperatorAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * The data used to create many OperatorAccesses.
     */
    data: OperatorAccessCreateManyInput | OperatorAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OperatorAccess update
   */
  export type OperatorAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a OperatorAccess.
     */
    data: XOR<OperatorAccessUpdateInput, OperatorAccessUncheckedUpdateInput>
    /**
     * Choose, which OperatorAccess to update.
     */
    where: OperatorAccessWhereUniqueInput
  }

  /**
   * OperatorAccess updateMany
   */
  export type OperatorAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OperatorAccesses.
     */
    data: XOR<OperatorAccessUpdateManyMutationInput, OperatorAccessUncheckedUpdateManyInput>
    /**
     * Filter which OperatorAccesses to update
     */
    where?: OperatorAccessWhereInput
    /**
     * Limit how many OperatorAccesses to update.
     */
    limit?: number
  }

  /**
   * OperatorAccess updateManyAndReturn
   */
  export type OperatorAccessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * The data used to update OperatorAccesses.
     */
    data: XOR<OperatorAccessUpdateManyMutationInput, OperatorAccessUncheckedUpdateManyInput>
    /**
     * Filter which OperatorAccesses to update
     */
    where?: OperatorAccessWhereInput
    /**
     * Limit how many OperatorAccesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OperatorAccess upsert
   */
  export type OperatorAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the OperatorAccess to update in case it exists.
     */
    where: OperatorAccessWhereUniqueInput
    /**
     * In case the OperatorAccess found by the `where` argument doesn't exist, create a new OperatorAccess with this data.
     */
    create: XOR<OperatorAccessCreateInput, OperatorAccessUncheckedCreateInput>
    /**
     * In case the OperatorAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperatorAccessUpdateInput, OperatorAccessUncheckedUpdateInput>
  }

  /**
   * OperatorAccess delete
   */
  export type OperatorAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    /**
     * Filter which OperatorAccess to delete.
     */
    where: OperatorAccessWhereUniqueInput
  }

  /**
   * OperatorAccess deleteMany
   */
  export type OperatorAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperatorAccesses to delete
     */
    where?: OperatorAccessWhereInput
    /**
     * Limit how many OperatorAccesses to delete.
     */
    limit?: number
  }

  /**
   * OperatorAccess.invitations
   */
  export type OperatorAccess$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    where?: OperatorInvitationWhereInput
    orderBy?: OperatorInvitationOrderByWithRelationInput | OperatorInvitationOrderByWithRelationInput[]
    cursor?: OperatorInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperatorInvitationScalarFieldEnum | OperatorInvitationScalarFieldEnum[]
  }

  /**
   * OperatorAccess.owner
   */
  export type OperatorAccess$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OperatorAccess.gameLaunchLinks
   */
  export type OperatorAccess$gameLaunchLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    where?: GameLaunchLinkWhereInput
    orderBy?: GameLaunchLinkOrderByWithRelationInput | GameLaunchLinkOrderByWithRelationInput[]
    cursor?: GameLaunchLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameLaunchLinkScalarFieldEnum | GameLaunchLinkScalarFieldEnum[]
  }

  /**
   * OperatorAccess.products
   */
  export type OperatorAccess$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * OperatorAccess.games
   */
  export type OperatorAccess$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * OperatorAccess.profiles
   */
  export type OperatorAccess$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * OperatorAccess without action
   */
  export type OperatorAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementAvgAggregateOutputType = {
    xpReward: number | null
    blur: number | null
  }

  export type AchievementSumAggregateOutputType = {
    xpReward: number | null
    blur: number | null
  }

  export type AchievementMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    xpReward: number | null
    iconUrl: string | null
    secret: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    blur: number | null
  }

  export type AchievementMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    xpReward: number | null
    iconUrl: string | null
    secret: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    blur: number | null
  }

  export type AchievementCountAggregateOutputType = {
    id: number
    name: number
    description: number
    xpReward: number
    iconUrl: number
    secret: number
    createdAt: number
    updatedAt: number
    blur: number
    _all: number
  }


  export type AchievementAvgAggregateInputType = {
    xpReward?: true
    blur?: true
  }

  export type AchievementSumAggregateInputType = {
    xpReward?: true
    blur?: true
  }

  export type AchievementMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    xpReward?: true
    iconUrl?: true
    secret?: true
    createdAt?: true
    updatedAt?: true
    blur?: true
  }

  export type AchievementMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    xpReward?: true
    iconUrl?: true
    secret?: true
    createdAt?: true
    updatedAt?: true
    blur?: true
  }

  export type AchievementCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    xpReward?: true
    iconUrl?: true
    secret?: true
    createdAt?: true
    updatedAt?: true
    blur?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _avg?: AchievementAvgAggregateInputType
    _sum?: AchievementSumAggregateInputType
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    id: string
    name: string
    description: string
    xpReward: number
    iconUrl: string | null
    secret: boolean
    createdAt: Date
    updatedAt: Date
    blur: number
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    xpReward?: boolean
    iconUrl?: boolean
    secret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blur?: boolean
    userAchievements?: boolean | Achievement$userAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    xpReward?: boolean
    iconUrl?: boolean
    secret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blur?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    xpReward?: boolean
    iconUrl?: boolean
    secret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blur?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    xpReward?: boolean
    iconUrl?: boolean
    secret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blur?: boolean
  }

  export type AchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "xpReward" | "iconUrl" | "secret" | "createdAt" | "updatedAt" | "blur", ExtArgs["result"]["achievement"]>
  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAchievements?: boolean | Achievement$userAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      userAchievements: Prisma.$UserAchievementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      xpReward: number
      iconUrl: string | null
      secret: boolean
      createdAt: Date
      updatedAt: Date
      blur: number
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements and returns the data updated in the database.
     * @param {AchievementUpdateManyAndReturnArgs} args - Arguments to update many Achievements.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, AchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userAchievements<T extends Achievement$userAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$userAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */
  interface AchievementFieldRefs {
    readonly id: FieldRef<"Achievement", 'String'>
    readonly name: FieldRef<"Achievement", 'String'>
    readonly description: FieldRef<"Achievement", 'String'>
    readonly xpReward: FieldRef<"Achievement", 'Int'>
    readonly iconUrl: FieldRef<"Achievement", 'String'>
    readonly secret: FieldRef<"Achievement", 'Boolean'>
    readonly createdAt: FieldRef<"Achievement", 'DateTime'>
    readonly updatedAt: FieldRef<"Achievement", 'DateTime'>
    readonly blur: FieldRef<"Achievement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement updateManyAndReturn
   */
  export type AchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to delete.
     */
    limit?: number
  }

  /**
   * Achievement.userAchievements
   */
  export type Achievement$userAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    provider: $Enums.GameProvider | null
    category: $Enums.GameCategory | null
    isActive: boolean | null
    thumbnailUrl: string | null
    bannerUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    featured: boolean | null
    operatorId: string | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    provider: $Enums.GameProvider | null
    category: $Enums.GameCategory | null
    isActive: boolean | null
    thumbnailUrl: string | null
    bannerUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    featured: boolean | null
    operatorId: string | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    title: number
    goldsvetData: number
    description: number
    provider: number
    category: number
    tags: number
    isActive: number
    thumbnailUrl: number
    bannerUrl: number
    meta: number
    createdAt: number
    updatedAt: number
    featured: number
    operatorId: number
    _all: number
  }


  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    provider?: true
    category?: true
    isActive?: true
    thumbnailUrl?: true
    bannerUrl?: true
    createdAt?: true
    updatedAt?: true
    featured?: true
    operatorId?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    provider?: true
    category?: true
    isActive?: true
    thumbnailUrl?: true
    bannerUrl?: true
    createdAt?: true
    updatedAt?: true
    featured?: true
    operatorId?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    title?: true
    goldsvetData?: true
    description?: true
    provider?: true
    category?: true
    tags?: true
    isActive?: true
    thumbnailUrl?: true
    bannerUrl?: true
    meta?: true
    createdAt?: true
    updatedAt?: true
    featured?: true
    operatorId?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    name: string
    title: string
    goldsvetData: JsonValue | null
    description: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags: string[]
    isActive: boolean
    thumbnailUrl: string | null
    bannerUrl: string | null
    meta: JsonValue | null
    createdAt: Date
    updatedAt: Date
    featured: boolean
    operatorId: string | null
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    goldsvetData?: boolean
    description?: boolean
    provider?: boolean
    category?: boolean
    tags?: boolean
    isActive?: boolean
    thumbnailUrl?: boolean
    bannerUrl?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    featured?: boolean
    operatorId?: boolean
    gameSessions?: boolean | Game$gameSessionsArgs<ExtArgs>
    gameLaunchLinks?: boolean | Game$gameLaunchLinksArgs<ExtArgs>
    operator?: boolean | Game$operatorArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    goldsvetData?: boolean
    description?: boolean
    provider?: boolean
    category?: boolean
    tags?: boolean
    isActive?: boolean
    thumbnailUrl?: boolean
    bannerUrl?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    featured?: boolean
    operatorId?: boolean
    operator?: boolean | Game$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    goldsvetData?: boolean
    description?: boolean
    provider?: boolean
    category?: boolean
    tags?: boolean
    isActive?: boolean
    thumbnailUrl?: boolean
    bannerUrl?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    featured?: boolean
    operatorId?: boolean
    operator?: boolean | Game$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    name?: boolean
    title?: boolean
    goldsvetData?: boolean
    description?: boolean
    provider?: boolean
    category?: boolean
    tags?: boolean
    isActive?: boolean
    thumbnailUrl?: boolean
    bannerUrl?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    featured?: boolean
    operatorId?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "title" | "goldsvetData" | "description" | "provider" | "category" | "tags" | "isActive" | "thumbnailUrl" | "bannerUrl" | "meta" | "createdAt" | "updatedAt" | "featured" | "operatorId", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSessions?: boolean | Game$gameSessionsArgs<ExtArgs>
    gameLaunchLinks?: boolean | Game$gameLaunchLinksArgs<ExtArgs>
    operator?: boolean | Game$operatorArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operator?: boolean | Game$operatorArgs<ExtArgs>
  }
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operator?: boolean | Game$operatorArgs<ExtArgs>
  }

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      gameSessions: Prisma.$GameSessionPayload<ExtArgs>[]
      gameLaunchLinks: Prisma.$GameLaunchLinkPayload<ExtArgs>[]
      operator: Prisma.$OperatorAccessPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      title: string
      goldsvetData: Prisma.JsonValue | null
      description: string | null
      provider: $Enums.GameProvider
      category: $Enums.GameCategory
      tags: string[]
      isActive: boolean
      thumbnailUrl: string | null
      bannerUrl: string | null
      meta: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      featured: boolean
      operatorId: string | null
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameSessions<T extends Game$gameSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameLaunchLinks<T extends Game$gameLaunchLinksArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameLaunchLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    operator<T extends Game$operatorArgs<ExtArgs> = {}>(args?: Subset<T, Game$operatorArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'String'>
    readonly name: FieldRef<"Game", 'String'>
    readonly title: FieldRef<"Game", 'String'>
    readonly goldsvetData: FieldRef<"Game", 'Json'>
    readonly description: FieldRef<"Game", 'String'>
    readonly provider: FieldRef<"Game", 'GameProvider'>
    readonly category: FieldRef<"Game", 'GameCategory'>
    readonly tags: FieldRef<"Game", 'String[]'>
    readonly isActive: FieldRef<"Game", 'Boolean'>
    readonly thumbnailUrl: FieldRef<"Game", 'String'>
    readonly bannerUrl: FieldRef<"Game", 'String'>
    readonly meta: FieldRef<"Game", 'Json'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
    readonly featured: FieldRef<"Game", 'Boolean'>
    readonly operatorId: FieldRef<"Game", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.gameSessions
   */
  export type Game$gameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    cursor?: GameSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * Game.gameLaunchLinks
   */
  export type Game$gameLaunchLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    where?: GameLaunchLinkWhereInput
    orderBy?: GameLaunchLinkOrderByWithRelationInput | GameLaunchLinkOrderByWithRelationInput[]
    cursor?: GameLaunchLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameLaunchLinkScalarFieldEnum | GameLaunchLinkScalarFieldEnum[]
  }

  /**
   * Game.operator
   */
  export type Game$operatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    where?: OperatorAccessWhereInput
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    viewCount: number | null
  }

  export type PostSumAggregateOutputType = {
    viewCount: number | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    published: boolean | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    published: boolean | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    published: number
    tags: number
    viewCount: number
    meta: number
    createdAt: number
    updatedAt: number
    authorId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    viewCount?: true
  }

  export type PostSumAggregateInputType = {
    viewCount?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    tags?: true
    viewCount?: true
    meta?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    title: string
    content: string
    published: boolean
    tags: string[]
    viewCount: number
    meta: JsonValue | null
    createdAt: Date
    updatedAt: Date
    authorId: string
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    tags?: boolean
    viewCount?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    tags?: boolean
    viewCount?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    tags?: boolean
    viewCount?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    tags?: boolean
    viewCount?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "published" | "tags" | "viewCount" | "meta" | "createdAt" | "updatedAt" | "authorId", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      published: boolean
      tags: string[]
      viewCount: number
      meta: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      authorId: string
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comments<T extends Post$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Post$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly title: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly published: FieldRef<"Post", 'Boolean'>
    readonly tags: FieldRef<"Post", 'String[]'>
    readonly viewCount: FieldRef<"Post", 'Int'>
    readonly meta: FieldRef<"Post", 'Json'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly authorId: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.comments
   */
  export type Post$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    postId: string | null
    authorId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    postId: string | null
    authorId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    postId: number
    authorId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    postId?: true
    authorId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    postId?: true
    authorId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    postId?: true
    authorId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    postId: string
    authorId: string
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
    authorId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
    authorId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
    authorId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
    authorId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt" | "postId" | "authorId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      postId: string
      authorId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly postId: FieldRef<"Comment", 'String'>
    readonly authorId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model GameSpin
   */

  export type AggregateGameSpin = {
    _count: GameSpinCountAggregateOutputType | null
    _avg: GameSpinAvgAggregateOutputType | null
    _sum: GameSpinSumAggregateOutputType | null
    _min: GameSpinMinAggregateOutputType | null
    _max: GameSpinMaxAggregateOutputType | null
  }

  export type GameSpinAvgAggregateOutputType = {
    grossWinAmount: number | null
    spinNumber: number | null
    wagerAmount: number | null
  }

  export type GameSpinSumAggregateOutputType = {
    grossWinAmount: number | null
    spinNumber: number | null
    wagerAmount: number | null
  }

  export type GameSpinMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    grossWinAmount: number | null
    currencyId: string | null
    spinNumber: number | null
    gameSessionId: string | null
    wagerAmount: number | null
    sessionId: string | null
    timeStamp: Date | null
  }

  export type GameSpinMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    grossWinAmount: number | null
    currencyId: string | null
    spinNumber: number | null
    gameSessionId: string | null
    wagerAmount: number | null
    sessionId: string | null
    timeStamp: Date | null
  }

  export type GameSpinCountAggregateOutputType = {
    id: number
    spinData: number
    createdAt: number
    grossWinAmount: number
    currencyId: number
    spinNumber: number
    gameSessionId: number
    wagerAmount: number
    sessionId: number
    timeStamp: number
    _all: number
  }


  export type GameSpinAvgAggregateInputType = {
    grossWinAmount?: true
    spinNumber?: true
    wagerAmount?: true
  }

  export type GameSpinSumAggregateInputType = {
    grossWinAmount?: true
    spinNumber?: true
    wagerAmount?: true
  }

  export type GameSpinMinAggregateInputType = {
    id?: true
    createdAt?: true
    grossWinAmount?: true
    currencyId?: true
    spinNumber?: true
    gameSessionId?: true
    wagerAmount?: true
    sessionId?: true
    timeStamp?: true
  }

  export type GameSpinMaxAggregateInputType = {
    id?: true
    createdAt?: true
    grossWinAmount?: true
    currencyId?: true
    spinNumber?: true
    gameSessionId?: true
    wagerAmount?: true
    sessionId?: true
    timeStamp?: true
  }

  export type GameSpinCountAggregateInputType = {
    id?: true
    spinData?: true
    createdAt?: true
    grossWinAmount?: true
    currencyId?: true
    spinNumber?: true
    gameSessionId?: true
    wagerAmount?: true
    sessionId?: true
    timeStamp?: true
    _all?: true
  }

  export type GameSpinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSpin to aggregate.
     */
    where?: GameSpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSpins to fetch.
     */
    orderBy?: GameSpinOrderByWithRelationInput | GameSpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameSpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSpins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSpins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameSpins
    **/
    _count?: true | GameSpinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameSpinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSpinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameSpinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameSpinMaxAggregateInputType
  }

  export type GetGameSpinAggregateType<T extends GameSpinAggregateArgs> = {
        [P in keyof T & keyof AggregateGameSpin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameSpin[P]>
      : GetScalarType<T[P], AggregateGameSpin[P]>
  }




  export type GameSpinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSpinWhereInput
    orderBy?: GameSpinOrderByWithAggregationInput | GameSpinOrderByWithAggregationInput[]
    by: GameSpinScalarFieldEnum[] | GameSpinScalarFieldEnum
    having?: GameSpinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameSpinCountAggregateInputType | true
    _avg?: GameSpinAvgAggregateInputType
    _sum?: GameSpinSumAggregateInputType
    _min?: GameSpinMinAggregateInputType
    _max?: GameSpinMaxAggregateInputType
  }

  export type GameSpinGroupByOutputType = {
    id: string
    spinData: JsonValue | null
    createdAt: Date
    grossWinAmount: number
    currencyId: string | null
    spinNumber: number
    gameSessionId: string
    wagerAmount: number
    sessionId: string
    timeStamp: Date
    _count: GameSpinCountAggregateOutputType | null
    _avg: GameSpinAvgAggregateOutputType | null
    _sum: GameSpinSumAggregateOutputType | null
    _min: GameSpinMinAggregateOutputType | null
    _max: GameSpinMaxAggregateOutputType | null
  }

  type GetGameSpinGroupByPayload<T extends GameSpinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameSpinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameSpinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameSpinGroupByOutputType[P]>
            : GetScalarType<T[P], GameSpinGroupByOutputType[P]>
        }
      >
    >


  export type GameSpinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spinData?: boolean
    createdAt?: boolean
    grossWinAmount?: boolean
    currencyId?: boolean
    spinNumber?: boolean
    gameSessionId?: boolean
    wagerAmount?: boolean
    sessionId?: boolean
    timeStamp?: boolean
    gameSession?: boolean | GameSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSpin"]>

  export type GameSpinSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spinData?: boolean
    createdAt?: boolean
    grossWinAmount?: boolean
    currencyId?: boolean
    spinNumber?: boolean
    gameSessionId?: boolean
    wagerAmount?: boolean
    sessionId?: boolean
    timeStamp?: boolean
    gameSession?: boolean | GameSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSpin"]>

  export type GameSpinSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spinData?: boolean
    createdAt?: boolean
    grossWinAmount?: boolean
    currencyId?: boolean
    spinNumber?: boolean
    gameSessionId?: boolean
    wagerAmount?: boolean
    sessionId?: boolean
    timeStamp?: boolean
    gameSession?: boolean | GameSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSpin"]>

  export type GameSpinSelectScalar = {
    id?: boolean
    spinData?: boolean
    createdAt?: boolean
    grossWinAmount?: boolean
    currencyId?: boolean
    spinNumber?: boolean
    gameSessionId?: boolean
    wagerAmount?: boolean
    sessionId?: boolean
    timeStamp?: boolean
  }

  export type GameSpinOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spinData" | "createdAt" | "grossWinAmount" | "currencyId" | "spinNumber" | "gameSessionId" | "wagerAmount" | "sessionId" | "timeStamp", ExtArgs["result"]["gameSpin"]>
  export type GameSpinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSession?: boolean | GameSessionDefaultArgs<ExtArgs>
  }
  export type GameSpinIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSession?: boolean | GameSessionDefaultArgs<ExtArgs>
  }
  export type GameSpinIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSession?: boolean | GameSessionDefaultArgs<ExtArgs>
  }

  export type $GameSpinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameSpin"
    objects: {
      gameSession: Prisma.$GameSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      spinData: Prisma.JsonValue | null
      createdAt: Date
      grossWinAmount: number
      currencyId: string | null
      spinNumber: number
      gameSessionId: string
      wagerAmount: number
      sessionId: string
      timeStamp: Date
    }, ExtArgs["result"]["gameSpin"]>
    composites: {}
  }

  type GameSpinGetPayload<S extends boolean | null | undefined | GameSpinDefaultArgs> = $Result.GetResult<Prisma.$GameSpinPayload, S>

  type GameSpinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameSpinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameSpinCountAggregateInputType | true
    }

  export interface GameSpinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSpin'], meta: { name: 'GameSpin' } }
    /**
     * Find zero or one GameSpin that matches the filter.
     * @param {GameSpinFindUniqueArgs} args - Arguments to find a GameSpin
     * @example
     * // Get one GameSpin
     * const gameSpin = await prisma.gameSpin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameSpinFindUniqueArgs>(args: SelectSubset<T, GameSpinFindUniqueArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameSpin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameSpinFindUniqueOrThrowArgs} args - Arguments to find a GameSpin
     * @example
     * // Get one GameSpin
     * const gameSpin = await prisma.gameSpin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameSpinFindUniqueOrThrowArgs>(args: SelectSubset<T, GameSpinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSpin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSpinFindFirstArgs} args - Arguments to find a GameSpin
     * @example
     * // Get one GameSpin
     * const gameSpin = await prisma.gameSpin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameSpinFindFirstArgs>(args?: SelectSubset<T, GameSpinFindFirstArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSpin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSpinFindFirstOrThrowArgs} args - Arguments to find a GameSpin
     * @example
     * // Get one GameSpin
     * const gameSpin = await prisma.gameSpin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameSpinFindFirstOrThrowArgs>(args?: SelectSubset<T, GameSpinFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameSpins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSpinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameSpins
     * const gameSpins = await prisma.gameSpin.findMany()
     * 
     * // Get first 10 GameSpins
     * const gameSpins = await prisma.gameSpin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameSpinWithIdOnly = await prisma.gameSpin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameSpinFindManyArgs>(args?: SelectSubset<T, GameSpinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameSpin.
     * @param {GameSpinCreateArgs} args - Arguments to create a GameSpin.
     * @example
     * // Create one GameSpin
     * const GameSpin = await prisma.gameSpin.create({
     *   data: {
     *     // ... data to create a GameSpin
     *   }
     * })
     * 
     */
    create<T extends GameSpinCreateArgs>(args: SelectSubset<T, GameSpinCreateArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameSpins.
     * @param {GameSpinCreateManyArgs} args - Arguments to create many GameSpins.
     * @example
     * // Create many GameSpins
     * const gameSpin = await prisma.gameSpin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameSpinCreateManyArgs>(args?: SelectSubset<T, GameSpinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameSpins and returns the data saved in the database.
     * @param {GameSpinCreateManyAndReturnArgs} args - Arguments to create many GameSpins.
     * @example
     * // Create many GameSpins
     * const gameSpin = await prisma.gameSpin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameSpins and only return the `id`
     * const gameSpinWithIdOnly = await prisma.gameSpin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameSpinCreateManyAndReturnArgs>(args?: SelectSubset<T, GameSpinCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameSpin.
     * @param {GameSpinDeleteArgs} args - Arguments to delete one GameSpin.
     * @example
     * // Delete one GameSpin
     * const GameSpin = await prisma.gameSpin.delete({
     *   where: {
     *     // ... filter to delete one GameSpin
     *   }
     * })
     * 
     */
    delete<T extends GameSpinDeleteArgs>(args: SelectSubset<T, GameSpinDeleteArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameSpin.
     * @param {GameSpinUpdateArgs} args - Arguments to update one GameSpin.
     * @example
     * // Update one GameSpin
     * const gameSpin = await prisma.gameSpin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameSpinUpdateArgs>(args: SelectSubset<T, GameSpinUpdateArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameSpins.
     * @param {GameSpinDeleteManyArgs} args - Arguments to filter GameSpins to delete.
     * @example
     * // Delete a few GameSpins
     * const { count } = await prisma.gameSpin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameSpinDeleteManyArgs>(args?: SelectSubset<T, GameSpinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSpins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSpinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameSpins
     * const gameSpin = await prisma.gameSpin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameSpinUpdateManyArgs>(args: SelectSubset<T, GameSpinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSpins and returns the data updated in the database.
     * @param {GameSpinUpdateManyAndReturnArgs} args - Arguments to update many GameSpins.
     * @example
     * // Update many GameSpins
     * const gameSpin = await prisma.gameSpin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameSpins and only return the `id`
     * const gameSpinWithIdOnly = await prisma.gameSpin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameSpinUpdateManyAndReturnArgs>(args: SelectSubset<T, GameSpinUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameSpin.
     * @param {GameSpinUpsertArgs} args - Arguments to update or create a GameSpin.
     * @example
     * // Update or create a GameSpin
     * const gameSpin = await prisma.gameSpin.upsert({
     *   create: {
     *     // ... data to create a GameSpin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameSpin we want to update
     *   }
     * })
     */
    upsert<T extends GameSpinUpsertArgs>(args: SelectSubset<T, GameSpinUpsertArgs<ExtArgs>>): Prisma__GameSpinClient<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameSpins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSpinCountArgs} args - Arguments to filter GameSpins to count.
     * @example
     * // Count the number of GameSpins
     * const count = await prisma.gameSpin.count({
     *   where: {
     *     // ... the filter for the GameSpins we want to count
     *   }
     * })
    **/
    count<T extends GameSpinCountArgs>(
      args?: Subset<T, GameSpinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameSpinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameSpin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSpinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameSpinAggregateArgs>(args: Subset<T, GameSpinAggregateArgs>): Prisma.PrismaPromise<GetGameSpinAggregateType<T>>

    /**
     * Group by GameSpin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSpinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameSpinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameSpinGroupByArgs['orderBy'] }
        : { orderBy?: GameSpinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameSpinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSpinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameSpin model
   */
  readonly fields: GameSpinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameSpin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameSpinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameSession<T extends GameSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameSessionDefaultArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameSpin model
   */
  interface GameSpinFieldRefs {
    readonly id: FieldRef<"GameSpin", 'String'>
    readonly spinData: FieldRef<"GameSpin", 'Json'>
    readonly createdAt: FieldRef<"GameSpin", 'DateTime'>
    readonly grossWinAmount: FieldRef<"GameSpin", 'Int'>
    readonly currencyId: FieldRef<"GameSpin", 'String'>
    readonly spinNumber: FieldRef<"GameSpin", 'Int'>
    readonly gameSessionId: FieldRef<"GameSpin", 'String'>
    readonly wagerAmount: FieldRef<"GameSpin", 'Int'>
    readonly sessionId: FieldRef<"GameSpin", 'String'>
    readonly timeStamp: FieldRef<"GameSpin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameSpin findUnique
   */
  export type GameSpinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * Filter, which GameSpin to fetch.
     */
    where: GameSpinWhereUniqueInput
  }

  /**
   * GameSpin findUniqueOrThrow
   */
  export type GameSpinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * Filter, which GameSpin to fetch.
     */
    where: GameSpinWhereUniqueInput
  }

  /**
   * GameSpin findFirst
   */
  export type GameSpinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * Filter, which GameSpin to fetch.
     */
    where?: GameSpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSpins to fetch.
     */
    orderBy?: GameSpinOrderByWithRelationInput | GameSpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSpins.
     */
    cursor?: GameSpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSpins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSpins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSpins.
     */
    distinct?: GameSpinScalarFieldEnum | GameSpinScalarFieldEnum[]
  }

  /**
   * GameSpin findFirstOrThrow
   */
  export type GameSpinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * Filter, which GameSpin to fetch.
     */
    where?: GameSpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSpins to fetch.
     */
    orderBy?: GameSpinOrderByWithRelationInput | GameSpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSpins.
     */
    cursor?: GameSpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSpins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSpins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSpins.
     */
    distinct?: GameSpinScalarFieldEnum | GameSpinScalarFieldEnum[]
  }

  /**
   * GameSpin findMany
   */
  export type GameSpinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * Filter, which GameSpins to fetch.
     */
    where?: GameSpinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSpins to fetch.
     */
    orderBy?: GameSpinOrderByWithRelationInput | GameSpinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameSpins.
     */
    cursor?: GameSpinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSpins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSpins.
     */
    skip?: number
    distinct?: GameSpinScalarFieldEnum | GameSpinScalarFieldEnum[]
  }

  /**
   * GameSpin create
   */
  export type GameSpinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * The data needed to create a GameSpin.
     */
    data: XOR<GameSpinCreateInput, GameSpinUncheckedCreateInput>
  }

  /**
   * GameSpin createMany
   */
  export type GameSpinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameSpins.
     */
    data: GameSpinCreateManyInput | GameSpinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameSpin createManyAndReturn
   */
  export type GameSpinCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * The data used to create many GameSpins.
     */
    data: GameSpinCreateManyInput | GameSpinCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSpin update
   */
  export type GameSpinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * The data needed to update a GameSpin.
     */
    data: XOR<GameSpinUpdateInput, GameSpinUncheckedUpdateInput>
    /**
     * Choose, which GameSpin to update.
     */
    where: GameSpinWhereUniqueInput
  }

  /**
   * GameSpin updateMany
   */
  export type GameSpinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameSpins.
     */
    data: XOR<GameSpinUpdateManyMutationInput, GameSpinUncheckedUpdateManyInput>
    /**
     * Filter which GameSpins to update
     */
    where?: GameSpinWhereInput
    /**
     * Limit how many GameSpins to update.
     */
    limit?: number
  }

  /**
   * GameSpin updateManyAndReturn
   */
  export type GameSpinUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * The data used to update GameSpins.
     */
    data: XOR<GameSpinUpdateManyMutationInput, GameSpinUncheckedUpdateManyInput>
    /**
     * Filter which GameSpins to update
     */
    where?: GameSpinWhereInput
    /**
     * Limit how many GameSpins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSpin upsert
   */
  export type GameSpinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * The filter to search for the GameSpin to update in case it exists.
     */
    where: GameSpinWhereUniqueInput
    /**
     * In case the GameSpin found by the `where` argument doesn't exist, create a new GameSpin with this data.
     */
    create: XOR<GameSpinCreateInput, GameSpinUncheckedCreateInput>
    /**
     * In case the GameSpin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameSpinUpdateInput, GameSpinUncheckedUpdateInput>
  }

  /**
   * GameSpin delete
   */
  export type GameSpinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    /**
     * Filter which GameSpin to delete.
     */
    where: GameSpinWhereUniqueInput
  }

  /**
   * GameSpin deleteMany
   */
  export type GameSpinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSpins to delete
     */
    where?: GameSpinWhereInput
    /**
     * Limit how many GameSpins to delete.
     */
    limit?: number
  }

  /**
   * GameSpin without action
   */
  export type GameSpinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
  }


  /**
   * Model GameSession
   */

  export type AggregateGameSession = {
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  export type GameSessionAvgAggregateOutputType = {
    startingBalance: number | null
    totalWagered: number | null
    totalWon: number | null
  }

  export type GameSessionSumAggregateOutputType = {
    startingBalance: number | null
    totalWagered: number | null
    totalWon: number | null
  }

  export type GameSessionMinAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    sessionId: string | null
    currencyId: string | null
    startedAt: Date | null
    endTime: Date | null
    startTime: Date | null
    ipAddress: string | null
    startingBalance: number | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalWagered: number | null
    totalWon: number | null
    userId: string | null
    gameId: string | null
    profileId: string | null
  }

  export type GameSessionMaxAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    sessionId: string | null
    currencyId: string | null
    startedAt: Date | null
    endTime: Date | null
    startTime: Date | null
    ipAddress: string | null
    startingBalance: number | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalWagered: number | null
    totalWon: number | null
    userId: string | null
    gameId: string | null
    profileId: string | null
  }

  export type GameSessionCountAggregateOutputType = {
    id: number
    isActive: number
    sessionData: number
    sessionId: number
    currencyId: number
    startedAt: number
    endTime: number
    startTime: number
    ipAddress: number
    startingBalance: number
    userAgent: number
    createdAt: number
    updatedAt: number
    totalWagered: number
    totalWon: number
    userId: number
    gameId: number
    profileId: number
    _all: number
  }


  export type GameSessionAvgAggregateInputType = {
    startingBalance?: true
    totalWagered?: true
    totalWon?: true
  }

  export type GameSessionSumAggregateInputType = {
    startingBalance?: true
    totalWagered?: true
    totalWon?: true
  }

  export type GameSessionMinAggregateInputType = {
    id?: true
    isActive?: true
    sessionId?: true
    currencyId?: true
    startedAt?: true
    endTime?: true
    startTime?: true
    ipAddress?: true
    startingBalance?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    totalWagered?: true
    totalWon?: true
    userId?: true
    gameId?: true
    profileId?: true
  }

  export type GameSessionMaxAggregateInputType = {
    id?: true
    isActive?: true
    sessionId?: true
    currencyId?: true
    startedAt?: true
    endTime?: true
    startTime?: true
    ipAddress?: true
    startingBalance?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    totalWagered?: true
    totalWon?: true
    userId?: true
    gameId?: true
    profileId?: true
  }

  export type GameSessionCountAggregateInputType = {
    id?: true
    isActive?: true
    sessionData?: true
    sessionId?: true
    currencyId?: true
    startedAt?: true
    endTime?: true
    startTime?: true
    ipAddress?: true
    startingBalance?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    totalWagered?: true
    totalWon?: true
    userId?: true
    gameId?: true
    profileId?: true
    _all?: true
  }

  export type GameSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSession to aggregate.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameSessions
    **/
    _count?: true | GameSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameSessionMaxAggregateInputType
  }

  export type GetGameSessionAggregateType<T extends GameSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateGameSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameSession[P]>
      : GetScalarType<T[P], AggregateGameSession[P]>
  }




  export type GameSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithAggregationInput | GameSessionOrderByWithAggregationInput[]
    by: GameSessionScalarFieldEnum[] | GameSessionScalarFieldEnum
    having?: GameSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameSessionCountAggregateInputType | true
    _avg?: GameSessionAvgAggregateInputType
    _sum?: GameSessionSumAggregateInputType
    _min?: GameSessionMinAggregateInputType
    _max?: GameSessionMaxAggregateInputType
  }

  export type GameSessionGroupByOutputType = {
    id: string
    isActive: boolean
    sessionData: JsonValue | null
    sessionId: string | null
    currencyId: string | null
    startedAt: Date
    endTime: Date | null
    startTime: Date | null
    ipAddress: string | null
    startingBalance: number | null
    userAgent: string | null
    createdAt: Date
    updatedAt: Date
    totalWagered: number
    totalWon: number
    userId: string
    gameId: string
    profileId: string | null
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  type GetGameSessionGroupByPayload<T extends GameSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
            : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
        }
      >
    >


  export type GameSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    sessionData?: boolean
    sessionId?: boolean
    currencyId?: boolean
    startedAt?: boolean
    endTime?: boolean
    startTime?: boolean
    ipAddress?: boolean
    startingBalance?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalWagered?: boolean
    totalWon?: boolean
    userId?: boolean
    gameId?: boolean
    profileId?: boolean
    spins?: boolean | GameSession$spinsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    Profile?: boolean | GameSession$ProfileArgs<ExtArgs>
    _count?: boolean | GameSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    sessionData?: boolean
    sessionId?: boolean
    currencyId?: boolean
    startedAt?: boolean
    endTime?: boolean
    startTime?: boolean
    ipAddress?: boolean
    startingBalance?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalWagered?: boolean
    totalWon?: boolean
    userId?: boolean
    gameId?: boolean
    profileId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    sessionData?: boolean
    sessionId?: boolean
    currencyId?: boolean
    startedAt?: boolean
    endTime?: boolean
    startTime?: boolean
    ipAddress?: boolean
    startingBalance?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalWagered?: boolean
    totalWon?: boolean
    userId?: boolean
    gameId?: boolean
    profileId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectScalar = {
    id?: boolean
    isActive?: boolean
    sessionData?: boolean
    sessionId?: boolean
    currencyId?: boolean
    startedAt?: boolean
    endTime?: boolean
    startTime?: boolean
    ipAddress?: boolean
    startingBalance?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalWagered?: boolean
    totalWon?: boolean
    userId?: boolean
    gameId?: boolean
    profileId?: boolean
  }

  export type GameSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isActive" | "sessionData" | "sessionId" | "currencyId" | "startedAt" | "endTime" | "startTime" | "ipAddress" | "startingBalance" | "userAgent" | "createdAt" | "updatedAt" | "totalWagered" | "totalWon" | "userId" | "gameId" | "profileId", ExtArgs["result"]["gameSession"]>
  export type GameSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spins?: boolean | GameSession$spinsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    Profile?: boolean | GameSession$ProfileArgs<ExtArgs>
    _count?: boolean | GameSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type GameSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $GameSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameSession"
    objects: {
      spins: Prisma.$GameSpinPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
      Profile: Prisma.$ProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isActive: boolean
      sessionData: Prisma.JsonValue | null
      sessionId: string | null
      currencyId: string | null
      startedAt: Date
      endTime: Date | null
      startTime: Date | null
      ipAddress: string | null
      startingBalance: number | null
      userAgent: string | null
      createdAt: Date
      updatedAt: Date
      totalWagered: number
      totalWon: number
      userId: string
      gameId: string
      profileId: string | null
    }, ExtArgs["result"]["gameSession"]>
    composites: {}
  }

  type GameSessionGetPayload<S extends boolean | null | undefined | GameSessionDefaultArgs> = $Result.GetResult<Prisma.$GameSessionPayload, S>

  type GameSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameSessionCountAggregateInputType | true
    }

  export interface GameSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSession'], meta: { name: 'GameSession' } }
    /**
     * Find zero or one GameSession that matches the filter.
     * @param {GameSessionFindUniqueArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameSessionFindUniqueArgs>(args: SelectSubset<T, GameSessionFindUniqueArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameSessionFindUniqueOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, GameSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameSessionFindFirstArgs>(args?: SelectSubset<T, GameSessionFindFirstArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, GameSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameSessions
     * const gameSessions = await prisma.gameSession.findMany()
     * 
     * // Get first 10 GameSessions
     * const gameSessions = await prisma.gameSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameSessionFindManyArgs>(args?: SelectSubset<T, GameSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameSession.
     * @param {GameSessionCreateArgs} args - Arguments to create a GameSession.
     * @example
     * // Create one GameSession
     * const GameSession = await prisma.gameSession.create({
     *   data: {
     *     // ... data to create a GameSession
     *   }
     * })
     * 
     */
    create<T extends GameSessionCreateArgs>(args: SelectSubset<T, GameSessionCreateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameSessions.
     * @param {GameSessionCreateManyArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameSessionCreateManyArgs>(args?: SelectSubset<T, GameSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameSessions and returns the data saved in the database.
     * @param {GameSessionCreateManyAndReturnArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameSessions and only return the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, GameSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameSession.
     * @param {GameSessionDeleteArgs} args - Arguments to delete one GameSession.
     * @example
     * // Delete one GameSession
     * const GameSession = await prisma.gameSession.delete({
     *   where: {
     *     // ... filter to delete one GameSession
     *   }
     * })
     * 
     */
    delete<T extends GameSessionDeleteArgs>(args: SelectSubset<T, GameSessionDeleteArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameSession.
     * @param {GameSessionUpdateArgs} args - Arguments to update one GameSession.
     * @example
     * // Update one GameSession
     * const gameSession = await prisma.gameSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameSessionUpdateArgs>(args: SelectSubset<T, GameSessionUpdateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameSessions.
     * @param {GameSessionDeleteManyArgs} args - Arguments to filter GameSessions to delete.
     * @example
     * // Delete a few GameSessions
     * const { count } = await prisma.gameSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameSessionDeleteManyArgs>(args?: SelectSubset<T, GameSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameSessions
     * const gameSession = await prisma.gameSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameSessionUpdateManyArgs>(args: SelectSubset<T, GameSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSessions and returns the data updated in the database.
     * @param {GameSessionUpdateManyAndReturnArgs} args - Arguments to update many GameSessions.
     * @example
     * // Update many GameSessions
     * const gameSession = await prisma.gameSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameSessions and only return the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, GameSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameSession.
     * @param {GameSessionUpsertArgs} args - Arguments to update or create a GameSession.
     * @example
     * // Update or create a GameSession
     * const gameSession = await prisma.gameSession.upsert({
     *   create: {
     *     // ... data to create a GameSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameSession we want to update
     *   }
     * })
     */
    upsert<T extends GameSessionUpsertArgs>(args: SelectSubset<T, GameSessionUpsertArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionCountArgs} args - Arguments to filter GameSessions to count.
     * @example
     * // Count the number of GameSessions
     * const count = await prisma.gameSession.count({
     *   where: {
     *     // ... the filter for the GameSessions we want to count
     *   }
     * })
    **/
    count<T extends GameSessionCountArgs>(
      args?: Subset<T, GameSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameSessionAggregateArgs>(args: Subset<T, GameSessionAggregateArgs>): Prisma.PrismaPromise<GetGameSessionAggregateType<T>>

    /**
     * Group by GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameSessionGroupByArgs['orderBy'] }
        : { orderBy?: GameSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameSession model
   */
  readonly fields: GameSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spins<T extends GameSession$spinsArgs<ExtArgs> = {}>(args?: Subset<T, GameSession$spinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Profile<T extends GameSession$ProfileArgs<ExtArgs> = {}>(args?: Subset<T, GameSession$ProfileArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameSession model
   */
  interface GameSessionFieldRefs {
    readonly id: FieldRef<"GameSession", 'String'>
    readonly isActive: FieldRef<"GameSession", 'Boolean'>
    readonly sessionData: FieldRef<"GameSession", 'Json'>
    readonly sessionId: FieldRef<"GameSession", 'String'>
    readonly currencyId: FieldRef<"GameSession", 'String'>
    readonly startedAt: FieldRef<"GameSession", 'DateTime'>
    readonly endTime: FieldRef<"GameSession", 'DateTime'>
    readonly startTime: FieldRef<"GameSession", 'DateTime'>
    readonly ipAddress: FieldRef<"GameSession", 'String'>
    readonly startingBalance: FieldRef<"GameSession", 'Int'>
    readonly userAgent: FieldRef<"GameSession", 'String'>
    readonly createdAt: FieldRef<"GameSession", 'DateTime'>
    readonly updatedAt: FieldRef<"GameSession", 'DateTime'>
    readonly totalWagered: FieldRef<"GameSession", 'Int'>
    readonly totalWon: FieldRef<"GameSession", 'Int'>
    readonly userId: FieldRef<"GameSession", 'String'>
    readonly gameId: FieldRef<"GameSession", 'String'>
    readonly profileId: FieldRef<"GameSession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameSession findUnique
   */
  export type GameSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findUniqueOrThrow
   */
  export type GameSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findFirst
   */
  export type GameSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findFirstOrThrow
   */
  export type GameSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findMany
   */
  export type GameSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSessions to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession create
   */
  export type GameSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a GameSession.
     */
    data: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
  }

  /**
   * GameSession createMany
   */
  export type GameSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameSession createManyAndReturn
   */
  export type GameSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSession update
   */
  export type GameSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a GameSession.
     */
    data: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
    /**
     * Choose, which GameSession to update.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession updateMany
   */
  export type GameSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameSessions.
     */
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyInput>
    /**
     * Filter which GameSessions to update
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to update.
     */
    limit?: number
  }

  /**
   * GameSession updateManyAndReturn
   */
  export type GameSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * The data used to update GameSessions.
     */
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyInput>
    /**
     * Filter which GameSessions to update
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSession upsert
   */
  export type GameSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the GameSession to update in case it exists.
     */
    where: GameSessionWhereUniqueInput
    /**
     * In case the GameSession found by the `where` argument doesn't exist, create a new GameSession with this data.
     */
    create: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
    /**
     * In case the GameSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
  }

  /**
   * GameSession delete
   */
  export type GameSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter which GameSession to delete.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession deleteMany
   */
  export type GameSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSessions to delete
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to delete.
     */
    limit?: number
  }

  /**
   * GameSession.spins
   */
  export type GameSession$spinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSpin
     */
    select?: GameSpinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSpin
     */
    omit?: GameSpinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSpinInclude<ExtArgs> | null
    where?: GameSpinWhereInput
    orderBy?: GameSpinOrderByWithRelationInput | GameSpinOrderByWithRelationInput[]
    cursor?: GameSpinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSpinScalarFieldEnum | GameSpinScalarFieldEnum[]
  }

  /**
   * GameSession.Profile
   */
  export type GameSession$ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * GameSession without action
   */
  export type GameSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
  }


  /**
   * Model UserAchievement
   */

  export type AggregateUserAchievement = {
    _count: UserAchievementCountAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  export type UserAchievementMinAggregateOutputType = {
    id: string | null
    unlockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    achievementId: string | null
  }

  export type UserAchievementMaxAggregateOutputType = {
    id: string | null
    unlockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    achievementId: string | null
  }

  export type UserAchievementCountAggregateOutputType = {
    id: number
    unlockedAt: number
    metaData: number
    createdAt: number
    updatedAt: number
    userId: number
    achievementId: number
    _all: number
  }


  export type UserAchievementMinAggregateInputType = {
    id?: true
    unlockedAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    achievementId?: true
  }

  export type UserAchievementMaxAggregateInputType = {
    id?: true
    unlockedAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    achievementId?: true
  }

  export type UserAchievementCountAggregateInputType = {
    id?: true
    unlockedAt?: true
    metaData?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    achievementId?: true
    _all?: true
  }

  export type UserAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievement to aggregate.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAchievements
    **/
    _count?: true | UserAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAchievementMaxAggregateInputType
  }

  export type GetUserAchievementAggregateType<T extends UserAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAchievement[P]>
      : GetScalarType<T[P], AggregateUserAchievement[P]>
  }




  export type UserAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithAggregationInput | UserAchievementOrderByWithAggregationInput[]
    by: UserAchievementScalarFieldEnum[] | UserAchievementScalarFieldEnum
    having?: UserAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAchievementCountAggregateInputType | true
    _min?: UserAchievementMinAggregateInputType
    _max?: UserAchievementMaxAggregateInputType
  }

  export type UserAchievementGroupByOutputType = {
    id: string
    unlockedAt: Date
    metaData: JsonValue | null
    createdAt: Date
    updatedAt: Date
    userId: string
    achievementId: string
    _count: UserAchievementCountAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  type GetUserAchievementGroupByPayload<T extends UserAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
        }
      >
    >


  export type UserAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unlockedAt?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unlockedAt?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unlockedAt?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectScalar = {
    id?: boolean
    unlockedAt?: boolean
    metaData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    achievementId?: boolean
  }

  export type UserAchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "unlockedAt" | "metaData" | "createdAt" | "updatedAt" | "userId" | "achievementId", ExtArgs["result"]["userAchievement"]>
  export type UserAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }

  export type $UserAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAchievement"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      achievement: Prisma.$AchievementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      unlockedAt: Date
      metaData: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      userId: string
      achievementId: string
    }, ExtArgs["result"]["userAchievement"]>
    composites: {}
  }

  type UserAchievementGetPayload<S extends boolean | null | undefined | UserAchievementDefaultArgs> = $Result.GetResult<Prisma.$UserAchievementPayload, S>

  type UserAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAchievementCountAggregateInputType | true
    }

  export interface UserAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAchievement'], meta: { name: 'UserAchievement' } }
    /**
     * Find zero or one UserAchievement that matches the filter.
     * @param {UserAchievementFindUniqueArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAchievementFindUniqueArgs>(args: SelectSubset<T, UserAchievementFindUniqueArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAchievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAchievementFindUniqueOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAchievementFindFirstArgs>(args?: SelectSubset<T, UserAchievementFindFirstArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany()
     * 
     * // Get first 10 UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAchievementFindManyArgs>(args?: SelectSubset<T, UserAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAchievement.
     * @param {UserAchievementCreateArgs} args - Arguments to create a UserAchievement.
     * @example
     * // Create one UserAchievement
     * const UserAchievement = await prisma.userAchievement.create({
     *   data: {
     *     // ... data to create a UserAchievement
     *   }
     * })
     * 
     */
    create<T extends UserAchievementCreateArgs>(args: SelectSubset<T, UserAchievementCreateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAchievements.
     * @param {UserAchievementCreateManyArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAchievementCreateManyArgs>(args?: SelectSubset<T, UserAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAchievements and returns the data saved in the database.
     * @param {UserAchievementCreateManyAndReturnArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserAchievement.
     * @param {UserAchievementDeleteArgs} args - Arguments to delete one UserAchievement.
     * @example
     * // Delete one UserAchievement
     * const UserAchievement = await prisma.userAchievement.delete({
     *   where: {
     *     // ... filter to delete one UserAchievement
     *   }
     * })
     * 
     */
    delete<T extends UserAchievementDeleteArgs>(args: SelectSubset<T, UserAchievementDeleteArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAchievement.
     * @param {UserAchievementUpdateArgs} args - Arguments to update one UserAchievement.
     * @example
     * // Update one UserAchievement
     * const userAchievement = await prisma.userAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAchievementUpdateArgs>(args: SelectSubset<T, UserAchievementUpdateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAchievements.
     * @param {UserAchievementDeleteManyArgs} args - Arguments to filter UserAchievements to delete.
     * @example
     * // Delete a few UserAchievements
     * const { count } = await prisma.userAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAchievementDeleteManyArgs>(args?: SelectSubset<T, UserAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAchievementUpdateManyArgs>(args: SelectSubset<T, UserAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements and returns the data updated in the database.
     * @param {UserAchievementUpdateManyAndReturnArgs} args - Arguments to update many UserAchievements.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserAchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, UserAchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserAchievement.
     * @param {UserAchievementUpsertArgs} args - Arguments to update or create a UserAchievement.
     * @example
     * // Update or create a UserAchievement
     * const userAchievement = await prisma.userAchievement.upsert({
     *   create: {
     *     // ... data to create a UserAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAchievement we want to update
     *   }
     * })
     */
    upsert<T extends UserAchievementUpsertArgs>(args: SelectSubset<T, UserAchievementUpsertArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementCountArgs} args - Arguments to filter UserAchievements to count.
     * @example
     * // Count the number of UserAchievements
     * const count = await prisma.userAchievement.count({
     *   where: {
     *     // ... the filter for the UserAchievements we want to count
     *   }
     * })
    **/
    count<T extends UserAchievementCountArgs>(
      args?: Subset<T, UserAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAchievementAggregateArgs>(args: Subset<T, UserAchievementAggregateArgs>): Prisma.PrismaPromise<GetUserAchievementAggregateType<T>>

    /**
     * Group by UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAchievementGroupByArgs['orderBy'] }
        : { orderBy?: UserAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAchievement model
   */
  readonly fields: UserAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    achievement<T extends AchievementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AchievementDefaultArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAchievement model
   */
  interface UserAchievementFieldRefs {
    readonly id: FieldRef<"UserAchievement", 'String'>
    readonly unlockedAt: FieldRef<"UserAchievement", 'DateTime'>
    readonly metaData: FieldRef<"UserAchievement", 'Json'>
    readonly createdAt: FieldRef<"UserAchievement", 'DateTime'>
    readonly updatedAt: FieldRef<"UserAchievement", 'DateTime'>
    readonly userId: FieldRef<"UserAchievement", 'String'>
    readonly achievementId: FieldRef<"UserAchievement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserAchievement findUnique
   */
  export type UserAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findUniqueOrThrow
   */
  export type UserAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findFirst
   */
  export type UserAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findFirstOrThrow
   */
  export type UserAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findMany
   */
  export type UserAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievements to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement create
   */
  export type UserAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAchievement.
     */
    data: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
  }

  /**
   * UserAchievement createMany
   */
  export type UserAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAchievement createManyAndReturn
   */
  export type UserAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement update
   */
  export type UserAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAchievement.
     */
    data: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
    /**
     * Choose, which UserAchievement to update.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement updateMany
   */
  export type UserAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to update.
     */
    limit?: number
  }

  /**
   * UserAchievement updateManyAndReturn
   */
  export type UserAchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement upsert
   */
  export type UserAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAchievement to update in case it exists.
     */
    where: UserAchievementWhereUniqueInput
    /**
     * In case the UserAchievement found by the `where` argument doesn't exist, create a new UserAchievement with this data.
     */
    create: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
    /**
     * In case the UserAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
  }

  /**
   * UserAchievement delete
   */
  export type UserAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter which UserAchievement to delete.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement deleteMany
   */
  export type UserAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievements to delete
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to delete.
     */
    limit?: number
  }

  /**
   * UserAchievement without action
   */
  export type UserAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
  }


  /**
   * Model XpEvent
   */

  export type AggregateXpEvent = {
    _count: XpEventCountAggregateOutputType | null
    _avg: XpEventAvgAggregateOutputType | null
    _sum: XpEventSumAggregateOutputType | null
    _min: XpEventMinAggregateOutputType | null
    _max: XpEventMaxAggregateOutputType | null
  }

  export type XpEventAvgAggregateOutputType = {
    points: number | null
  }

  export type XpEventSumAggregateOutputType = {
    points: number | null
  }

  export type XpEventMinAggregateOutputType = {
    id: string | null
    points: number | null
    source: string | null
    sourceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type XpEventMaxAggregateOutputType = {
    id: string | null
    points: number | null
    source: string | null
    sourceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type XpEventCountAggregateOutputType = {
    id: number
    points: number
    source: number
    sourceId: number
    meta: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type XpEventAvgAggregateInputType = {
    points?: true
  }

  export type XpEventSumAggregateInputType = {
    points?: true
  }

  export type XpEventMinAggregateInputType = {
    id?: true
    points?: true
    source?: true
    sourceId?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type XpEventMaxAggregateInputType = {
    id?: true
    points?: true
    source?: true
    sourceId?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type XpEventCountAggregateInputType = {
    id?: true
    points?: true
    source?: true
    sourceId?: true
    meta?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type XpEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XpEvent to aggregate.
     */
    where?: XpEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpEvents to fetch.
     */
    orderBy?: XpEventOrderByWithRelationInput | XpEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: XpEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned XpEvents
    **/
    _count?: true | XpEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: XpEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: XpEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: XpEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: XpEventMaxAggregateInputType
  }

  export type GetXpEventAggregateType<T extends XpEventAggregateArgs> = {
        [P in keyof T & keyof AggregateXpEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateXpEvent[P]>
      : GetScalarType<T[P], AggregateXpEvent[P]>
  }




  export type XpEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XpEventWhereInput
    orderBy?: XpEventOrderByWithAggregationInput | XpEventOrderByWithAggregationInput[]
    by: XpEventScalarFieldEnum[] | XpEventScalarFieldEnum
    having?: XpEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: XpEventCountAggregateInputType | true
    _avg?: XpEventAvgAggregateInputType
    _sum?: XpEventSumAggregateInputType
    _min?: XpEventMinAggregateInputType
    _max?: XpEventMaxAggregateInputType
  }

  export type XpEventGroupByOutputType = {
    id: string
    points: number
    source: string
    sourceId: string | null
    meta: JsonValue | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: XpEventCountAggregateOutputType | null
    _avg: XpEventAvgAggregateOutputType | null
    _sum: XpEventSumAggregateOutputType | null
    _min: XpEventMinAggregateOutputType | null
    _max: XpEventMaxAggregateOutputType | null
  }

  type GetXpEventGroupByPayload<T extends XpEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<XpEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof XpEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], XpEventGroupByOutputType[P]>
            : GetScalarType<T[P], XpEventGroupByOutputType[P]>
        }
      >
    >


  export type XpEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    source?: boolean
    sourceId?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xpEvent"]>

  export type XpEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    source?: boolean
    sourceId?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xpEvent"]>

  export type XpEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    source?: boolean
    sourceId?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xpEvent"]>

  export type XpEventSelectScalar = {
    id?: boolean
    points?: boolean
    source?: boolean
    sourceId?: boolean
    meta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type XpEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "points" | "source" | "sourceId" | "meta" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["xpEvent"]>
  export type XpEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XpEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XpEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $XpEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "XpEvent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      points: number
      source: string
      sourceId: string | null
      meta: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["xpEvent"]>
    composites: {}
  }

  type XpEventGetPayload<S extends boolean | null | undefined | XpEventDefaultArgs> = $Result.GetResult<Prisma.$XpEventPayload, S>

  type XpEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<XpEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: XpEventCountAggregateInputType | true
    }

  export interface XpEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['XpEvent'], meta: { name: 'XpEvent' } }
    /**
     * Find zero or one XpEvent that matches the filter.
     * @param {XpEventFindUniqueArgs} args - Arguments to find a XpEvent
     * @example
     * // Get one XpEvent
     * const xpEvent = await prisma.xpEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends XpEventFindUniqueArgs>(args: SelectSubset<T, XpEventFindUniqueArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one XpEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {XpEventFindUniqueOrThrowArgs} args - Arguments to find a XpEvent
     * @example
     * // Get one XpEvent
     * const xpEvent = await prisma.xpEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends XpEventFindUniqueOrThrowArgs>(args: SelectSubset<T, XpEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XpEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpEventFindFirstArgs} args - Arguments to find a XpEvent
     * @example
     * // Get one XpEvent
     * const xpEvent = await prisma.xpEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends XpEventFindFirstArgs>(args?: SelectSubset<T, XpEventFindFirstArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XpEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpEventFindFirstOrThrowArgs} args - Arguments to find a XpEvent
     * @example
     * // Get one XpEvent
     * const xpEvent = await prisma.xpEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends XpEventFindFirstOrThrowArgs>(args?: SelectSubset<T, XpEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more XpEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all XpEvents
     * const xpEvents = await prisma.xpEvent.findMany()
     * 
     * // Get first 10 XpEvents
     * const xpEvents = await prisma.xpEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const xpEventWithIdOnly = await prisma.xpEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends XpEventFindManyArgs>(args?: SelectSubset<T, XpEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a XpEvent.
     * @param {XpEventCreateArgs} args - Arguments to create a XpEvent.
     * @example
     * // Create one XpEvent
     * const XpEvent = await prisma.xpEvent.create({
     *   data: {
     *     // ... data to create a XpEvent
     *   }
     * })
     * 
     */
    create<T extends XpEventCreateArgs>(args: SelectSubset<T, XpEventCreateArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many XpEvents.
     * @param {XpEventCreateManyArgs} args - Arguments to create many XpEvents.
     * @example
     * // Create many XpEvents
     * const xpEvent = await prisma.xpEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends XpEventCreateManyArgs>(args?: SelectSubset<T, XpEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many XpEvents and returns the data saved in the database.
     * @param {XpEventCreateManyAndReturnArgs} args - Arguments to create many XpEvents.
     * @example
     * // Create many XpEvents
     * const xpEvent = await prisma.xpEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many XpEvents and only return the `id`
     * const xpEventWithIdOnly = await prisma.xpEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends XpEventCreateManyAndReturnArgs>(args?: SelectSubset<T, XpEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a XpEvent.
     * @param {XpEventDeleteArgs} args - Arguments to delete one XpEvent.
     * @example
     * // Delete one XpEvent
     * const XpEvent = await prisma.xpEvent.delete({
     *   where: {
     *     // ... filter to delete one XpEvent
     *   }
     * })
     * 
     */
    delete<T extends XpEventDeleteArgs>(args: SelectSubset<T, XpEventDeleteArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one XpEvent.
     * @param {XpEventUpdateArgs} args - Arguments to update one XpEvent.
     * @example
     * // Update one XpEvent
     * const xpEvent = await prisma.xpEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends XpEventUpdateArgs>(args: SelectSubset<T, XpEventUpdateArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more XpEvents.
     * @param {XpEventDeleteManyArgs} args - Arguments to filter XpEvents to delete.
     * @example
     * // Delete a few XpEvents
     * const { count } = await prisma.xpEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends XpEventDeleteManyArgs>(args?: SelectSubset<T, XpEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XpEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many XpEvents
     * const xpEvent = await prisma.xpEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends XpEventUpdateManyArgs>(args: SelectSubset<T, XpEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XpEvents and returns the data updated in the database.
     * @param {XpEventUpdateManyAndReturnArgs} args - Arguments to update many XpEvents.
     * @example
     * // Update many XpEvents
     * const xpEvent = await prisma.xpEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more XpEvents and only return the `id`
     * const xpEventWithIdOnly = await prisma.xpEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends XpEventUpdateManyAndReturnArgs>(args: SelectSubset<T, XpEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one XpEvent.
     * @param {XpEventUpsertArgs} args - Arguments to update or create a XpEvent.
     * @example
     * // Update or create a XpEvent
     * const xpEvent = await prisma.xpEvent.upsert({
     *   create: {
     *     // ... data to create a XpEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the XpEvent we want to update
     *   }
     * })
     */
    upsert<T extends XpEventUpsertArgs>(args: SelectSubset<T, XpEventUpsertArgs<ExtArgs>>): Prisma__XpEventClient<$Result.GetResult<Prisma.$XpEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of XpEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpEventCountArgs} args - Arguments to filter XpEvents to count.
     * @example
     * // Count the number of XpEvents
     * const count = await prisma.xpEvent.count({
     *   where: {
     *     // ... the filter for the XpEvents we want to count
     *   }
     * })
    **/
    count<T extends XpEventCountArgs>(
      args?: Subset<T, XpEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], XpEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a XpEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends XpEventAggregateArgs>(args: Subset<T, XpEventAggregateArgs>): Prisma.PrismaPromise<GetXpEventAggregateType<T>>

    /**
     * Group by XpEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends XpEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: XpEventGroupByArgs['orderBy'] }
        : { orderBy?: XpEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, XpEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetXpEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the XpEvent model
   */
  readonly fields: XpEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for XpEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__XpEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the XpEvent model
   */
  interface XpEventFieldRefs {
    readonly id: FieldRef<"XpEvent", 'String'>
    readonly points: FieldRef<"XpEvent", 'Int'>
    readonly source: FieldRef<"XpEvent", 'String'>
    readonly sourceId: FieldRef<"XpEvent", 'String'>
    readonly meta: FieldRef<"XpEvent", 'Json'>
    readonly createdAt: FieldRef<"XpEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"XpEvent", 'DateTime'>
    readonly userId: FieldRef<"XpEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * XpEvent findUnique
   */
  export type XpEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * Filter, which XpEvent to fetch.
     */
    where: XpEventWhereUniqueInput
  }

  /**
   * XpEvent findUniqueOrThrow
   */
  export type XpEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * Filter, which XpEvent to fetch.
     */
    where: XpEventWhereUniqueInput
  }

  /**
   * XpEvent findFirst
   */
  export type XpEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * Filter, which XpEvent to fetch.
     */
    where?: XpEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpEvents to fetch.
     */
    orderBy?: XpEventOrderByWithRelationInput | XpEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XpEvents.
     */
    cursor?: XpEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XpEvents.
     */
    distinct?: XpEventScalarFieldEnum | XpEventScalarFieldEnum[]
  }

  /**
   * XpEvent findFirstOrThrow
   */
  export type XpEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * Filter, which XpEvent to fetch.
     */
    where?: XpEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpEvents to fetch.
     */
    orderBy?: XpEventOrderByWithRelationInput | XpEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XpEvents.
     */
    cursor?: XpEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XpEvents.
     */
    distinct?: XpEventScalarFieldEnum | XpEventScalarFieldEnum[]
  }

  /**
   * XpEvent findMany
   */
  export type XpEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * Filter, which XpEvents to fetch.
     */
    where?: XpEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpEvents to fetch.
     */
    orderBy?: XpEventOrderByWithRelationInput | XpEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing XpEvents.
     */
    cursor?: XpEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpEvents.
     */
    skip?: number
    distinct?: XpEventScalarFieldEnum | XpEventScalarFieldEnum[]
  }

  /**
   * XpEvent create
   */
  export type XpEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * The data needed to create a XpEvent.
     */
    data: XOR<XpEventCreateInput, XpEventUncheckedCreateInput>
  }

  /**
   * XpEvent createMany
   */
  export type XpEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many XpEvents.
     */
    data: XpEventCreateManyInput | XpEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * XpEvent createManyAndReturn
   */
  export type XpEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * The data used to create many XpEvents.
     */
    data: XpEventCreateManyInput | XpEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * XpEvent update
   */
  export type XpEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * The data needed to update a XpEvent.
     */
    data: XOR<XpEventUpdateInput, XpEventUncheckedUpdateInput>
    /**
     * Choose, which XpEvent to update.
     */
    where: XpEventWhereUniqueInput
  }

  /**
   * XpEvent updateMany
   */
  export type XpEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update XpEvents.
     */
    data: XOR<XpEventUpdateManyMutationInput, XpEventUncheckedUpdateManyInput>
    /**
     * Filter which XpEvents to update
     */
    where?: XpEventWhereInput
    /**
     * Limit how many XpEvents to update.
     */
    limit?: number
  }

  /**
   * XpEvent updateManyAndReturn
   */
  export type XpEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * The data used to update XpEvents.
     */
    data: XOR<XpEventUpdateManyMutationInput, XpEventUncheckedUpdateManyInput>
    /**
     * Filter which XpEvents to update
     */
    where?: XpEventWhereInput
    /**
     * Limit how many XpEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * XpEvent upsert
   */
  export type XpEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * The filter to search for the XpEvent to update in case it exists.
     */
    where: XpEventWhereUniqueInput
    /**
     * In case the XpEvent found by the `where` argument doesn't exist, create a new XpEvent with this data.
     */
    create: XOR<XpEventCreateInput, XpEventUncheckedCreateInput>
    /**
     * In case the XpEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<XpEventUpdateInput, XpEventUncheckedUpdateInput>
  }

  /**
   * XpEvent delete
   */
  export type XpEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
    /**
     * Filter which XpEvent to delete.
     */
    where: XpEventWhereUniqueInput
  }

  /**
   * XpEvent deleteMany
   */
  export type XpEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XpEvents to delete
     */
    where?: XpEventWhereInput
    /**
     * Limit how many XpEvents to delete.
     */
    limit?: number
  }

  /**
   * XpEvent without action
   */
  export type XpEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpEvent
     */
    select?: XpEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpEvent
     */
    omit?: XpEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpEventInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    actionUrl: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    actionUrl: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    isRead: number
    readAt: number
    actionUrl: number
    imageUrl: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    actionUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    actionUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    actionUrl?: true
    imageUrl?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead: boolean
    readAt: Date | null
    actionUrl: string | null
    imageUrl: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    imageUrl?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    originator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    imageUrl?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    originator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    imageUrl?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    originator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    imageUrl?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "title" | "message" | "isRead" | "readAt" | "actionUrl" | "imageUrl" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    originator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    originator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    originator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      originator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.NotificationType
      title: string
      message: string
      isRead: boolean
      readAt: Date | null
      actionUrl: string | null
      imageUrl: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    originator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly imageUrl: FieldRef<"Notification", 'String'>
    readonly metadata: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    channel: string | null
    content: string | null
    mediaUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    channel: string | null
    content: string | null
    mediaUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    channel: number
    content: number
    mediaUrl: number
    createdAt: number
    updatedAt: number
    authorId: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    id?: true
    channel?: true
    content?: true
    mediaUrl?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    channel?: true
    content?: true
    mediaUrl?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    channel?: true
    content?: true
    mediaUrl?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    channel: string
    content: string
    mediaUrl: string | null
    createdAt: Date
    updatedAt: Date
    authorId: string
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    channel?: boolean
    content?: boolean
    mediaUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    channel?: boolean
    content?: boolean
    mediaUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    channel?: boolean
    content?: boolean
    mediaUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    channel?: boolean
    content?: boolean
    mediaUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "channel" | "content" | "mediaUrl" | "createdAt" | "updatedAt" | "authorId", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      channel: string
      content: string
      mediaUrl: string | null
      createdAt: Date
      updatedAt: Date
      authorId: string
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly channel: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly mediaUrl: FieldRef<"ChatMessage", 'String'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly authorId: FieldRef<"ChatMessage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model Friendship
   */

  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipMinAggregateOutputType = {
    id: string | null
    status: $Enums.FriendshipStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    requesterId: string | null
    receiverId: string | null
  }

  export type FriendshipMaxAggregateOutputType = {
    id: string | null
    status: $Enums.FriendshipStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    requesterId: string | null
    receiverId: string | null
  }

  export type FriendshipCountAggregateOutputType = {
    id: number
    status: number
    createdAt: number
    updatedAt: number
    requesterId: number
    receiverId: number
    _all: number
  }


  export type FriendshipMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    requesterId?: true
    receiverId?: true
  }

  export type FriendshipMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    requesterId?: true
    receiverId?: true
  }

  export type FriendshipCountAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    requesterId?: true
    receiverId?: true
    _all?: true
  }

  export type FriendshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendship to aggregate.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithAggregationInput | FriendshipOrderByWithAggregationInput[]
    by: FriendshipScalarFieldEnum[] | FriendshipScalarFieldEnum
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }

  export type FriendshipGroupByOutputType = {
    id: string
    status: $Enums.FriendshipStatus
    createdAt: Date
    updatedAt: Date
    requesterId: string
    receiverId: string
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    receiverId?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    receiverId?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    receiverId?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectScalar = {
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requesterId?: boolean
    receiverId?: boolean
  }

  export type FriendshipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "createdAt" | "updatedAt" | "requesterId" | "receiverId", ExtArgs["result"]["friendship"]>
  export type FriendshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FriendshipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FriendshipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FriendshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Friendship"
    objects: {
      requester: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.FriendshipStatus
      createdAt: Date
      updatedAt: Date
      requesterId: string
      receiverId: string
    }, ExtArgs["result"]["friendship"]>
    composites: {}
  }

  type FriendshipGetPayload<S extends boolean | null | undefined | FriendshipDefaultArgs> = $Result.GetResult<Prisma.$FriendshipPayload, S>

  type FriendshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FriendshipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FriendshipCountAggregateInputType | true
    }

  export interface FriendshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Friendship'], meta: { name: 'Friendship' } }
    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FriendshipFindUniqueArgs>(args: SelectSubset<T, FriendshipFindUniqueArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Friendship that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(args: SelectSubset<T, FriendshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FriendshipFindFirstArgs>(args?: SelectSubset<T, FriendshipFindFirstArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(args?: SelectSubset<T, FriendshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FriendshipFindManyArgs>(args?: SelectSubset<T, FriendshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
     */
    create<T extends FriendshipCreateArgs>(args: SelectSubset<T, FriendshipCreateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Friendships.
     * @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FriendshipCreateManyArgs>(args?: SelectSubset<T, FriendshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Friendships and returns the data saved in the database.
     * @param {FriendshipCreateManyAndReturnArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Friendships and only return the `id`
     * const friendshipWithIdOnly = await prisma.friendship.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FriendshipCreateManyAndReturnArgs>(args?: SelectSubset<T, FriendshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
     */
    delete<T extends FriendshipDeleteArgs>(args: SelectSubset<T, FriendshipDeleteArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FriendshipUpdateArgs>(args: SelectSubset<T, FriendshipUpdateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FriendshipDeleteManyArgs>(args?: SelectSubset<T, FriendshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FriendshipUpdateManyArgs>(args: SelectSubset<T, FriendshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships and returns the data updated in the database.
     * @param {FriendshipUpdateManyAndReturnArgs} args - Arguments to update many Friendships.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Friendships and only return the `id`
     * const friendshipWithIdOnly = await prisma.friendship.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FriendshipUpdateManyAndReturnArgs>(args: SelectSubset<T, FriendshipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
     */
    upsert<T extends FriendshipUpsertArgs>(args: SelectSubset<T, FriendshipUpsertArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Friendship model
   */
  readonly fields: FriendshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FriendshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Friendship model
   */
  interface FriendshipFieldRefs {
    readonly id: FieldRef<"Friendship", 'String'>
    readonly status: FieldRef<"Friendship", 'FriendshipStatus'>
    readonly createdAt: FieldRef<"Friendship", 'DateTime'>
    readonly updatedAt: FieldRef<"Friendship", 'DateTime'>
    readonly requesterId: FieldRef<"Friendship", 'String'>
    readonly receiverId: FieldRef<"Friendship", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Friendship findUnique
   */
  export type FriendshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findUniqueOrThrow
   */
  export type FriendshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findFirst
   */
  export type FriendshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findFirstOrThrow
   */
  export type FriendshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship create
   */
  export type FriendshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to create a Friendship.
     */
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }

  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Friendship createManyAndReturn
   */
  export type FriendshipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to update a Friendship.
     */
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to update.
     */
    limit?: number
  }

  /**
   * Friendship updateManyAndReturn
   */
  export type FriendshipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     */
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     */
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }

  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter which Friendship to delete.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendships to delete
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to delete.
     */
    limit?: number
  }

  /**
   * Friendship without action
   */
  export type FriendshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
    netAmount: number | null
    feeAmount: number | null
    balanceBefore: number | null
    balanceAfter: number | null
    bonusBalanceBefore: number | null
    bonusBalanceAfter: number | null
    bonusAmount: number | null
    wageringRequirement: number | null
    wageringProgress: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
    netAmount: number | null
    feeAmount: number | null
    balanceBefore: number | null
    balanceAfter: number | null
    bonusBalanceBefore: number | null
    bonusBalanceAfter: number | null
    bonusAmount: number | null
    wageringRequirement: number | null
    wageringProgress: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    originatorUserId: string | null
    processedAt: Date | null
    receiverUserId: string | null
    walletId: string | null
    type: $Enums.TransactionType | null
    status: $Enums.TransactionStatus | null
    amount: number | null
    netAmount: number | null
    feeAmount: number | null
    productId: string | null
    currencyId: string | null
    balanceBefore: number | null
    balanceAfter: number | null
    bonusBalanceBefore: number | null
    bonusBalanceAfter: number | null
    bonusAmount: number | null
    wageringRequirement: number | null
    wageringProgress: number | null
    description: string | null
    provider: string | null
    providerTxId: string | null
    relatedGameId: string | null
    relatedRoundId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    originatorUserId: string | null
    processedAt: Date | null
    receiverUserId: string | null
    walletId: string | null
    type: $Enums.TransactionType | null
    status: $Enums.TransactionStatus | null
    amount: number | null
    netAmount: number | null
    feeAmount: number | null
    productId: string | null
    currencyId: string | null
    balanceBefore: number | null
    balanceAfter: number | null
    bonusBalanceBefore: number | null
    bonusBalanceAfter: number | null
    bonusAmount: number | null
    wageringRequirement: number | null
    wageringProgress: number | null
    description: string | null
    provider: string | null
    providerTxId: string | null
    relatedGameId: string | null
    relatedRoundId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    originatorUserId: number
    processedAt: number
    receiverUserId: number
    walletId: number
    type: number
    status: number
    amount: number
    netAmount: number
    feeAmount: number
    productId: number
    currencyId: number
    balanceBefore: number
    balanceAfter: number
    bonusBalanceBefore: number
    bonusBalanceAfter: number
    bonusAmount: number
    wageringRequirement: number
    wageringProgress: number
    description: number
    provider: number
    providerTxId: number
    relatedGameId: number
    relatedRoundId: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
    netAmount?: true
    feeAmount?: true
    balanceBefore?: true
    balanceAfter?: true
    bonusBalanceBefore?: true
    bonusBalanceAfter?: true
    bonusAmount?: true
    wageringRequirement?: true
    wageringProgress?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
    netAmount?: true
    feeAmount?: true
    balanceBefore?: true
    balanceAfter?: true
    bonusBalanceBefore?: true
    bonusBalanceAfter?: true
    bonusAmount?: true
    wageringRequirement?: true
    wageringProgress?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    originatorUserId?: true
    processedAt?: true
    receiverUserId?: true
    walletId?: true
    type?: true
    status?: true
    amount?: true
    netAmount?: true
    feeAmount?: true
    productId?: true
    currencyId?: true
    balanceBefore?: true
    balanceAfter?: true
    bonusBalanceBefore?: true
    bonusBalanceAfter?: true
    bonusAmount?: true
    wageringRequirement?: true
    wageringProgress?: true
    description?: true
    provider?: true
    providerTxId?: true
    relatedGameId?: true
    relatedRoundId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    originatorUserId?: true
    processedAt?: true
    receiverUserId?: true
    walletId?: true
    type?: true
    status?: true
    amount?: true
    netAmount?: true
    feeAmount?: true
    productId?: true
    currencyId?: true
    balanceBefore?: true
    balanceAfter?: true
    bonusBalanceBefore?: true
    bonusBalanceAfter?: true
    bonusAmount?: true
    wageringRequirement?: true
    wageringProgress?: true
    description?: true
    provider?: true
    providerTxId?: true
    relatedGameId?: true
    relatedRoundId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    originatorUserId?: true
    processedAt?: true
    receiverUserId?: true
    walletId?: true
    type?: true
    status?: true
    amount?: true
    netAmount?: true
    feeAmount?: true
    productId?: true
    currencyId?: true
    balanceBefore?: true
    balanceAfter?: true
    bonusBalanceBefore?: true
    bonusBalanceAfter?: true
    bonusAmount?: true
    wageringRequirement?: true
    wageringProgress?: true
    description?: true
    provider?: true
    providerTxId?: true
    relatedGameId?: true
    relatedRoundId?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    originatorUserId: string
    processedAt: Date | null
    receiverUserId: string | null
    walletId: string | null
    type: $Enums.TransactionType
    status: $Enums.TransactionStatus
    amount: number
    netAmount: number | null
    feeAmount: number | null
    productId: string | null
    currencyId: string
    balanceBefore: number | null
    balanceAfter: number | null
    bonusBalanceBefore: number | null
    bonusBalanceAfter: number | null
    bonusAmount: number | null
    wageringRequirement: number | null
    wageringProgress: number | null
    description: string | null
    provider: string | null
    providerTxId: string | null
    relatedGameId: string | null
    relatedRoundId: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originatorUserId?: boolean
    processedAt?: boolean
    receiverUserId?: boolean
    walletId?: boolean
    type?: boolean
    status?: boolean
    amount?: boolean
    netAmount?: boolean
    feeAmount?: boolean
    productId?: boolean
    currencyId?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    bonusBalanceBefore?: boolean
    bonusBalanceAfter?: boolean
    bonusAmount?: boolean
    wageringRequirement?: boolean
    wageringProgress?: boolean
    description?: boolean
    provider?: boolean
    providerTxId?: boolean
    relatedGameId?: boolean
    relatedRoundId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Transaction$receiverArgs<ExtArgs>
    wallet?: boolean | Transaction$walletArgs<ExtArgs>
    product?: boolean | Transaction$productArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    rebateGenerated?: boolean | Transaction$rebateGeneratedArgs<ExtArgs>
    Product?: boolean | Transaction$ProductArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originatorUserId?: boolean
    processedAt?: boolean
    receiverUserId?: boolean
    walletId?: boolean
    type?: boolean
    status?: boolean
    amount?: boolean
    netAmount?: boolean
    feeAmount?: boolean
    productId?: boolean
    currencyId?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    bonusBalanceBefore?: boolean
    bonusBalanceAfter?: boolean
    bonusAmount?: boolean
    wageringRequirement?: boolean
    wageringProgress?: boolean
    description?: boolean
    provider?: boolean
    providerTxId?: boolean
    relatedGameId?: boolean
    relatedRoundId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Transaction$receiverArgs<ExtArgs>
    wallet?: boolean | Transaction$walletArgs<ExtArgs>
    product?: boolean | Transaction$productArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originatorUserId?: boolean
    processedAt?: boolean
    receiverUserId?: boolean
    walletId?: boolean
    type?: boolean
    status?: boolean
    amount?: boolean
    netAmount?: boolean
    feeAmount?: boolean
    productId?: boolean
    currencyId?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    bonusBalanceBefore?: boolean
    bonusBalanceAfter?: boolean
    bonusAmount?: boolean
    wageringRequirement?: boolean
    wageringProgress?: boolean
    description?: boolean
    provider?: boolean
    providerTxId?: boolean
    relatedGameId?: boolean
    relatedRoundId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Transaction$receiverArgs<ExtArgs>
    wallet?: boolean | Transaction$walletArgs<ExtArgs>
    product?: boolean | Transaction$productArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    originatorUserId?: boolean
    processedAt?: boolean
    receiverUserId?: boolean
    walletId?: boolean
    type?: boolean
    status?: boolean
    amount?: boolean
    netAmount?: boolean
    feeAmount?: boolean
    productId?: boolean
    currencyId?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    bonusBalanceBefore?: boolean
    bonusBalanceAfter?: boolean
    bonusAmount?: boolean
    wageringRequirement?: boolean
    wageringProgress?: boolean
    description?: boolean
    provider?: boolean
    providerTxId?: boolean
    relatedGameId?: boolean
    relatedRoundId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "originatorUserId" | "processedAt" | "receiverUserId" | "walletId" | "type" | "status" | "amount" | "netAmount" | "feeAmount" | "productId" | "currencyId" | "balanceBefore" | "balanceAfter" | "bonusBalanceBefore" | "bonusBalanceAfter" | "bonusAmount" | "wageringRequirement" | "wageringProgress" | "description" | "provider" | "providerTxId" | "relatedGameId" | "relatedRoundId" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Transaction$receiverArgs<ExtArgs>
    wallet?: boolean | Transaction$walletArgs<ExtArgs>
    product?: boolean | Transaction$productArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    rebateGenerated?: boolean | Transaction$rebateGeneratedArgs<ExtArgs>
    Product?: boolean | Transaction$ProductArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Transaction$receiverArgs<ExtArgs>
    wallet?: boolean | Transaction$walletArgs<ExtArgs>
    product?: boolean | Transaction$productArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | Transaction$receiverArgs<ExtArgs>
    wallet?: boolean | Transaction$walletArgs<ExtArgs>
    product?: boolean | Transaction$productArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      originator: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs> | null
      wallet: Prisma.$WalletPayload<ExtArgs> | null
      product: Prisma.$ProductPayload<ExtArgs> | null
      currency: Prisma.$CurrencyPayload<ExtArgs>
      rebateGenerated: Prisma.$RebateTransactionPayload<ExtArgs> | null
      Product: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      originatorUserId: string
      processedAt: Date | null
      receiverUserId: string | null
      walletId: string | null
      type: $Enums.TransactionType
      status: $Enums.TransactionStatus
      amount: number
      netAmount: number | null
      feeAmount: number | null
      productId: string | null
      currencyId: string
      balanceBefore: number | null
      balanceAfter: number | null
      bonusBalanceBefore: number | null
      bonusBalanceAfter: number | null
      bonusAmount: number | null
      wageringRequirement: number | null
      wageringProgress: number | null
      description: string | null
      provider: string | null
      providerTxId: string | null
      relatedGameId: string | null
      relatedRoundId: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    originator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends Transaction$receiverArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$receiverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    wallet<T extends Transaction$walletArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$walletArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends Transaction$productArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    currency<T extends CurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyDefaultArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rebateGenerated<T extends Transaction$rebateGeneratedArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$rebateGeneratedArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Product<T extends Transaction$ProductArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$ProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly originatorUserId: FieldRef<"Transaction", 'String'>
    readonly processedAt: FieldRef<"Transaction", 'DateTime'>
    readonly receiverUserId: FieldRef<"Transaction", 'String'>
    readonly walletId: FieldRef<"Transaction", 'String'>
    readonly type: FieldRef<"Transaction", 'TransactionType'>
    readonly status: FieldRef<"Transaction", 'TransactionStatus'>
    readonly amount: FieldRef<"Transaction", 'Int'>
    readonly netAmount: FieldRef<"Transaction", 'Int'>
    readonly feeAmount: FieldRef<"Transaction", 'Int'>
    readonly productId: FieldRef<"Transaction", 'String'>
    readonly currencyId: FieldRef<"Transaction", 'String'>
    readonly balanceBefore: FieldRef<"Transaction", 'Int'>
    readonly balanceAfter: FieldRef<"Transaction", 'Int'>
    readonly bonusBalanceBefore: FieldRef<"Transaction", 'Int'>
    readonly bonusBalanceAfter: FieldRef<"Transaction", 'Int'>
    readonly bonusAmount: FieldRef<"Transaction", 'Int'>
    readonly wageringRequirement: FieldRef<"Transaction", 'Int'>
    readonly wageringProgress: FieldRef<"Transaction", 'Int'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly provider: FieldRef<"Transaction", 'String'>
    readonly providerTxId: FieldRef<"Transaction", 'String'>
    readonly relatedGameId: FieldRef<"Transaction", 'String'>
    readonly relatedRoundId: FieldRef<"Transaction", 'String'>
    readonly metadata: FieldRef<"Transaction", 'Json'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.receiver
   */
  export type Transaction$receiverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Transaction.wallet
   */
  export type Transaction$walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
  }

  /**
   * Transaction.product
   */
  export type Transaction$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * Transaction.rebateGenerated
   */
  export type Transaction$rebateGeneratedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    where?: RebateTransactionWhereInput
  }

  /**
   * Transaction.Product
   */
  export type Transaction$ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model GameLaunchLink
   */

  export type AggregateGameLaunchLink = {
    _count: GameLaunchLinkCountAggregateOutputType | null
    _min: GameLaunchLinkMinAggregateOutputType | null
    _max: GameLaunchLinkMaxAggregateOutputType | null
  }

  export type GameLaunchLinkMinAggregateOutputType = {
    id: string | null
    token_internal: string | null
    currency: string | null
    player_operator_id: string | null
    mode: string | null
    requestIp: string | null
    userAgent: string | null
    session_url: string | null
    state: string | null
    active: boolean | null
    expiresAt: Date | null
    token_original: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    gameId: string | null
    operatorId: string | null
  }

  export type GameLaunchLinkMaxAggregateOutputType = {
    id: string | null
    token_internal: string | null
    currency: string | null
    player_operator_id: string | null
    mode: string | null
    requestIp: string | null
    userAgent: string | null
    session_url: string | null
    state: string | null
    active: boolean | null
    expiresAt: Date | null
    token_original: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    gameId: string | null
    operatorId: string | null
  }

  export type GameLaunchLinkCountAggregateOutputType = {
    id: number
    token_internal: number
    currency: number
    player_operator_id: number
    mode: number
    meta: number
    requestIp: number
    userAgent: number
    session_url: number
    state: number
    active: number
    expiresAt: number
    extra_meta: number
    token_original: number
    createdAt: number
    updatedAt: number
    userId: number
    gameId: number
    operatorId: number
    _all: number
  }


  export type GameLaunchLinkMinAggregateInputType = {
    id?: true
    token_internal?: true
    currency?: true
    player_operator_id?: true
    mode?: true
    requestIp?: true
    userAgent?: true
    session_url?: true
    state?: true
    active?: true
    expiresAt?: true
    token_original?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    gameId?: true
    operatorId?: true
  }

  export type GameLaunchLinkMaxAggregateInputType = {
    id?: true
    token_internal?: true
    currency?: true
    player_operator_id?: true
    mode?: true
    requestIp?: true
    userAgent?: true
    session_url?: true
    state?: true
    active?: true
    expiresAt?: true
    token_original?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    gameId?: true
    operatorId?: true
  }

  export type GameLaunchLinkCountAggregateInputType = {
    id?: true
    token_internal?: true
    currency?: true
    player_operator_id?: true
    mode?: true
    meta?: true
    requestIp?: true
    userAgent?: true
    session_url?: true
    state?: true
    active?: true
    expiresAt?: true
    extra_meta?: true
    token_original?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    gameId?: true
    operatorId?: true
    _all?: true
  }

  export type GameLaunchLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameLaunchLink to aggregate.
     */
    where?: GameLaunchLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameLaunchLinks to fetch.
     */
    orderBy?: GameLaunchLinkOrderByWithRelationInput | GameLaunchLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameLaunchLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameLaunchLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameLaunchLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameLaunchLinks
    **/
    _count?: true | GameLaunchLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameLaunchLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameLaunchLinkMaxAggregateInputType
  }

  export type GetGameLaunchLinkAggregateType<T extends GameLaunchLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateGameLaunchLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameLaunchLink[P]>
      : GetScalarType<T[P], AggregateGameLaunchLink[P]>
  }




  export type GameLaunchLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameLaunchLinkWhereInput
    orderBy?: GameLaunchLinkOrderByWithAggregationInput | GameLaunchLinkOrderByWithAggregationInput[]
    by: GameLaunchLinkScalarFieldEnum[] | GameLaunchLinkScalarFieldEnum
    having?: GameLaunchLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameLaunchLinkCountAggregateInputType | true
    _min?: GameLaunchLinkMinAggregateInputType
    _max?: GameLaunchLinkMaxAggregateInputType
  }

  export type GameLaunchLinkGroupByOutputType = {
    id: string
    token_internal: string
    currency: string
    player_operator_id: string | null
    mode: string
    meta: JsonValue | null
    requestIp: string | null
    userAgent: string | null
    session_url: string | null
    state: string
    active: boolean
    expiresAt: Date | null
    extra_meta: JsonValue | null
    token_original: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    gameId: string
    operatorId: string
    _count: GameLaunchLinkCountAggregateOutputType | null
    _min: GameLaunchLinkMinAggregateOutputType | null
    _max: GameLaunchLinkMaxAggregateOutputType | null
  }

  type GetGameLaunchLinkGroupByPayload<T extends GameLaunchLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameLaunchLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameLaunchLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameLaunchLinkGroupByOutputType[P]>
            : GetScalarType<T[P], GameLaunchLinkGroupByOutputType[P]>
        }
      >
    >


  export type GameLaunchLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token_internal?: boolean
    currency?: boolean
    player_operator_id?: boolean
    mode?: boolean
    meta?: boolean
    requestIp?: boolean
    userAgent?: boolean
    session_url?: boolean
    state?: boolean
    active?: boolean
    expiresAt?: boolean
    extra_meta?: boolean
    token_original?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    gameId?: boolean
    operatorId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameLaunchLink"]>

  export type GameLaunchLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token_internal?: boolean
    currency?: boolean
    player_operator_id?: boolean
    mode?: boolean
    meta?: boolean
    requestIp?: boolean
    userAgent?: boolean
    session_url?: boolean
    state?: boolean
    active?: boolean
    expiresAt?: boolean
    extra_meta?: boolean
    token_original?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    gameId?: boolean
    operatorId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameLaunchLink"]>

  export type GameLaunchLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token_internal?: boolean
    currency?: boolean
    player_operator_id?: boolean
    mode?: boolean
    meta?: boolean
    requestIp?: boolean
    userAgent?: boolean
    session_url?: boolean
    state?: boolean
    active?: boolean
    expiresAt?: boolean
    extra_meta?: boolean
    token_original?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    gameId?: boolean
    operatorId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameLaunchLink"]>

  export type GameLaunchLinkSelectScalar = {
    id?: boolean
    token_internal?: boolean
    currency?: boolean
    player_operator_id?: boolean
    mode?: boolean
    meta?: boolean
    requestIp?: boolean
    userAgent?: boolean
    session_url?: boolean
    state?: boolean
    active?: boolean
    expiresAt?: boolean
    extra_meta?: boolean
    token_original?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    gameId?: boolean
    operatorId?: boolean
  }

  export type GameLaunchLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token_internal" | "currency" | "player_operator_id" | "mode" | "meta" | "requestIp" | "userAgent" | "session_url" | "state" | "active" | "expiresAt" | "extra_meta" | "token_original" | "createdAt" | "updatedAt" | "userId" | "gameId" | "operatorId", ExtArgs["result"]["gameLaunchLink"]>
  export type GameLaunchLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
  }
  export type GameLaunchLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
  }
  export type GameLaunchLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
  }

  export type $GameLaunchLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameLaunchLink"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
      operator: Prisma.$OperatorAccessPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token_internal: string
      currency: string
      player_operator_id: string | null
      mode: string
      meta: Prisma.JsonValue | null
      requestIp: string | null
      userAgent: string | null
      session_url: string | null
      state: string
      active: boolean
      expiresAt: Date | null
      extra_meta: Prisma.JsonValue | null
      token_original: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      gameId: string
      operatorId: string
    }, ExtArgs["result"]["gameLaunchLink"]>
    composites: {}
  }

  type GameLaunchLinkGetPayload<S extends boolean | null | undefined | GameLaunchLinkDefaultArgs> = $Result.GetResult<Prisma.$GameLaunchLinkPayload, S>

  type GameLaunchLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameLaunchLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameLaunchLinkCountAggregateInputType | true
    }

  export interface GameLaunchLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameLaunchLink'], meta: { name: 'GameLaunchLink' } }
    /**
     * Find zero or one GameLaunchLink that matches the filter.
     * @param {GameLaunchLinkFindUniqueArgs} args - Arguments to find a GameLaunchLink
     * @example
     * // Get one GameLaunchLink
     * const gameLaunchLink = await prisma.gameLaunchLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameLaunchLinkFindUniqueArgs>(args: SelectSubset<T, GameLaunchLinkFindUniqueArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameLaunchLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameLaunchLinkFindUniqueOrThrowArgs} args - Arguments to find a GameLaunchLink
     * @example
     * // Get one GameLaunchLink
     * const gameLaunchLink = await prisma.gameLaunchLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameLaunchLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, GameLaunchLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameLaunchLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameLaunchLinkFindFirstArgs} args - Arguments to find a GameLaunchLink
     * @example
     * // Get one GameLaunchLink
     * const gameLaunchLink = await prisma.gameLaunchLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameLaunchLinkFindFirstArgs>(args?: SelectSubset<T, GameLaunchLinkFindFirstArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameLaunchLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameLaunchLinkFindFirstOrThrowArgs} args - Arguments to find a GameLaunchLink
     * @example
     * // Get one GameLaunchLink
     * const gameLaunchLink = await prisma.gameLaunchLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameLaunchLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, GameLaunchLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameLaunchLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameLaunchLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameLaunchLinks
     * const gameLaunchLinks = await prisma.gameLaunchLink.findMany()
     * 
     * // Get first 10 GameLaunchLinks
     * const gameLaunchLinks = await prisma.gameLaunchLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameLaunchLinkWithIdOnly = await prisma.gameLaunchLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameLaunchLinkFindManyArgs>(args?: SelectSubset<T, GameLaunchLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameLaunchLink.
     * @param {GameLaunchLinkCreateArgs} args - Arguments to create a GameLaunchLink.
     * @example
     * // Create one GameLaunchLink
     * const GameLaunchLink = await prisma.gameLaunchLink.create({
     *   data: {
     *     // ... data to create a GameLaunchLink
     *   }
     * })
     * 
     */
    create<T extends GameLaunchLinkCreateArgs>(args: SelectSubset<T, GameLaunchLinkCreateArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameLaunchLinks.
     * @param {GameLaunchLinkCreateManyArgs} args - Arguments to create many GameLaunchLinks.
     * @example
     * // Create many GameLaunchLinks
     * const gameLaunchLink = await prisma.gameLaunchLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameLaunchLinkCreateManyArgs>(args?: SelectSubset<T, GameLaunchLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameLaunchLinks and returns the data saved in the database.
     * @param {GameLaunchLinkCreateManyAndReturnArgs} args - Arguments to create many GameLaunchLinks.
     * @example
     * // Create many GameLaunchLinks
     * const gameLaunchLink = await prisma.gameLaunchLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameLaunchLinks and only return the `id`
     * const gameLaunchLinkWithIdOnly = await prisma.gameLaunchLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameLaunchLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, GameLaunchLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameLaunchLink.
     * @param {GameLaunchLinkDeleteArgs} args - Arguments to delete one GameLaunchLink.
     * @example
     * // Delete one GameLaunchLink
     * const GameLaunchLink = await prisma.gameLaunchLink.delete({
     *   where: {
     *     // ... filter to delete one GameLaunchLink
     *   }
     * })
     * 
     */
    delete<T extends GameLaunchLinkDeleteArgs>(args: SelectSubset<T, GameLaunchLinkDeleteArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameLaunchLink.
     * @param {GameLaunchLinkUpdateArgs} args - Arguments to update one GameLaunchLink.
     * @example
     * // Update one GameLaunchLink
     * const gameLaunchLink = await prisma.gameLaunchLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameLaunchLinkUpdateArgs>(args: SelectSubset<T, GameLaunchLinkUpdateArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameLaunchLinks.
     * @param {GameLaunchLinkDeleteManyArgs} args - Arguments to filter GameLaunchLinks to delete.
     * @example
     * // Delete a few GameLaunchLinks
     * const { count } = await prisma.gameLaunchLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameLaunchLinkDeleteManyArgs>(args?: SelectSubset<T, GameLaunchLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameLaunchLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameLaunchLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameLaunchLinks
     * const gameLaunchLink = await prisma.gameLaunchLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameLaunchLinkUpdateManyArgs>(args: SelectSubset<T, GameLaunchLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameLaunchLinks and returns the data updated in the database.
     * @param {GameLaunchLinkUpdateManyAndReturnArgs} args - Arguments to update many GameLaunchLinks.
     * @example
     * // Update many GameLaunchLinks
     * const gameLaunchLink = await prisma.gameLaunchLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameLaunchLinks and only return the `id`
     * const gameLaunchLinkWithIdOnly = await prisma.gameLaunchLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameLaunchLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, GameLaunchLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameLaunchLink.
     * @param {GameLaunchLinkUpsertArgs} args - Arguments to update or create a GameLaunchLink.
     * @example
     * // Update or create a GameLaunchLink
     * const gameLaunchLink = await prisma.gameLaunchLink.upsert({
     *   create: {
     *     // ... data to create a GameLaunchLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameLaunchLink we want to update
     *   }
     * })
     */
    upsert<T extends GameLaunchLinkUpsertArgs>(args: SelectSubset<T, GameLaunchLinkUpsertArgs<ExtArgs>>): Prisma__GameLaunchLinkClient<$Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameLaunchLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameLaunchLinkCountArgs} args - Arguments to filter GameLaunchLinks to count.
     * @example
     * // Count the number of GameLaunchLinks
     * const count = await prisma.gameLaunchLink.count({
     *   where: {
     *     // ... the filter for the GameLaunchLinks we want to count
     *   }
     * })
    **/
    count<T extends GameLaunchLinkCountArgs>(
      args?: Subset<T, GameLaunchLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameLaunchLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameLaunchLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameLaunchLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameLaunchLinkAggregateArgs>(args: Subset<T, GameLaunchLinkAggregateArgs>): Prisma.PrismaPromise<GetGameLaunchLinkAggregateType<T>>

    /**
     * Group by GameLaunchLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameLaunchLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameLaunchLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameLaunchLinkGroupByArgs['orderBy'] }
        : { orderBy?: GameLaunchLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameLaunchLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameLaunchLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameLaunchLink model
   */
  readonly fields: GameLaunchLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameLaunchLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameLaunchLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    operator<T extends OperatorAccessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccessDefaultArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameLaunchLink model
   */
  interface GameLaunchLinkFieldRefs {
    readonly id: FieldRef<"GameLaunchLink", 'String'>
    readonly token_internal: FieldRef<"GameLaunchLink", 'String'>
    readonly currency: FieldRef<"GameLaunchLink", 'String'>
    readonly player_operator_id: FieldRef<"GameLaunchLink", 'String'>
    readonly mode: FieldRef<"GameLaunchLink", 'String'>
    readonly meta: FieldRef<"GameLaunchLink", 'Json'>
    readonly requestIp: FieldRef<"GameLaunchLink", 'String'>
    readonly userAgent: FieldRef<"GameLaunchLink", 'String'>
    readonly session_url: FieldRef<"GameLaunchLink", 'String'>
    readonly state: FieldRef<"GameLaunchLink", 'String'>
    readonly active: FieldRef<"GameLaunchLink", 'Boolean'>
    readonly expiresAt: FieldRef<"GameLaunchLink", 'DateTime'>
    readonly extra_meta: FieldRef<"GameLaunchLink", 'Json'>
    readonly token_original: FieldRef<"GameLaunchLink", 'String'>
    readonly createdAt: FieldRef<"GameLaunchLink", 'DateTime'>
    readonly updatedAt: FieldRef<"GameLaunchLink", 'DateTime'>
    readonly userId: FieldRef<"GameLaunchLink", 'String'>
    readonly gameId: FieldRef<"GameLaunchLink", 'String'>
    readonly operatorId: FieldRef<"GameLaunchLink", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameLaunchLink findUnique
   */
  export type GameLaunchLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * Filter, which GameLaunchLink to fetch.
     */
    where: GameLaunchLinkWhereUniqueInput
  }

  /**
   * GameLaunchLink findUniqueOrThrow
   */
  export type GameLaunchLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * Filter, which GameLaunchLink to fetch.
     */
    where: GameLaunchLinkWhereUniqueInput
  }

  /**
   * GameLaunchLink findFirst
   */
  export type GameLaunchLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * Filter, which GameLaunchLink to fetch.
     */
    where?: GameLaunchLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameLaunchLinks to fetch.
     */
    orderBy?: GameLaunchLinkOrderByWithRelationInput | GameLaunchLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameLaunchLinks.
     */
    cursor?: GameLaunchLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameLaunchLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameLaunchLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameLaunchLinks.
     */
    distinct?: GameLaunchLinkScalarFieldEnum | GameLaunchLinkScalarFieldEnum[]
  }

  /**
   * GameLaunchLink findFirstOrThrow
   */
  export type GameLaunchLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * Filter, which GameLaunchLink to fetch.
     */
    where?: GameLaunchLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameLaunchLinks to fetch.
     */
    orderBy?: GameLaunchLinkOrderByWithRelationInput | GameLaunchLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameLaunchLinks.
     */
    cursor?: GameLaunchLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameLaunchLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameLaunchLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameLaunchLinks.
     */
    distinct?: GameLaunchLinkScalarFieldEnum | GameLaunchLinkScalarFieldEnum[]
  }

  /**
   * GameLaunchLink findMany
   */
  export type GameLaunchLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * Filter, which GameLaunchLinks to fetch.
     */
    where?: GameLaunchLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameLaunchLinks to fetch.
     */
    orderBy?: GameLaunchLinkOrderByWithRelationInput | GameLaunchLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameLaunchLinks.
     */
    cursor?: GameLaunchLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameLaunchLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameLaunchLinks.
     */
    skip?: number
    distinct?: GameLaunchLinkScalarFieldEnum | GameLaunchLinkScalarFieldEnum[]
  }

  /**
   * GameLaunchLink create
   */
  export type GameLaunchLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a GameLaunchLink.
     */
    data: XOR<GameLaunchLinkCreateInput, GameLaunchLinkUncheckedCreateInput>
  }

  /**
   * GameLaunchLink createMany
   */
  export type GameLaunchLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameLaunchLinks.
     */
    data: GameLaunchLinkCreateManyInput | GameLaunchLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameLaunchLink createManyAndReturn
   */
  export type GameLaunchLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * The data used to create many GameLaunchLinks.
     */
    data: GameLaunchLinkCreateManyInput | GameLaunchLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameLaunchLink update
   */
  export type GameLaunchLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a GameLaunchLink.
     */
    data: XOR<GameLaunchLinkUpdateInput, GameLaunchLinkUncheckedUpdateInput>
    /**
     * Choose, which GameLaunchLink to update.
     */
    where: GameLaunchLinkWhereUniqueInput
  }

  /**
   * GameLaunchLink updateMany
   */
  export type GameLaunchLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameLaunchLinks.
     */
    data: XOR<GameLaunchLinkUpdateManyMutationInput, GameLaunchLinkUncheckedUpdateManyInput>
    /**
     * Filter which GameLaunchLinks to update
     */
    where?: GameLaunchLinkWhereInput
    /**
     * Limit how many GameLaunchLinks to update.
     */
    limit?: number
  }

  /**
   * GameLaunchLink updateManyAndReturn
   */
  export type GameLaunchLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * The data used to update GameLaunchLinks.
     */
    data: XOR<GameLaunchLinkUpdateManyMutationInput, GameLaunchLinkUncheckedUpdateManyInput>
    /**
     * Filter which GameLaunchLinks to update
     */
    where?: GameLaunchLinkWhereInput
    /**
     * Limit how many GameLaunchLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameLaunchLink upsert
   */
  export type GameLaunchLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the GameLaunchLink to update in case it exists.
     */
    where: GameLaunchLinkWhereUniqueInput
    /**
     * In case the GameLaunchLink found by the `where` argument doesn't exist, create a new GameLaunchLink with this data.
     */
    create: XOR<GameLaunchLinkCreateInput, GameLaunchLinkUncheckedCreateInput>
    /**
     * In case the GameLaunchLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameLaunchLinkUpdateInput, GameLaunchLinkUncheckedUpdateInput>
  }

  /**
   * GameLaunchLink delete
   */
  export type GameLaunchLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
    /**
     * Filter which GameLaunchLink to delete.
     */
    where: GameLaunchLinkWhereUniqueInput
  }

  /**
   * GameLaunchLink deleteMany
   */
  export type GameLaunchLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameLaunchLinks to delete
     */
    where?: GameLaunchLinkWhereInput
    /**
     * Limit how many GameLaunchLinks to delete.
     */
    limit?: number
  }

  /**
   * GameLaunchLink without action
   */
  export type GameLaunchLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameLaunchLink
     */
    select?: GameLaunchLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameLaunchLink
     */
    omit?: GameLaunchLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameLaunchLinkInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    bonusTotalInCredits: number | null
    priceInCents: number | null
    amountToReceiveInCredits: number | null
    bestValue: number | null
    discountInCents: number | null
    bonusSpins: number | null
    totalDiscountInCents: number | null
  }

  export type ProductSumAggregateOutputType = {
    bonusTotalInCredits: number | null
    priceInCents: number | null
    amountToReceiveInCredits: number | null
    bestValue: number | null
    discountInCents: number | null
    bonusSpins: number | null
    totalDiscountInCents: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    url: string | null
    iconUrl: string | null
    productType: string | null
    bonusCode: string | null
    bonusTotalInCredits: number | null
    isActive: boolean | null
    currencyId: string | null
    priceInCents: number | null
    amountToReceiveInCredits: number | null
    bestValue: number | null
    discountInCents: number | null
    bonusSpins: number | null
    isPromo: boolean | null
    totalDiscountInCents: number | null
    shopId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    transactionId: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    url: string | null
    iconUrl: string | null
    productType: string | null
    bonusCode: string | null
    bonusTotalInCredits: number | null
    isActive: boolean | null
    currencyId: string | null
    priceInCents: number | null
    amountToReceiveInCredits: number | null
    bestValue: number | null
    discountInCents: number | null
    bonusSpins: number | null
    isPromo: boolean | null
    totalDiscountInCents: number | null
    shopId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    transactionId: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    title: number
    description: number
    url: number
    iconUrl: number
    productType: number
    bonusCode: number
    bonusTotalInCredits: number
    isActive: number
    currencyId: number
    priceInCents: number
    amountToReceiveInCredits: number
    bestValue: number
    discountInCents: number
    bonusSpins: number
    isPromo: number
    totalDiscountInCents: number
    shopId: number
    createdAt: number
    updatedAt: number
    transactionId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    bonusTotalInCredits?: true
    priceInCents?: true
    amountToReceiveInCredits?: true
    bestValue?: true
    discountInCents?: true
    bonusSpins?: true
    totalDiscountInCents?: true
  }

  export type ProductSumAggregateInputType = {
    bonusTotalInCredits?: true
    priceInCents?: true
    amountToReceiveInCredits?: true
    bestValue?: true
    discountInCents?: true
    bonusSpins?: true
    totalDiscountInCents?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    url?: true
    iconUrl?: true
    productType?: true
    bonusCode?: true
    bonusTotalInCredits?: true
    isActive?: true
    currencyId?: true
    priceInCents?: true
    amountToReceiveInCredits?: true
    bestValue?: true
    discountInCents?: true
    bonusSpins?: true
    isPromo?: true
    totalDiscountInCents?: true
    shopId?: true
    createdAt?: true
    updatedAt?: true
    transactionId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    url?: true
    iconUrl?: true
    productType?: true
    bonusCode?: true
    bonusTotalInCredits?: true
    isActive?: true
    currencyId?: true
    priceInCents?: true
    amountToReceiveInCredits?: true
    bestValue?: true
    discountInCents?: true
    bonusSpins?: true
    isPromo?: true
    totalDiscountInCents?: true
    shopId?: true
    createdAt?: true
    updatedAt?: true
    transactionId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    url?: true
    iconUrl?: true
    productType?: true
    bonusCode?: true
    bonusTotalInCredits?: true
    isActive?: true
    currencyId?: true
    priceInCents?: true
    amountToReceiveInCredits?: true
    bestValue?: true
    discountInCents?: true
    bonusSpins?: true
    isPromo?: true
    totalDiscountInCents?: true
    shopId?: true
    createdAt?: true
    updatedAt?: true
    transactionId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    title: string
    description: string
    url: string
    iconUrl: string | null
    productType: string
    bonusCode: string | null
    bonusTotalInCredits: number
    isActive: boolean | null
    currencyId: string
    priceInCents: number
    amountToReceiveInCredits: number
    bestValue: number
    discountInCents: number
    bonusSpins: number
    isPromo: boolean | null
    totalDiscountInCents: number
    shopId: string | null
    createdAt: Date
    updatedAt: Date | null
    transactionId: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    url?: boolean
    iconUrl?: boolean
    productType?: boolean
    bonusCode?: boolean
    bonusTotalInCredits?: boolean
    isActive?: boolean
    currencyId?: boolean
    priceInCents?: boolean
    amountToReceiveInCredits?: boolean
    bestValue?: boolean
    discountInCents?: boolean
    bonusSpins?: boolean
    isPromo?: boolean
    totalDiscountInCents?: boolean
    shopId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactionId?: boolean
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    operator?: boolean | Product$operatorArgs<ExtArgs>
    transactions?: boolean | Product$transactionsArgs<ExtArgs>
    Transaction?: boolean | Product$TransactionArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    url?: boolean
    iconUrl?: boolean
    productType?: boolean
    bonusCode?: boolean
    bonusTotalInCredits?: boolean
    isActive?: boolean
    currencyId?: boolean
    priceInCents?: boolean
    amountToReceiveInCredits?: boolean
    bestValue?: boolean
    discountInCents?: boolean
    bonusSpins?: boolean
    isPromo?: boolean
    totalDiscountInCents?: boolean
    shopId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactionId?: boolean
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    operator?: boolean | Product$operatorArgs<ExtArgs>
    Transaction?: boolean | Product$TransactionArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    url?: boolean
    iconUrl?: boolean
    productType?: boolean
    bonusCode?: boolean
    bonusTotalInCredits?: boolean
    isActive?: boolean
    currencyId?: boolean
    priceInCents?: boolean
    amountToReceiveInCredits?: boolean
    bestValue?: boolean
    discountInCents?: boolean
    bonusSpins?: boolean
    isPromo?: boolean
    totalDiscountInCents?: boolean
    shopId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactionId?: boolean
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    operator?: boolean | Product$operatorArgs<ExtArgs>
    Transaction?: boolean | Product$TransactionArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    url?: boolean
    iconUrl?: boolean
    productType?: boolean
    bonusCode?: boolean
    bonusTotalInCredits?: boolean
    isActive?: boolean
    currencyId?: boolean
    priceInCents?: boolean
    amountToReceiveInCredits?: boolean
    bestValue?: boolean
    discountInCents?: boolean
    bonusSpins?: boolean
    isPromo?: boolean
    totalDiscountInCents?: boolean
    shopId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactionId?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "url" | "iconUrl" | "productType" | "bonusCode" | "bonusTotalInCredits" | "isActive" | "currencyId" | "priceInCents" | "amountToReceiveInCredits" | "bestValue" | "discountInCents" | "bonusSpins" | "isPromo" | "totalDiscountInCents" | "shopId" | "createdAt" | "updatedAt" | "transactionId", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    operator?: boolean | Product$operatorArgs<ExtArgs>
    transactions?: boolean | Product$transactionsArgs<ExtArgs>
    Transaction?: boolean | Product$TransactionArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    operator?: boolean | Product$operatorArgs<ExtArgs>
    Transaction?: boolean | Product$TransactionArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    operator?: boolean | Product$operatorArgs<ExtArgs>
    Transaction?: boolean | Product$TransactionArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      currency: Prisma.$CurrencyPayload<ExtArgs>
      operator: Prisma.$OperatorAccessPayload<ExtArgs> | null
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      Transaction: Prisma.$TransactionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      url: string
      iconUrl: string | null
      productType: string
      bonusCode: string | null
      bonusTotalInCredits: number
      isActive: boolean | null
      currencyId: string
      priceInCents: number
      amountToReceiveInCredits: number
      bestValue: number
      discountInCents: number
      bonusSpins: number
      isPromo: boolean | null
      totalDiscountInCents: number
      shopId: string | null
      createdAt: Date
      updatedAt: Date | null
      transactionId: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    currency<T extends CurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyDefaultArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    operator<T extends Product$operatorArgs<ExtArgs> = {}>(args?: Subset<T, Product$operatorArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Product$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Product$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Transaction<T extends Product$TransactionArgs<ExtArgs> = {}>(args?: Subset<T, Product$TransactionArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly title: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly url: FieldRef<"Product", 'String'>
    readonly iconUrl: FieldRef<"Product", 'String'>
    readonly productType: FieldRef<"Product", 'String'>
    readonly bonusCode: FieldRef<"Product", 'String'>
    readonly bonusTotalInCredits: FieldRef<"Product", 'Int'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
    readonly currencyId: FieldRef<"Product", 'String'>
    readonly priceInCents: FieldRef<"Product", 'Int'>
    readonly amountToReceiveInCredits: FieldRef<"Product", 'Int'>
    readonly bestValue: FieldRef<"Product", 'Int'>
    readonly discountInCents: FieldRef<"Product", 'Int'>
    readonly bonusSpins: FieldRef<"Product", 'Int'>
    readonly isPromo: FieldRef<"Product", 'Boolean'>
    readonly totalDiscountInCents: FieldRef<"Product", 'Int'>
    readonly shopId: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly transactionId: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.operator
   */
  export type Product$operatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorAccess
     */
    select?: OperatorAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorAccess
     */
    omit?: OperatorAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorAccessInclude<ExtArgs> | null
    where?: OperatorAccessWhereInput
  }

  /**
   * Product.transactions
   */
  export type Product$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Product.Transaction
   */
  export type Product$TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model EventLog
   */

  export type AggregateEventLog = {
    _count: EventLogCountAggregateOutputType | null
    _min: EventLogMinAggregateOutputType | null
    _max: EventLogMaxAggregateOutputType | null
  }

  export type EventLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    targetType: string | null
    targetId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    actorId: string | null
  }

  export type EventLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    targetType: string | null
    targetId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    actorId: string | null
  }

  export type EventLogCountAggregateOutputType = {
    id: number
    action: number
    targetType: number
    targetId: number
    data: number
    ipAddress: number
    userAgent: number
    timestamp: number
    createdAt: number
    updatedAt: number
    actorId: number
    _all: number
  }


  export type EventLogMinAggregateInputType = {
    id?: true
    action?: true
    targetType?: true
    targetId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    actorId?: true
  }

  export type EventLogMaxAggregateInputType = {
    id?: true
    action?: true
    targetType?: true
    targetId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    actorId?: true
  }

  export type EventLogCountAggregateInputType = {
    id?: true
    action?: true
    targetType?: true
    targetId?: true
    data?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    actorId?: true
    _all?: true
  }

  export type EventLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventLog to aggregate.
     */
    where?: EventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventLogs to fetch.
     */
    orderBy?: EventLogOrderByWithRelationInput | EventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventLogs
    **/
    _count?: true | EventLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventLogMaxAggregateInputType
  }

  export type GetEventLogAggregateType<T extends EventLogAggregateArgs> = {
        [P in keyof T & keyof AggregateEventLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventLog[P]>
      : GetScalarType<T[P], AggregateEventLog[P]>
  }




  export type EventLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventLogWhereInput
    orderBy?: EventLogOrderByWithAggregationInput | EventLogOrderByWithAggregationInput[]
    by: EventLogScalarFieldEnum[] | EventLogScalarFieldEnum
    having?: EventLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventLogCountAggregateInputType | true
    _min?: EventLogMinAggregateInputType
    _max?: EventLogMaxAggregateInputType
  }

  export type EventLogGroupByOutputType = {
    id: string
    action: string
    targetType: string | null
    targetId: string | null
    data: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date
    createdAt: Date
    updatedAt: Date
    actorId: string | null
    _count: EventLogCountAggregateOutputType | null
    _min: EventLogMinAggregateOutputType | null
    _max: EventLogMaxAggregateOutputType | null
  }

  type GetEventLogGroupByPayload<T extends EventLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventLogGroupByOutputType[P]>
            : GetScalarType<T[P], EventLogGroupByOutputType[P]>
        }
      >
    >


  export type EventLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    targetType?: boolean
    targetId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    actorId?: boolean
    actor?: boolean | EventLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["eventLog"]>

  export type EventLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    targetType?: boolean
    targetId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    actorId?: boolean
    actor?: boolean | EventLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["eventLog"]>

  export type EventLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    targetType?: boolean
    targetId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    actorId?: boolean
    actor?: boolean | EventLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["eventLog"]>

  export type EventLogSelectScalar = {
    id?: boolean
    action?: boolean
    targetType?: boolean
    targetId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    actorId?: boolean
  }

  export type EventLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "targetType" | "targetId" | "data" | "ipAddress" | "userAgent" | "timestamp" | "createdAt" | "updatedAt" | "actorId", ExtArgs["result"]["eventLog"]>
  export type EventLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | EventLog$actorArgs<ExtArgs>
  }
  export type EventLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | EventLog$actorArgs<ExtArgs>
  }
  export type EventLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | EventLog$actorArgs<ExtArgs>
  }

  export type $EventLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventLog"
    objects: {
      actor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      targetType: string | null
      targetId: string | null
      data: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      timestamp: Date
      createdAt: Date
      updatedAt: Date
      actorId: string | null
    }, ExtArgs["result"]["eventLog"]>
    composites: {}
  }

  type EventLogGetPayload<S extends boolean | null | undefined | EventLogDefaultArgs> = $Result.GetResult<Prisma.$EventLogPayload, S>

  type EventLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventLogCountAggregateInputType | true
    }

  export interface EventLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventLog'], meta: { name: 'EventLog' } }
    /**
     * Find zero or one EventLog that matches the filter.
     * @param {EventLogFindUniqueArgs} args - Arguments to find a EventLog
     * @example
     * // Get one EventLog
     * const eventLog = await prisma.eventLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventLogFindUniqueArgs>(args: SelectSubset<T, EventLogFindUniqueArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventLogFindUniqueOrThrowArgs} args - Arguments to find a EventLog
     * @example
     * // Get one EventLog
     * const eventLog = await prisma.eventLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventLogFindUniqueOrThrowArgs>(args: SelectSubset<T, EventLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventLogFindFirstArgs} args - Arguments to find a EventLog
     * @example
     * // Get one EventLog
     * const eventLog = await prisma.eventLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventLogFindFirstArgs>(args?: SelectSubset<T, EventLogFindFirstArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventLogFindFirstOrThrowArgs} args - Arguments to find a EventLog
     * @example
     * // Get one EventLog
     * const eventLog = await prisma.eventLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventLogFindFirstOrThrowArgs>(args?: SelectSubset<T, EventLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventLogs
     * const eventLogs = await prisma.eventLog.findMany()
     * 
     * // Get first 10 EventLogs
     * const eventLogs = await prisma.eventLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventLogWithIdOnly = await prisma.eventLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventLogFindManyArgs>(args?: SelectSubset<T, EventLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventLog.
     * @param {EventLogCreateArgs} args - Arguments to create a EventLog.
     * @example
     * // Create one EventLog
     * const EventLog = await prisma.eventLog.create({
     *   data: {
     *     // ... data to create a EventLog
     *   }
     * })
     * 
     */
    create<T extends EventLogCreateArgs>(args: SelectSubset<T, EventLogCreateArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventLogs.
     * @param {EventLogCreateManyArgs} args - Arguments to create many EventLogs.
     * @example
     * // Create many EventLogs
     * const eventLog = await prisma.eventLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventLogCreateManyArgs>(args?: SelectSubset<T, EventLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventLogs and returns the data saved in the database.
     * @param {EventLogCreateManyAndReturnArgs} args - Arguments to create many EventLogs.
     * @example
     * // Create many EventLogs
     * const eventLog = await prisma.eventLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventLogs and only return the `id`
     * const eventLogWithIdOnly = await prisma.eventLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventLogCreateManyAndReturnArgs>(args?: SelectSubset<T, EventLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventLog.
     * @param {EventLogDeleteArgs} args - Arguments to delete one EventLog.
     * @example
     * // Delete one EventLog
     * const EventLog = await prisma.eventLog.delete({
     *   where: {
     *     // ... filter to delete one EventLog
     *   }
     * })
     * 
     */
    delete<T extends EventLogDeleteArgs>(args: SelectSubset<T, EventLogDeleteArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventLog.
     * @param {EventLogUpdateArgs} args - Arguments to update one EventLog.
     * @example
     * // Update one EventLog
     * const eventLog = await prisma.eventLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventLogUpdateArgs>(args: SelectSubset<T, EventLogUpdateArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventLogs.
     * @param {EventLogDeleteManyArgs} args - Arguments to filter EventLogs to delete.
     * @example
     * // Delete a few EventLogs
     * const { count } = await prisma.eventLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventLogDeleteManyArgs>(args?: SelectSubset<T, EventLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventLogs
     * const eventLog = await prisma.eventLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventLogUpdateManyArgs>(args: SelectSubset<T, EventLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventLogs and returns the data updated in the database.
     * @param {EventLogUpdateManyAndReturnArgs} args - Arguments to update many EventLogs.
     * @example
     * // Update many EventLogs
     * const eventLog = await prisma.eventLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventLogs and only return the `id`
     * const eventLogWithIdOnly = await prisma.eventLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventLogUpdateManyAndReturnArgs>(args: SelectSubset<T, EventLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventLog.
     * @param {EventLogUpsertArgs} args - Arguments to update or create a EventLog.
     * @example
     * // Update or create a EventLog
     * const eventLog = await prisma.eventLog.upsert({
     *   create: {
     *     // ... data to create a EventLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventLog we want to update
     *   }
     * })
     */
    upsert<T extends EventLogUpsertArgs>(args: SelectSubset<T, EventLogUpsertArgs<ExtArgs>>): Prisma__EventLogClient<$Result.GetResult<Prisma.$EventLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventLogCountArgs} args - Arguments to filter EventLogs to count.
     * @example
     * // Count the number of EventLogs
     * const count = await prisma.eventLog.count({
     *   where: {
     *     // ... the filter for the EventLogs we want to count
     *   }
     * })
    **/
    count<T extends EventLogCountArgs>(
      args?: Subset<T, EventLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventLogAggregateArgs>(args: Subset<T, EventLogAggregateArgs>): Prisma.PrismaPromise<GetEventLogAggregateType<T>>

    /**
     * Group by EventLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventLogGroupByArgs['orderBy'] }
        : { orderBy?: EventLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventLog model
   */
  readonly fields: EventLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actor<T extends EventLog$actorArgs<ExtArgs> = {}>(args?: Subset<T, EventLog$actorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventLog model
   */
  interface EventLogFieldRefs {
    readonly id: FieldRef<"EventLog", 'String'>
    readonly action: FieldRef<"EventLog", 'String'>
    readonly targetType: FieldRef<"EventLog", 'String'>
    readonly targetId: FieldRef<"EventLog", 'String'>
    readonly data: FieldRef<"EventLog", 'Json'>
    readonly ipAddress: FieldRef<"EventLog", 'String'>
    readonly userAgent: FieldRef<"EventLog", 'String'>
    readonly timestamp: FieldRef<"EventLog", 'DateTime'>
    readonly createdAt: FieldRef<"EventLog", 'DateTime'>
    readonly updatedAt: FieldRef<"EventLog", 'DateTime'>
    readonly actorId: FieldRef<"EventLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventLog findUnique
   */
  export type EventLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * Filter, which EventLog to fetch.
     */
    where: EventLogWhereUniqueInput
  }

  /**
   * EventLog findUniqueOrThrow
   */
  export type EventLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * Filter, which EventLog to fetch.
     */
    where: EventLogWhereUniqueInput
  }

  /**
   * EventLog findFirst
   */
  export type EventLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * Filter, which EventLog to fetch.
     */
    where?: EventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventLogs to fetch.
     */
    orderBy?: EventLogOrderByWithRelationInput | EventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventLogs.
     */
    cursor?: EventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventLogs.
     */
    distinct?: EventLogScalarFieldEnum | EventLogScalarFieldEnum[]
  }

  /**
   * EventLog findFirstOrThrow
   */
  export type EventLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * Filter, which EventLog to fetch.
     */
    where?: EventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventLogs to fetch.
     */
    orderBy?: EventLogOrderByWithRelationInput | EventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventLogs.
     */
    cursor?: EventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventLogs.
     */
    distinct?: EventLogScalarFieldEnum | EventLogScalarFieldEnum[]
  }

  /**
   * EventLog findMany
   */
  export type EventLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * Filter, which EventLogs to fetch.
     */
    where?: EventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventLogs to fetch.
     */
    orderBy?: EventLogOrderByWithRelationInput | EventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventLogs.
     */
    cursor?: EventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventLogs.
     */
    skip?: number
    distinct?: EventLogScalarFieldEnum | EventLogScalarFieldEnum[]
  }

  /**
   * EventLog create
   */
  export type EventLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * The data needed to create a EventLog.
     */
    data: XOR<EventLogCreateInput, EventLogUncheckedCreateInput>
  }

  /**
   * EventLog createMany
   */
  export type EventLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventLogs.
     */
    data: EventLogCreateManyInput | EventLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventLog createManyAndReturn
   */
  export type EventLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * The data used to create many EventLogs.
     */
    data: EventLogCreateManyInput | EventLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventLog update
   */
  export type EventLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * The data needed to update a EventLog.
     */
    data: XOR<EventLogUpdateInput, EventLogUncheckedUpdateInput>
    /**
     * Choose, which EventLog to update.
     */
    where: EventLogWhereUniqueInput
  }

  /**
   * EventLog updateMany
   */
  export type EventLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventLogs.
     */
    data: XOR<EventLogUpdateManyMutationInput, EventLogUncheckedUpdateManyInput>
    /**
     * Filter which EventLogs to update
     */
    where?: EventLogWhereInput
    /**
     * Limit how many EventLogs to update.
     */
    limit?: number
  }

  /**
   * EventLog updateManyAndReturn
   */
  export type EventLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * The data used to update EventLogs.
     */
    data: XOR<EventLogUpdateManyMutationInput, EventLogUncheckedUpdateManyInput>
    /**
     * Filter which EventLogs to update
     */
    where?: EventLogWhereInput
    /**
     * Limit how many EventLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventLog upsert
   */
  export type EventLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * The filter to search for the EventLog to update in case it exists.
     */
    where: EventLogWhereUniqueInput
    /**
     * In case the EventLog found by the `where` argument doesn't exist, create a new EventLog with this data.
     */
    create: XOR<EventLogCreateInput, EventLogUncheckedCreateInput>
    /**
     * In case the EventLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventLogUpdateInput, EventLogUncheckedUpdateInput>
  }

  /**
   * EventLog delete
   */
  export type EventLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
    /**
     * Filter which EventLog to delete.
     */
    where: EventLogWhereUniqueInput
  }

  /**
   * EventLog deleteMany
   */
  export type EventLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventLogs to delete
     */
    where?: EventLogWhereInput
    /**
     * Limit how many EventLogs to delete.
     */
    limit?: number
  }

  /**
   * EventLog.actor
   */
  export type EventLog$actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * EventLog without action
   */
  export type EventLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventLog
     */
    select?: EventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventLog
     */
    omit?: EventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventLogInclude<ExtArgs> | null
  }


  /**
   * Model OperatorInvitation
   */

  export type AggregateOperatorInvitation = {
    _count: OperatorInvitationCountAggregateOutputType | null
    _min: OperatorInvitationMinAggregateOutputType | null
    _max: OperatorInvitationMaxAggregateOutputType | null
  }

  export type OperatorInvitationMinAggregateOutputType = {
    id: string | null
    operatorId: string | null
    email: string | null
    role: $Enums.Role | null
    token: string | null
    expiresAt: Date | null
    acceptedAt: Date | null
    invitedById: string | null
  }

  export type OperatorInvitationMaxAggregateOutputType = {
    id: string | null
    operatorId: string | null
    email: string | null
    role: $Enums.Role | null
    token: string | null
    expiresAt: Date | null
    acceptedAt: Date | null
    invitedById: string | null
  }

  export type OperatorInvitationCountAggregateOutputType = {
    id: number
    operatorId: number
    email: number
    role: number
    token: number
    expiresAt: number
    acceptedAt: number
    invitedById: number
    _all: number
  }


  export type OperatorInvitationMinAggregateInputType = {
    id?: true
    operatorId?: true
    email?: true
    role?: true
    token?: true
    expiresAt?: true
    acceptedAt?: true
    invitedById?: true
  }

  export type OperatorInvitationMaxAggregateInputType = {
    id?: true
    operatorId?: true
    email?: true
    role?: true
    token?: true
    expiresAt?: true
    acceptedAt?: true
    invitedById?: true
  }

  export type OperatorInvitationCountAggregateInputType = {
    id?: true
    operatorId?: true
    email?: true
    role?: true
    token?: true
    expiresAt?: true
    acceptedAt?: true
    invitedById?: true
    _all?: true
  }

  export type OperatorInvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperatorInvitation to aggregate.
     */
    where?: OperatorInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorInvitations to fetch.
     */
    orderBy?: OperatorInvitationOrderByWithRelationInput | OperatorInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperatorInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OperatorInvitations
    **/
    _count?: true | OperatorInvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperatorInvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperatorInvitationMaxAggregateInputType
  }

  export type GetOperatorInvitationAggregateType<T extends OperatorInvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateOperatorInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperatorInvitation[P]>
      : GetScalarType<T[P], AggregateOperatorInvitation[P]>
  }




  export type OperatorInvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorInvitationWhereInput
    orderBy?: OperatorInvitationOrderByWithAggregationInput | OperatorInvitationOrderByWithAggregationInput[]
    by: OperatorInvitationScalarFieldEnum[] | OperatorInvitationScalarFieldEnum
    having?: OperatorInvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperatorInvitationCountAggregateInputType | true
    _min?: OperatorInvitationMinAggregateInputType
    _max?: OperatorInvitationMaxAggregateInputType
  }

  export type OperatorInvitationGroupByOutputType = {
    id: string
    operatorId: string
    email: string
    role: $Enums.Role
    token: string
    expiresAt: Date
    acceptedAt: Date | null
    invitedById: string
    _count: OperatorInvitationCountAggregateOutputType | null
    _min: OperatorInvitationMinAggregateOutputType | null
    _max: OperatorInvitationMaxAggregateOutputType | null
  }

  type GetOperatorInvitationGroupByPayload<T extends OperatorInvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperatorInvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperatorInvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperatorInvitationGroupByOutputType[P]>
            : GetScalarType<T[P], OperatorInvitationGroupByOutputType[P]>
        }
      >
    >


  export type OperatorInvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    operatorId?: boolean
    email?: boolean
    role?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    invitedById?: boolean
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
    invitedBy?: boolean | UserDefaultArgs<ExtArgs>
    User?: boolean | OperatorInvitation$UserArgs<ExtArgs>
    _count?: boolean | OperatorInvitationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operatorInvitation"]>

  export type OperatorInvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    operatorId?: boolean
    email?: boolean
    role?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    invitedById?: boolean
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
    invitedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operatorInvitation"]>

  export type OperatorInvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    operatorId?: boolean
    email?: boolean
    role?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    invitedById?: boolean
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
    invitedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operatorInvitation"]>

  export type OperatorInvitationSelectScalar = {
    id?: boolean
    operatorId?: boolean
    email?: boolean
    role?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    invitedById?: boolean
  }

  export type OperatorInvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "operatorId" | "email" | "role" | "token" | "expiresAt" | "acceptedAt" | "invitedById", ExtArgs["result"]["operatorInvitation"]>
  export type OperatorInvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
    invitedBy?: boolean | UserDefaultArgs<ExtArgs>
    User?: boolean | OperatorInvitation$UserArgs<ExtArgs>
    _count?: boolean | OperatorInvitationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OperatorInvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
    invitedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OperatorInvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operator?: boolean | OperatorAccessDefaultArgs<ExtArgs>
    invitedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OperatorInvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OperatorInvitation"
    objects: {
      operator: Prisma.$OperatorAccessPayload<ExtArgs>
      invitedBy: Prisma.$UserPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      operatorId: string
      email: string
      role: $Enums.Role
      token: string
      expiresAt: Date
      acceptedAt: Date | null
      invitedById: string
    }, ExtArgs["result"]["operatorInvitation"]>
    composites: {}
  }

  type OperatorInvitationGetPayload<S extends boolean | null | undefined | OperatorInvitationDefaultArgs> = $Result.GetResult<Prisma.$OperatorInvitationPayload, S>

  type OperatorInvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperatorInvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperatorInvitationCountAggregateInputType | true
    }

  export interface OperatorInvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OperatorInvitation'], meta: { name: 'OperatorInvitation' } }
    /**
     * Find zero or one OperatorInvitation that matches the filter.
     * @param {OperatorInvitationFindUniqueArgs} args - Arguments to find a OperatorInvitation
     * @example
     * // Get one OperatorInvitation
     * const operatorInvitation = await prisma.operatorInvitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperatorInvitationFindUniqueArgs>(args: SelectSubset<T, OperatorInvitationFindUniqueArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OperatorInvitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperatorInvitationFindUniqueOrThrowArgs} args - Arguments to find a OperatorInvitation
     * @example
     * // Get one OperatorInvitation
     * const operatorInvitation = await prisma.operatorInvitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperatorInvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, OperatorInvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OperatorInvitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorInvitationFindFirstArgs} args - Arguments to find a OperatorInvitation
     * @example
     * // Get one OperatorInvitation
     * const operatorInvitation = await prisma.operatorInvitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperatorInvitationFindFirstArgs>(args?: SelectSubset<T, OperatorInvitationFindFirstArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OperatorInvitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorInvitationFindFirstOrThrowArgs} args - Arguments to find a OperatorInvitation
     * @example
     * // Get one OperatorInvitation
     * const operatorInvitation = await prisma.operatorInvitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperatorInvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, OperatorInvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OperatorInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorInvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OperatorInvitations
     * const operatorInvitations = await prisma.operatorInvitation.findMany()
     * 
     * // Get first 10 OperatorInvitations
     * const operatorInvitations = await prisma.operatorInvitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operatorInvitationWithIdOnly = await prisma.operatorInvitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperatorInvitationFindManyArgs>(args?: SelectSubset<T, OperatorInvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OperatorInvitation.
     * @param {OperatorInvitationCreateArgs} args - Arguments to create a OperatorInvitation.
     * @example
     * // Create one OperatorInvitation
     * const OperatorInvitation = await prisma.operatorInvitation.create({
     *   data: {
     *     // ... data to create a OperatorInvitation
     *   }
     * })
     * 
     */
    create<T extends OperatorInvitationCreateArgs>(args: SelectSubset<T, OperatorInvitationCreateArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OperatorInvitations.
     * @param {OperatorInvitationCreateManyArgs} args - Arguments to create many OperatorInvitations.
     * @example
     * // Create many OperatorInvitations
     * const operatorInvitation = await prisma.operatorInvitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperatorInvitationCreateManyArgs>(args?: SelectSubset<T, OperatorInvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OperatorInvitations and returns the data saved in the database.
     * @param {OperatorInvitationCreateManyAndReturnArgs} args - Arguments to create many OperatorInvitations.
     * @example
     * // Create many OperatorInvitations
     * const operatorInvitation = await prisma.operatorInvitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OperatorInvitations and only return the `id`
     * const operatorInvitationWithIdOnly = await prisma.operatorInvitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperatorInvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, OperatorInvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OperatorInvitation.
     * @param {OperatorInvitationDeleteArgs} args - Arguments to delete one OperatorInvitation.
     * @example
     * // Delete one OperatorInvitation
     * const OperatorInvitation = await prisma.operatorInvitation.delete({
     *   where: {
     *     // ... filter to delete one OperatorInvitation
     *   }
     * })
     * 
     */
    delete<T extends OperatorInvitationDeleteArgs>(args: SelectSubset<T, OperatorInvitationDeleteArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OperatorInvitation.
     * @param {OperatorInvitationUpdateArgs} args - Arguments to update one OperatorInvitation.
     * @example
     * // Update one OperatorInvitation
     * const operatorInvitation = await prisma.operatorInvitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperatorInvitationUpdateArgs>(args: SelectSubset<T, OperatorInvitationUpdateArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OperatorInvitations.
     * @param {OperatorInvitationDeleteManyArgs} args - Arguments to filter OperatorInvitations to delete.
     * @example
     * // Delete a few OperatorInvitations
     * const { count } = await prisma.operatorInvitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperatorInvitationDeleteManyArgs>(args?: SelectSubset<T, OperatorInvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperatorInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorInvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OperatorInvitations
     * const operatorInvitation = await prisma.operatorInvitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperatorInvitationUpdateManyArgs>(args: SelectSubset<T, OperatorInvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperatorInvitations and returns the data updated in the database.
     * @param {OperatorInvitationUpdateManyAndReturnArgs} args - Arguments to update many OperatorInvitations.
     * @example
     * // Update many OperatorInvitations
     * const operatorInvitation = await prisma.operatorInvitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OperatorInvitations and only return the `id`
     * const operatorInvitationWithIdOnly = await prisma.operatorInvitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperatorInvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, OperatorInvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OperatorInvitation.
     * @param {OperatorInvitationUpsertArgs} args - Arguments to update or create a OperatorInvitation.
     * @example
     * // Update or create a OperatorInvitation
     * const operatorInvitation = await prisma.operatorInvitation.upsert({
     *   create: {
     *     // ... data to create a OperatorInvitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OperatorInvitation we want to update
     *   }
     * })
     */
    upsert<T extends OperatorInvitationUpsertArgs>(args: SelectSubset<T, OperatorInvitationUpsertArgs<ExtArgs>>): Prisma__OperatorInvitationClient<$Result.GetResult<Prisma.$OperatorInvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OperatorInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorInvitationCountArgs} args - Arguments to filter OperatorInvitations to count.
     * @example
     * // Count the number of OperatorInvitations
     * const count = await prisma.operatorInvitation.count({
     *   where: {
     *     // ... the filter for the OperatorInvitations we want to count
     *   }
     * })
    **/
    count<T extends OperatorInvitationCountArgs>(
      args?: Subset<T, OperatorInvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperatorInvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OperatorInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorInvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperatorInvitationAggregateArgs>(args: Subset<T, OperatorInvitationAggregateArgs>): Prisma.PrismaPromise<GetOperatorInvitationAggregateType<T>>

    /**
     * Group by OperatorInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorInvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperatorInvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperatorInvitationGroupByArgs['orderBy'] }
        : { orderBy?: OperatorInvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperatorInvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatorInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OperatorInvitation model
   */
  readonly fields: OperatorInvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OperatorInvitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperatorInvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    operator<T extends OperatorAccessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OperatorAccessDefaultArgs<ExtArgs>>): Prisma__OperatorAccessClient<$Result.GetResult<Prisma.$OperatorAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invitedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends OperatorInvitation$UserArgs<ExtArgs> = {}>(args?: Subset<T, OperatorInvitation$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OperatorInvitation model
   */
  interface OperatorInvitationFieldRefs {
    readonly id: FieldRef<"OperatorInvitation", 'String'>
    readonly operatorId: FieldRef<"OperatorInvitation", 'String'>
    readonly email: FieldRef<"OperatorInvitation", 'String'>
    readonly role: FieldRef<"OperatorInvitation", 'Role'>
    readonly token: FieldRef<"OperatorInvitation", 'String'>
    readonly expiresAt: FieldRef<"OperatorInvitation", 'DateTime'>
    readonly acceptedAt: FieldRef<"OperatorInvitation", 'DateTime'>
    readonly invitedById: FieldRef<"OperatorInvitation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OperatorInvitation findUnique
   */
  export type OperatorInvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OperatorInvitation to fetch.
     */
    where: OperatorInvitationWhereUniqueInput
  }

  /**
   * OperatorInvitation findUniqueOrThrow
   */
  export type OperatorInvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OperatorInvitation to fetch.
     */
    where: OperatorInvitationWhereUniqueInput
  }

  /**
   * OperatorInvitation findFirst
   */
  export type OperatorInvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OperatorInvitation to fetch.
     */
    where?: OperatorInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorInvitations to fetch.
     */
    orderBy?: OperatorInvitationOrderByWithRelationInput | OperatorInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperatorInvitations.
     */
    cursor?: OperatorInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperatorInvitations.
     */
    distinct?: OperatorInvitationScalarFieldEnum | OperatorInvitationScalarFieldEnum[]
  }

  /**
   * OperatorInvitation findFirstOrThrow
   */
  export type OperatorInvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OperatorInvitation to fetch.
     */
    where?: OperatorInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorInvitations to fetch.
     */
    orderBy?: OperatorInvitationOrderByWithRelationInput | OperatorInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperatorInvitations.
     */
    cursor?: OperatorInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperatorInvitations.
     */
    distinct?: OperatorInvitationScalarFieldEnum | OperatorInvitationScalarFieldEnum[]
  }

  /**
   * OperatorInvitation findMany
   */
  export type OperatorInvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OperatorInvitations to fetch.
     */
    where?: OperatorInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatorInvitations to fetch.
     */
    orderBy?: OperatorInvitationOrderByWithRelationInput | OperatorInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OperatorInvitations.
     */
    cursor?: OperatorInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatorInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatorInvitations.
     */
    skip?: number
    distinct?: OperatorInvitationScalarFieldEnum | OperatorInvitationScalarFieldEnum[]
  }

  /**
   * OperatorInvitation create
   */
  export type OperatorInvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a OperatorInvitation.
     */
    data: XOR<OperatorInvitationCreateInput, OperatorInvitationUncheckedCreateInput>
  }

  /**
   * OperatorInvitation createMany
   */
  export type OperatorInvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OperatorInvitations.
     */
    data: OperatorInvitationCreateManyInput | OperatorInvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OperatorInvitation createManyAndReturn
   */
  export type OperatorInvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * The data used to create many OperatorInvitations.
     */
    data: OperatorInvitationCreateManyInput | OperatorInvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OperatorInvitation update
   */
  export type OperatorInvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a OperatorInvitation.
     */
    data: XOR<OperatorInvitationUpdateInput, OperatorInvitationUncheckedUpdateInput>
    /**
     * Choose, which OperatorInvitation to update.
     */
    where: OperatorInvitationWhereUniqueInput
  }

  /**
   * OperatorInvitation updateMany
   */
  export type OperatorInvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OperatorInvitations.
     */
    data: XOR<OperatorInvitationUpdateManyMutationInput, OperatorInvitationUncheckedUpdateManyInput>
    /**
     * Filter which OperatorInvitations to update
     */
    where?: OperatorInvitationWhereInput
    /**
     * Limit how many OperatorInvitations to update.
     */
    limit?: number
  }

  /**
   * OperatorInvitation updateManyAndReturn
   */
  export type OperatorInvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * The data used to update OperatorInvitations.
     */
    data: XOR<OperatorInvitationUpdateManyMutationInput, OperatorInvitationUncheckedUpdateManyInput>
    /**
     * Filter which OperatorInvitations to update
     */
    where?: OperatorInvitationWhereInput
    /**
     * Limit how many OperatorInvitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OperatorInvitation upsert
   */
  export type OperatorInvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the OperatorInvitation to update in case it exists.
     */
    where: OperatorInvitationWhereUniqueInput
    /**
     * In case the OperatorInvitation found by the `where` argument doesn't exist, create a new OperatorInvitation with this data.
     */
    create: XOR<OperatorInvitationCreateInput, OperatorInvitationUncheckedCreateInput>
    /**
     * In case the OperatorInvitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperatorInvitationUpdateInput, OperatorInvitationUncheckedUpdateInput>
  }

  /**
   * OperatorInvitation delete
   */
  export type OperatorInvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
    /**
     * Filter which OperatorInvitation to delete.
     */
    where: OperatorInvitationWhereUniqueInput
  }

  /**
   * OperatorInvitation deleteMany
   */
  export type OperatorInvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperatorInvitations to delete
     */
    where?: OperatorInvitationWhereInput
    /**
     * Limit how many OperatorInvitations to delete.
     */
    limit?: number
  }

  /**
   * OperatorInvitation.User
   */
  export type OperatorInvitation$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * OperatorInvitation without action
   */
  export type OperatorInvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorInvitation
     */
    select?: OperatorInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OperatorInvitation
     */
    omit?: OperatorInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInvitationInclude<ExtArgs> | null
  }


  /**
   * Model VipInfo
   */

  export type AggregateVipInfo = {
    _count: VipInfoCountAggregateOutputType | null
    _avg: VipInfoAvgAggregateOutputType | null
    _sum: VipInfoSumAggregateOutputType | null
    _min: VipInfoMinAggregateOutputType | null
    _max: VipInfoMaxAggregateOutputType | null
  }

  export type VipInfoAvgAggregateOutputType = {
    level: number | null
    currentLevelXp: number | null
    totalXp: number | null
    nextLevelXpRequired: number | null
    cashbackPercentage: number | null
    specialBonusesAvailable: number | null
  }

  export type VipInfoSumAggregateOutputType = {
    level: number | null
    currentLevelXp: number | null
    totalXp: number | null
    nextLevelXpRequired: number | null
    cashbackPercentage: number | null
    specialBonusesAvailable: number | null
  }

  export type VipInfoMinAggregateOutputType = {
    id: string | null
    userId: string | null
    level: number | null
    currentLevelXp: number | null
    totalXp: number | null
    nextLevelXpRequired: number | null
    cashbackPercentage: number | null
    prioritySupport: boolean | null
    specialBonusesAvailable: number | null
    dailyBonusClaimedAt: Date | null
    weeklyBonusClaimedAt: Date | null
    monthlyBonusClaimedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VipInfoMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    level: number | null
    currentLevelXp: number | null
    totalXp: number | null
    nextLevelXpRequired: number | null
    cashbackPercentage: number | null
    prioritySupport: boolean | null
    specialBonusesAvailable: number | null
    dailyBonusClaimedAt: Date | null
    weeklyBonusClaimedAt: Date | null
    monthlyBonusClaimedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VipInfoCountAggregateOutputType = {
    id: number
    userId: number
    level: number
    currentLevelXp: number
    totalXp: number
    nextLevelXpRequired: number
    cashbackPercentage: number
    prioritySupport: number
    specialBonusesAvailable: number
    dailyBonusClaimedAt: number
    weeklyBonusClaimedAt: number
    monthlyBonusClaimedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VipInfoAvgAggregateInputType = {
    level?: true
    currentLevelXp?: true
    totalXp?: true
    nextLevelXpRequired?: true
    cashbackPercentage?: true
    specialBonusesAvailable?: true
  }

  export type VipInfoSumAggregateInputType = {
    level?: true
    currentLevelXp?: true
    totalXp?: true
    nextLevelXpRequired?: true
    cashbackPercentage?: true
    specialBonusesAvailable?: true
  }

  export type VipInfoMinAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    currentLevelXp?: true
    totalXp?: true
    nextLevelXpRequired?: true
    cashbackPercentage?: true
    prioritySupport?: true
    specialBonusesAvailable?: true
    dailyBonusClaimedAt?: true
    weeklyBonusClaimedAt?: true
    monthlyBonusClaimedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VipInfoMaxAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    currentLevelXp?: true
    totalXp?: true
    nextLevelXpRequired?: true
    cashbackPercentage?: true
    prioritySupport?: true
    specialBonusesAvailable?: true
    dailyBonusClaimedAt?: true
    weeklyBonusClaimedAt?: true
    monthlyBonusClaimedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VipInfoCountAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    currentLevelXp?: true
    totalXp?: true
    nextLevelXpRequired?: true
    cashbackPercentage?: true
    prioritySupport?: true
    specialBonusesAvailable?: true
    dailyBonusClaimedAt?: true
    weeklyBonusClaimedAt?: true
    monthlyBonusClaimedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VipInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VipInfo to aggregate.
     */
    where?: VipInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipInfos to fetch.
     */
    orderBy?: VipInfoOrderByWithRelationInput | VipInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VipInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VipInfos
    **/
    _count?: true | VipInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VipInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VipInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VipInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VipInfoMaxAggregateInputType
  }

  export type GetVipInfoAggregateType<T extends VipInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateVipInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVipInfo[P]>
      : GetScalarType<T[P], AggregateVipInfo[P]>
  }




  export type VipInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VipInfoWhereInput
    orderBy?: VipInfoOrderByWithAggregationInput | VipInfoOrderByWithAggregationInput[]
    by: VipInfoScalarFieldEnum[] | VipInfoScalarFieldEnum
    having?: VipInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VipInfoCountAggregateInputType | true
    _avg?: VipInfoAvgAggregateInputType
    _sum?: VipInfoSumAggregateInputType
    _min?: VipInfoMinAggregateInputType
    _max?: VipInfoMaxAggregateInputType
  }

  export type VipInfoGroupByOutputType = {
    id: string
    userId: string
    level: number
    currentLevelXp: number
    totalXp: number
    nextLevelXpRequired: number
    cashbackPercentage: number
    prioritySupport: boolean
    specialBonusesAvailable: number
    dailyBonusClaimedAt: Date | null
    weeklyBonusClaimedAt: Date | null
    monthlyBonusClaimedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: VipInfoCountAggregateOutputType | null
    _avg: VipInfoAvgAggregateOutputType | null
    _sum: VipInfoSumAggregateOutputType | null
    _min: VipInfoMinAggregateOutputType | null
    _max: VipInfoMaxAggregateOutputType | null
  }

  type GetVipInfoGroupByPayload<T extends VipInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VipInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VipInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VipInfoGroupByOutputType[P]>
            : GetScalarType<T[P], VipInfoGroupByOutputType[P]>
        }
      >
    >


  export type VipInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    currentLevelXp?: boolean
    totalXp?: boolean
    nextLevelXpRequired?: boolean
    cashbackPercentage?: boolean
    prioritySupport?: boolean
    specialBonusesAvailable?: boolean
    dailyBonusClaimedAt?: boolean
    weeklyBonusClaimedAt?: boolean
    monthlyBonusClaimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vipInfo"]>

  export type VipInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    currentLevelXp?: boolean
    totalXp?: boolean
    nextLevelXpRequired?: boolean
    cashbackPercentage?: boolean
    prioritySupport?: boolean
    specialBonusesAvailable?: boolean
    dailyBonusClaimedAt?: boolean
    weeklyBonusClaimedAt?: boolean
    monthlyBonusClaimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vipInfo"]>

  export type VipInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    currentLevelXp?: boolean
    totalXp?: boolean
    nextLevelXpRequired?: boolean
    cashbackPercentage?: boolean
    prioritySupport?: boolean
    specialBonusesAvailable?: boolean
    dailyBonusClaimedAt?: boolean
    weeklyBonusClaimedAt?: boolean
    monthlyBonusClaimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vipInfo"]>

  export type VipInfoSelectScalar = {
    id?: boolean
    userId?: boolean
    level?: boolean
    currentLevelXp?: boolean
    totalXp?: boolean
    nextLevelXpRequired?: boolean
    cashbackPercentage?: boolean
    prioritySupport?: boolean
    specialBonusesAvailable?: boolean
    dailyBonusClaimedAt?: boolean
    weeklyBonusClaimedAt?: boolean
    monthlyBonusClaimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VipInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "level" | "currentLevelXp" | "totalXp" | "nextLevelXpRequired" | "cashbackPercentage" | "prioritySupport" | "specialBonusesAvailable" | "dailyBonusClaimedAt" | "weeklyBonusClaimedAt" | "monthlyBonusClaimedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["vipInfo"]>
  export type VipInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VipInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VipInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VipInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VipInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      level: number
      currentLevelXp: number
      totalXp: number
      nextLevelXpRequired: number
      cashbackPercentage: number
      prioritySupport: boolean
      specialBonusesAvailable: number
      dailyBonusClaimedAt: Date | null
      weeklyBonusClaimedAt: Date | null
      monthlyBonusClaimedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vipInfo"]>
    composites: {}
  }

  type VipInfoGetPayload<S extends boolean | null | undefined | VipInfoDefaultArgs> = $Result.GetResult<Prisma.$VipInfoPayload, S>

  type VipInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VipInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VipInfoCountAggregateInputType | true
    }

  export interface VipInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VipInfo'], meta: { name: 'VipInfo' } }
    /**
     * Find zero or one VipInfo that matches the filter.
     * @param {VipInfoFindUniqueArgs} args - Arguments to find a VipInfo
     * @example
     * // Get one VipInfo
     * const vipInfo = await prisma.vipInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VipInfoFindUniqueArgs>(args: SelectSubset<T, VipInfoFindUniqueArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VipInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VipInfoFindUniqueOrThrowArgs} args - Arguments to find a VipInfo
     * @example
     * // Get one VipInfo
     * const vipInfo = await prisma.vipInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VipInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, VipInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VipInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipInfoFindFirstArgs} args - Arguments to find a VipInfo
     * @example
     * // Get one VipInfo
     * const vipInfo = await prisma.vipInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VipInfoFindFirstArgs>(args?: SelectSubset<T, VipInfoFindFirstArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VipInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipInfoFindFirstOrThrowArgs} args - Arguments to find a VipInfo
     * @example
     * // Get one VipInfo
     * const vipInfo = await prisma.vipInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VipInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, VipInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VipInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VipInfos
     * const vipInfos = await prisma.vipInfo.findMany()
     * 
     * // Get first 10 VipInfos
     * const vipInfos = await prisma.vipInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vipInfoWithIdOnly = await prisma.vipInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VipInfoFindManyArgs>(args?: SelectSubset<T, VipInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VipInfo.
     * @param {VipInfoCreateArgs} args - Arguments to create a VipInfo.
     * @example
     * // Create one VipInfo
     * const VipInfo = await prisma.vipInfo.create({
     *   data: {
     *     // ... data to create a VipInfo
     *   }
     * })
     * 
     */
    create<T extends VipInfoCreateArgs>(args: SelectSubset<T, VipInfoCreateArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VipInfos.
     * @param {VipInfoCreateManyArgs} args - Arguments to create many VipInfos.
     * @example
     * // Create many VipInfos
     * const vipInfo = await prisma.vipInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VipInfoCreateManyArgs>(args?: SelectSubset<T, VipInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VipInfos and returns the data saved in the database.
     * @param {VipInfoCreateManyAndReturnArgs} args - Arguments to create many VipInfos.
     * @example
     * // Create many VipInfos
     * const vipInfo = await prisma.vipInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VipInfos and only return the `id`
     * const vipInfoWithIdOnly = await prisma.vipInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VipInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, VipInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VipInfo.
     * @param {VipInfoDeleteArgs} args - Arguments to delete one VipInfo.
     * @example
     * // Delete one VipInfo
     * const VipInfo = await prisma.vipInfo.delete({
     *   where: {
     *     // ... filter to delete one VipInfo
     *   }
     * })
     * 
     */
    delete<T extends VipInfoDeleteArgs>(args: SelectSubset<T, VipInfoDeleteArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VipInfo.
     * @param {VipInfoUpdateArgs} args - Arguments to update one VipInfo.
     * @example
     * // Update one VipInfo
     * const vipInfo = await prisma.vipInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VipInfoUpdateArgs>(args: SelectSubset<T, VipInfoUpdateArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VipInfos.
     * @param {VipInfoDeleteManyArgs} args - Arguments to filter VipInfos to delete.
     * @example
     * // Delete a few VipInfos
     * const { count } = await prisma.vipInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VipInfoDeleteManyArgs>(args?: SelectSubset<T, VipInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VipInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VipInfos
     * const vipInfo = await prisma.vipInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VipInfoUpdateManyArgs>(args: SelectSubset<T, VipInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VipInfos and returns the data updated in the database.
     * @param {VipInfoUpdateManyAndReturnArgs} args - Arguments to update many VipInfos.
     * @example
     * // Update many VipInfos
     * const vipInfo = await prisma.vipInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VipInfos and only return the `id`
     * const vipInfoWithIdOnly = await prisma.vipInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VipInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, VipInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VipInfo.
     * @param {VipInfoUpsertArgs} args - Arguments to update or create a VipInfo.
     * @example
     * // Update or create a VipInfo
     * const vipInfo = await prisma.vipInfo.upsert({
     *   create: {
     *     // ... data to create a VipInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VipInfo we want to update
     *   }
     * })
     */
    upsert<T extends VipInfoUpsertArgs>(args: SelectSubset<T, VipInfoUpsertArgs<ExtArgs>>): Prisma__VipInfoClient<$Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VipInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipInfoCountArgs} args - Arguments to filter VipInfos to count.
     * @example
     * // Count the number of VipInfos
     * const count = await prisma.vipInfo.count({
     *   where: {
     *     // ... the filter for the VipInfos we want to count
     *   }
     * })
    **/
    count<T extends VipInfoCountArgs>(
      args?: Subset<T, VipInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VipInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VipInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VipInfoAggregateArgs>(args: Subset<T, VipInfoAggregateArgs>): Prisma.PrismaPromise<GetVipInfoAggregateType<T>>

    /**
     * Group by VipInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VipInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VipInfoGroupByArgs['orderBy'] }
        : { orderBy?: VipInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VipInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVipInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VipInfo model
   */
  readonly fields: VipInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VipInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VipInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VipInfo model
   */
  interface VipInfoFieldRefs {
    readonly id: FieldRef<"VipInfo", 'String'>
    readonly userId: FieldRef<"VipInfo", 'String'>
    readonly level: FieldRef<"VipInfo", 'Int'>
    readonly currentLevelXp: FieldRef<"VipInfo", 'Float'>
    readonly totalXp: FieldRef<"VipInfo", 'Float'>
    readonly nextLevelXpRequired: FieldRef<"VipInfo", 'Float'>
    readonly cashbackPercentage: FieldRef<"VipInfo", 'Float'>
    readonly prioritySupport: FieldRef<"VipInfo", 'Boolean'>
    readonly specialBonusesAvailable: FieldRef<"VipInfo", 'Int'>
    readonly dailyBonusClaimedAt: FieldRef<"VipInfo", 'DateTime'>
    readonly weeklyBonusClaimedAt: FieldRef<"VipInfo", 'DateTime'>
    readonly monthlyBonusClaimedAt: FieldRef<"VipInfo", 'DateTime'>
    readonly createdAt: FieldRef<"VipInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"VipInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VipInfo findUnique
   */
  export type VipInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * Filter, which VipInfo to fetch.
     */
    where: VipInfoWhereUniqueInput
  }

  /**
   * VipInfo findUniqueOrThrow
   */
  export type VipInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * Filter, which VipInfo to fetch.
     */
    where: VipInfoWhereUniqueInput
  }

  /**
   * VipInfo findFirst
   */
  export type VipInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * Filter, which VipInfo to fetch.
     */
    where?: VipInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipInfos to fetch.
     */
    orderBy?: VipInfoOrderByWithRelationInput | VipInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VipInfos.
     */
    cursor?: VipInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VipInfos.
     */
    distinct?: VipInfoScalarFieldEnum | VipInfoScalarFieldEnum[]
  }

  /**
   * VipInfo findFirstOrThrow
   */
  export type VipInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * Filter, which VipInfo to fetch.
     */
    where?: VipInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipInfos to fetch.
     */
    orderBy?: VipInfoOrderByWithRelationInput | VipInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VipInfos.
     */
    cursor?: VipInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VipInfos.
     */
    distinct?: VipInfoScalarFieldEnum | VipInfoScalarFieldEnum[]
  }

  /**
   * VipInfo findMany
   */
  export type VipInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * Filter, which VipInfos to fetch.
     */
    where?: VipInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipInfos to fetch.
     */
    orderBy?: VipInfoOrderByWithRelationInput | VipInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VipInfos.
     */
    cursor?: VipInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipInfos.
     */
    skip?: number
    distinct?: VipInfoScalarFieldEnum | VipInfoScalarFieldEnum[]
  }

  /**
   * VipInfo create
   */
  export type VipInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a VipInfo.
     */
    data: XOR<VipInfoCreateInput, VipInfoUncheckedCreateInput>
  }

  /**
   * VipInfo createMany
   */
  export type VipInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VipInfos.
     */
    data: VipInfoCreateManyInput | VipInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VipInfo createManyAndReturn
   */
  export type VipInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * The data used to create many VipInfos.
     */
    data: VipInfoCreateManyInput | VipInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VipInfo update
   */
  export type VipInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a VipInfo.
     */
    data: XOR<VipInfoUpdateInput, VipInfoUncheckedUpdateInput>
    /**
     * Choose, which VipInfo to update.
     */
    where: VipInfoWhereUniqueInput
  }

  /**
   * VipInfo updateMany
   */
  export type VipInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VipInfos.
     */
    data: XOR<VipInfoUpdateManyMutationInput, VipInfoUncheckedUpdateManyInput>
    /**
     * Filter which VipInfos to update
     */
    where?: VipInfoWhereInput
    /**
     * Limit how many VipInfos to update.
     */
    limit?: number
  }

  /**
   * VipInfo updateManyAndReturn
   */
  export type VipInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * The data used to update VipInfos.
     */
    data: XOR<VipInfoUpdateManyMutationInput, VipInfoUncheckedUpdateManyInput>
    /**
     * Filter which VipInfos to update
     */
    where?: VipInfoWhereInput
    /**
     * Limit how many VipInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VipInfo upsert
   */
  export type VipInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the VipInfo to update in case it exists.
     */
    where: VipInfoWhereUniqueInput
    /**
     * In case the VipInfo found by the `where` argument doesn't exist, create a new VipInfo with this data.
     */
    create: XOR<VipInfoCreateInput, VipInfoUncheckedCreateInput>
    /**
     * In case the VipInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VipInfoUpdateInput, VipInfoUncheckedUpdateInput>
  }

  /**
   * VipInfo delete
   */
  export type VipInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
    /**
     * Filter which VipInfo to delete.
     */
    where: VipInfoWhereUniqueInput
  }

  /**
   * VipInfo deleteMany
   */
  export type VipInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VipInfos to delete
     */
    where?: VipInfoWhereInput
    /**
     * Limit how many VipInfos to delete.
     */
    limit?: number
  }

  /**
   * VipInfo without action
   */
  export type VipInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipInfo
     */
    select?: VipInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipInfo
     */
    omit?: VipInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipInfoInclude<ExtArgs> | null
  }


  /**
   * Model UserReward
   */

  export type AggregateUserReward = {
    _count: UserRewardCountAggregateOutputType | null
    _avg: UserRewardAvgAggregateOutputType | null
    _sum: UserRewardSumAggregateOutputType | null
    _min: UserRewardMinAggregateOutputType | null
    _max: UserRewardMaxAggregateOutputType | null
  }

  export type UserRewardAvgAggregateOutputType = {
    amount: number | null
    vipLevelRequirement: number | null
  }

  export type UserRewardSumAggregateOutputType = {
    amount: number | null
    vipLevelRequirement: number | null
  }

  export type UserRewardMinAggregateOutputType = {
    id: string | null
    userId: string | null
    rewardType: $Enums.RewardType | null
    claimedAt: Date | null
    description: string | null
    status: $Enums.RewardStatus | null
    amount: number | null
    currencyId: string | null
    expiresAt: Date | null
    availableFrom: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    vipLevelRequirement: number | null
  }

  export type UserRewardMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    rewardType: $Enums.RewardType | null
    claimedAt: Date | null
    description: string | null
    status: $Enums.RewardStatus | null
    amount: number | null
    currencyId: string | null
    expiresAt: Date | null
    availableFrom: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    vipLevelRequirement: number | null
  }

  export type UserRewardCountAggregateOutputType = {
    id: number
    userId: number
    rewardType: number
    claimedAt: number
    description: number
    status: number
    amount: number
    currencyId: number
    metaData: number
    expiresAt: number
    availableFrom: number
    createdAt: number
    updatedAt: number
    vipLevelRequirement: number
    _all: number
  }


  export type UserRewardAvgAggregateInputType = {
    amount?: true
    vipLevelRequirement?: true
  }

  export type UserRewardSumAggregateInputType = {
    amount?: true
    vipLevelRequirement?: true
  }

  export type UserRewardMinAggregateInputType = {
    id?: true
    userId?: true
    rewardType?: true
    claimedAt?: true
    description?: true
    status?: true
    amount?: true
    currencyId?: true
    expiresAt?: true
    availableFrom?: true
    createdAt?: true
    updatedAt?: true
    vipLevelRequirement?: true
  }

  export type UserRewardMaxAggregateInputType = {
    id?: true
    userId?: true
    rewardType?: true
    claimedAt?: true
    description?: true
    status?: true
    amount?: true
    currencyId?: true
    expiresAt?: true
    availableFrom?: true
    createdAt?: true
    updatedAt?: true
    vipLevelRequirement?: true
  }

  export type UserRewardCountAggregateInputType = {
    id?: true
    userId?: true
    rewardType?: true
    claimedAt?: true
    description?: true
    status?: true
    amount?: true
    currencyId?: true
    metaData?: true
    expiresAt?: true
    availableFrom?: true
    createdAt?: true
    updatedAt?: true
    vipLevelRequirement?: true
    _all?: true
  }

  export type UserRewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserReward to aggregate.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRewards
    **/
    _count?: true | UserRewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRewardMaxAggregateInputType
  }

  export type GetUserRewardAggregateType<T extends UserRewardAggregateArgs> = {
        [P in keyof T & keyof AggregateUserReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserReward[P]>
      : GetScalarType<T[P], AggregateUserReward[P]>
  }




  export type UserRewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRewardWhereInput
    orderBy?: UserRewardOrderByWithAggregationInput | UserRewardOrderByWithAggregationInput[]
    by: UserRewardScalarFieldEnum[] | UserRewardScalarFieldEnum
    having?: UserRewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRewardCountAggregateInputType | true
    _avg?: UserRewardAvgAggregateInputType
    _sum?: UserRewardSumAggregateInputType
    _min?: UserRewardMinAggregateInputType
    _max?: UserRewardMaxAggregateInputType
  }

  export type UserRewardGroupByOutputType = {
    id: string
    userId: string
    rewardType: $Enums.RewardType
    claimedAt: Date | null
    description: string
    status: $Enums.RewardStatus
    amount: number | null
    currencyId: string | null
    metaData: JsonValue | null
    expiresAt: Date | null
    availableFrom: Date
    createdAt: Date
    updatedAt: Date
    vipLevelRequirement: number | null
    _count: UserRewardCountAggregateOutputType | null
    _avg: UserRewardAvgAggregateOutputType | null
    _sum: UserRewardSumAggregateOutputType | null
    _min: UserRewardMinAggregateOutputType | null
    _max: UserRewardMaxAggregateOutputType | null
  }

  type GetUserRewardGroupByPayload<T extends UserRewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRewardGroupByOutputType[P]>
            : GetScalarType<T[P], UserRewardGroupByOutputType[P]>
        }
      >
    >


  export type UserRewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rewardType?: boolean
    claimedAt?: boolean
    description?: boolean
    status?: boolean
    amount?: boolean
    currencyId?: boolean
    metaData?: boolean
    expiresAt?: boolean
    availableFrom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vipLevelRequirement?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rewardType?: boolean
    claimedAt?: boolean
    description?: boolean
    status?: boolean
    amount?: boolean
    currencyId?: boolean
    metaData?: boolean
    expiresAt?: boolean
    availableFrom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vipLevelRequirement?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rewardType?: boolean
    claimedAt?: boolean
    description?: boolean
    status?: boolean
    amount?: boolean
    currencyId?: boolean
    metaData?: boolean
    expiresAt?: boolean
    availableFrom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vipLevelRequirement?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectScalar = {
    id?: boolean
    userId?: boolean
    rewardType?: boolean
    claimedAt?: boolean
    description?: boolean
    status?: boolean
    amount?: boolean
    currencyId?: boolean
    metaData?: boolean
    expiresAt?: boolean
    availableFrom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vipLevelRequirement?: boolean
  }

  export type UserRewardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "rewardType" | "claimedAt" | "description" | "status" | "amount" | "currencyId" | "metaData" | "expiresAt" | "availableFrom" | "createdAt" | "updatedAt" | "vipLevelRequirement", ExtArgs["result"]["userReward"]>
  export type UserRewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRewardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserRewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserReward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      rewardType: $Enums.RewardType
      claimedAt: Date | null
      description: string
      status: $Enums.RewardStatus
      amount: number | null
      currencyId: string | null
      metaData: Prisma.JsonValue | null
      expiresAt: Date | null
      availableFrom: Date
      createdAt: Date
      updatedAt: Date
      vipLevelRequirement: number | null
    }, ExtArgs["result"]["userReward"]>
    composites: {}
  }

  type UserRewardGetPayload<S extends boolean | null | undefined | UserRewardDefaultArgs> = $Result.GetResult<Prisma.$UserRewardPayload, S>

  type UserRewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRewardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRewardCountAggregateInputType | true
    }

  export interface UserRewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserReward'], meta: { name: 'UserReward' } }
    /**
     * Find zero or one UserReward that matches the filter.
     * @param {UserRewardFindUniqueArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRewardFindUniqueArgs>(args: SelectSubset<T, UserRewardFindUniqueArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserReward that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRewardFindUniqueOrThrowArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRewardFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindFirstArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRewardFindFirstArgs>(args?: SelectSubset<T, UserRewardFindFirstArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindFirstOrThrowArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRewardFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRewardFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRewards
     * const userRewards = await prisma.userReward.findMany()
     * 
     * // Get first 10 UserRewards
     * const userRewards = await prisma.userReward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRewardWithIdOnly = await prisma.userReward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRewardFindManyArgs>(args?: SelectSubset<T, UserRewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserReward.
     * @param {UserRewardCreateArgs} args - Arguments to create a UserReward.
     * @example
     * // Create one UserReward
     * const UserReward = await prisma.userReward.create({
     *   data: {
     *     // ... data to create a UserReward
     *   }
     * })
     * 
     */
    create<T extends UserRewardCreateArgs>(args: SelectSubset<T, UserRewardCreateArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRewards.
     * @param {UserRewardCreateManyArgs} args - Arguments to create many UserRewards.
     * @example
     * // Create many UserRewards
     * const userReward = await prisma.userReward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRewardCreateManyArgs>(args?: SelectSubset<T, UserRewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRewards and returns the data saved in the database.
     * @param {UserRewardCreateManyAndReturnArgs} args - Arguments to create many UserRewards.
     * @example
     * // Create many UserRewards
     * const userReward = await prisma.userReward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRewards and only return the `id`
     * const userRewardWithIdOnly = await prisma.userReward.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRewardCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserReward.
     * @param {UserRewardDeleteArgs} args - Arguments to delete one UserReward.
     * @example
     * // Delete one UserReward
     * const UserReward = await prisma.userReward.delete({
     *   where: {
     *     // ... filter to delete one UserReward
     *   }
     * })
     * 
     */
    delete<T extends UserRewardDeleteArgs>(args: SelectSubset<T, UserRewardDeleteArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserReward.
     * @param {UserRewardUpdateArgs} args - Arguments to update one UserReward.
     * @example
     * // Update one UserReward
     * const userReward = await prisma.userReward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRewardUpdateArgs>(args: SelectSubset<T, UserRewardUpdateArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRewards.
     * @param {UserRewardDeleteManyArgs} args - Arguments to filter UserRewards to delete.
     * @example
     * // Delete a few UserRewards
     * const { count } = await prisma.userReward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRewardDeleteManyArgs>(args?: SelectSubset<T, UserRewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRewards
     * const userReward = await prisma.userReward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRewardUpdateManyArgs>(args: SelectSubset<T, UserRewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRewards and returns the data updated in the database.
     * @param {UserRewardUpdateManyAndReturnArgs} args - Arguments to update many UserRewards.
     * @example
     * // Update many UserRewards
     * const userReward = await prisma.userReward.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRewards and only return the `id`
     * const userRewardWithIdOnly = await prisma.userReward.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRewardUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRewardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserReward.
     * @param {UserRewardUpsertArgs} args - Arguments to update or create a UserReward.
     * @example
     * // Update or create a UserReward
     * const userReward = await prisma.userReward.upsert({
     *   create: {
     *     // ... data to create a UserReward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserReward we want to update
     *   }
     * })
     */
    upsert<T extends UserRewardUpsertArgs>(args: SelectSubset<T, UserRewardUpsertArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardCountArgs} args - Arguments to filter UserRewards to count.
     * @example
     * // Count the number of UserRewards
     * const count = await prisma.userReward.count({
     *   where: {
     *     // ... the filter for the UserRewards we want to count
     *   }
     * })
    **/
    count<T extends UserRewardCountArgs>(
      args?: Subset<T, UserRewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRewardAggregateArgs>(args: Subset<T, UserRewardAggregateArgs>): Prisma.PrismaPromise<GetUserRewardAggregateType<T>>

    /**
     * Group by UserReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRewardGroupByArgs['orderBy'] }
        : { orderBy?: UserRewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserReward model
   */
  readonly fields: UserRewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserReward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserReward model
   */
  interface UserRewardFieldRefs {
    readonly id: FieldRef<"UserReward", 'String'>
    readonly userId: FieldRef<"UserReward", 'String'>
    readonly rewardType: FieldRef<"UserReward", 'RewardType'>
    readonly claimedAt: FieldRef<"UserReward", 'DateTime'>
    readonly description: FieldRef<"UserReward", 'String'>
    readonly status: FieldRef<"UserReward", 'RewardStatus'>
    readonly amount: FieldRef<"UserReward", 'Float'>
    readonly currencyId: FieldRef<"UserReward", 'String'>
    readonly metaData: FieldRef<"UserReward", 'Json'>
    readonly expiresAt: FieldRef<"UserReward", 'DateTime'>
    readonly availableFrom: FieldRef<"UserReward", 'DateTime'>
    readonly createdAt: FieldRef<"UserReward", 'DateTime'>
    readonly updatedAt: FieldRef<"UserReward", 'DateTime'>
    readonly vipLevelRequirement: FieldRef<"UserReward", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserReward findUnique
   */
  export type UserRewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward findUniqueOrThrow
   */
  export type UserRewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward findFirst
   */
  export type UserRewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRewards.
     */
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward findFirstOrThrow
   */
  export type UserRewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRewards.
     */
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward findMany
   */
  export type UserRewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserRewards to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward create
   */
  export type UserRewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The data needed to create a UserReward.
     */
    data: XOR<UserRewardCreateInput, UserRewardUncheckedCreateInput>
  }

  /**
   * UserReward createMany
   */
  export type UserRewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRewards.
     */
    data: UserRewardCreateManyInput | UserRewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserReward createManyAndReturn
   */
  export type UserRewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * The data used to create many UserRewards.
     */
    data: UserRewardCreateManyInput | UserRewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReward update
   */
  export type UserRewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The data needed to update a UserReward.
     */
    data: XOR<UserRewardUpdateInput, UserRewardUncheckedUpdateInput>
    /**
     * Choose, which UserReward to update.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward updateMany
   */
  export type UserRewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRewards.
     */
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyInput>
    /**
     * Filter which UserRewards to update
     */
    where?: UserRewardWhereInput
    /**
     * Limit how many UserRewards to update.
     */
    limit?: number
  }

  /**
   * UserReward updateManyAndReturn
   */
  export type UserRewardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * The data used to update UserRewards.
     */
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyInput>
    /**
     * Filter which UserRewards to update
     */
    where?: UserRewardWhereInput
    /**
     * Limit how many UserRewards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReward upsert
   */
  export type UserRewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The filter to search for the UserReward to update in case it exists.
     */
    where: UserRewardWhereUniqueInput
    /**
     * In case the UserReward found by the `where` argument doesn't exist, create a new UserReward with this data.
     */
    create: XOR<UserRewardCreateInput, UserRewardUncheckedCreateInput>
    /**
     * In case the UserReward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRewardUpdateInput, UserRewardUncheckedUpdateInput>
  }

  /**
   * UserReward delete
   */
  export type UserRewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter which UserReward to delete.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward deleteMany
   */
  export type UserRewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRewards to delete
     */
    where?: UserRewardWhereInput
    /**
     * Limit how many UserRewards to delete.
     */
    limit?: number
  }

  /**
   * UserReward without action
   */
  export type UserRewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
  }


  /**
   * Model VipTask
   */

  export type AggregateVipTask = {
    _count: VipTaskCountAggregateOutputType | null
    _avg: VipTaskAvgAggregateOutputType | null
    _sum: VipTaskSumAggregateOutputType | null
    _min: VipTaskMinAggregateOutputType | null
    _max: VipTaskMaxAggregateOutputType | null
  }

  export type VipTaskAvgAggregateOutputType = {
    xpReward: number | null
    bonusRewardAmount: number | null
    targetValue: number | null
    durationDays: number | null
    requiredVipLevel: number | null
  }

  export type VipTaskSumAggregateOutputType = {
    xpReward: number | null
    bonusRewardAmount: number | null
    targetValue: number | null
    durationDays: number | null
    requiredVipLevel: number | null
  }

  export type VipTaskMinAggregateOutputType = {
    id: string | null
    taskType: $Enums.VipTaskType | null
    title: string | null
    description: string | null
    xpReward: number | null
    itemRewardId: string | null
    bonusRewardAmount: number | null
    bonusCurrencyId: string | null
    targetValue: number | null
    durationDays: number | null
    isActive: boolean | null
    requiredVipLevel: number | null
    resetCycle: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VipTaskMaxAggregateOutputType = {
    id: string | null
    taskType: $Enums.VipTaskType | null
    title: string | null
    description: string | null
    xpReward: number | null
    itemRewardId: string | null
    bonusRewardAmount: number | null
    bonusCurrencyId: string | null
    targetValue: number | null
    durationDays: number | null
    isActive: boolean | null
    requiredVipLevel: number | null
    resetCycle: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VipTaskCountAggregateOutputType = {
    id: number
    taskType: number
    title: number
    description: number
    xpReward: number
    itemRewardId: number
    bonusRewardAmount: number
    bonusCurrencyId: number
    targetValue: number
    durationDays: number
    isActive: number
    requiredVipLevel: number
    resetCycle: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VipTaskAvgAggregateInputType = {
    xpReward?: true
    bonusRewardAmount?: true
    targetValue?: true
    durationDays?: true
    requiredVipLevel?: true
  }

  export type VipTaskSumAggregateInputType = {
    xpReward?: true
    bonusRewardAmount?: true
    targetValue?: true
    durationDays?: true
    requiredVipLevel?: true
  }

  export type VipTaskMinAggregateInputType = {
    id?: true
    taskType?: true
    title?: true
    description?: true
    xpReward?: true
    itemRewardId?: true
    bonusRewardAmount?: true
    bonusCurrencyId?: true
    targetValue?: true
    durationDays?: true
    isActive?: true
    requiredVipLevel?: true
    resetCycle?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VipTaskMaxAggregateInputType = {
    id?: true
    taskType?: true
    title?: true
    description?: true
    xpReward?: true
    itemRewardId?: true
    bonusRewardAmount?: true
    bonusCurrencyId?: true
    targetValue?: true
    durationDays?: true
    isActive?: true
    requiredVipLevel?: true
    resetCycle?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VipTaskCountAggregateInputType = {
    id?: true
    taskType?: true
    title?: true
    description?: true
    xpReward?: true
    itemRewardId?: true
    bonusRewardAmount?: true
    bonusCurrencyId?: true
    targetValue?: true
    durationDays?: true
    isActive?: true
    requiredVipLevel?: true
    resetCycle?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VipTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VipTask to aggregate.
     */
    where?: VipTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipTasks to fetch.
     */
    orderBy?: VipTaskOrderByWithRelationInput | VipTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VipTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VipTasks
    **/
    _count?: true | VipTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VipTaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VipTaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VipTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VipTaskMaxAggregateInputType
  }

  export type GetVipTaskAggregateType<T extends VipTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateVipTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVipTask[P]>
      : GetScalarType<T[P], AggregateVipTask[P]>
  }




  export type VipTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VipTaskWhereInput
    orderBy?: VipTaskOrderByWithAggregationInput | VipTaskOrderByWithAggregationInput[]
    by: VipTaskScalarFieldEnum[] | VipTaskScalarFieldEnum
    having?: VipTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VipTaskCountAggregateInputType | true
    _avg?: VipTaskAvgAggregateInputType
    _sum?: VipTaskSumAggregateInputType
    _min?: VipTaskMinAggregateInputType
    _max?: VipTaskMaxAggregateInputType
  }

  export type VipTaskGroupByOutputType = {
    id: string
    taskType: $Enums.VipTaskType
    title: string | null
    description: string
    xpReward: number | null
    itemRewardId: string | null
    bonusRewardAmount: number | null
    bonusCurrencyId: string | null
    targetValue: number | null
    durationDays: number | null
    isActive: boolean
    requiredVipLevel: number
    resetCycle: string | null
    createdAt: Date
    updatedAt: Date
    _count: VipTaskCountAggregateOutputType | null
    _avg: VipTaskAvgAggregateOutputType | null
    _sum: VipTaskSumAggregateOutputType | null
    _min: VipTaskMinAggregateOutputType | null
    _max: VipTaskMaxAggregateOutputType | null
  }

  type GetVipTaskGroupByPayload<T extends VipTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VipTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VipTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VipTaskGroupByOutputType[P]>
            : GetScalarType<T[P], VipTaskGroupByOutputType[P]>
        }
      >
    >


  export type VipTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskType?: boolean
    title?: boolean
    description?: boolean
    xpReward?: boolean
    itemRewardId?: boolean
    bonusRewardAmount?: boolean
    bonusCurrencyId?: boolean
    targetValue?: boolean
    durationDays?: boolean
    isActive?: boolean
    requiredVipLevel?: boolean
    resetCycle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userTaskProgress?: boolean | VipTask$userTaskProgressArgs<ExtArgs>
    _count?: boolean | VipTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vipTask"]>

  export type VipTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskType?: boolean
    title?: boolean
    description?: boolean
    xpReward?: boolean
    itemRewardId?: boolean
    bonusRewardAmount?: boolean
    bonusCurrencyId?: boolean
    targetValue?: boolean
    durationDays?: boolean
    isActive?: boolean
    requiredVipLevel?: boolean
    resetCycle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["vipTask"]>

  export type VipTaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskType?: boolean
    title?: boolean
    description?: boolean
    xpReward?: boolean
    itemRewardId?: boolean
    bonusRewardAmount?: boolean
    bonusCurrencyId?: boolean
    targetValue?: boolean
    durationDays?: boolean
    isActive?: boolean
    requiredVipLevel?: boolean
    resetCycle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["vipTask"]>

  export type VipTaskSelectScalar = {
    id?: boolean
    taskType?: boolean
    title?: boolean
    description?: boolean
    xpReward?: boolean
    itemRewardId?: boolean
    bonusRewardAmount?: boolean
    bonusCurrencyId?: boolean
    targetValue?: boolean
    durationDays?: boolean
    isActive?: boolean
    requiredVipLevel?: boolean
    resetCycle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VipTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "taskType" | "title" | "description" | "xpReward" | "itemRewardId" | "bonusRewardAmount" | "bonusCurrencyId" | "targetValue" | "durationDays" | "isActive" | "requiredVipLevel" | "resetCycle" | "createdAt" | "updatedAt", ExtArgs["result"]["vipTask"]>
  export type VipTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userTaskProgress?: boolean | VipTask$userTaskProgressArgs<ExtArgs>
    _count?: boolean | VipTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VipTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VipTaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VipTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VipTask"
    objects: {
      userTaskProgress: Prisma.$UserVipTaskProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      taskType: $Enums.VipTaskType
      title: string | null
      description: string
      xpReward: number | null
      itemRewardId: string | null
      bonusRewardAmount: number | null
      bonusCurrencyId: string | null
      targetValue: number | null
      durationDays: number | null
      isActive: boolean
      requiredVipLevel: number
      resetCycle: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vipTask"]>
    composites: {}
  }

  type VipTaskGetPayload<S extends boolean | null | undefined | VipTaskDefaultArgs> = $Result.GetResult<Prisma.$VipTaskPayload, S>

  type VipTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VipTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VipTaskCountAggregateInputType | true
    }

  export interface VipTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VipTask'], meta: { name: 'VipTask' } }
    /**
     * Find zero or one VipTask that matches the filter.
     * @param {VipTaskFindUniqueArgs} args - Arguments to find a VipTask
     * @example
     * // Get one VipTask
     * const vipTask = await prisma.vipTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VipTaskFindUniqueArgs>(args: SelectSubset<T, VipTaskFindUniqueArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VipTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VipTaskFindUniqueOrThrowArgs} args - Arguments to find a VipTask
     * @example
     * // Get one VipTask
     * const vipTask = await prisma.vipTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VipTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, VipTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VipTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipTaskFindFirstArgs} args - Arguments to find a VipTask
     * @example
     * // Get one VipTask
     * const vipTask = await prisma.vipTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VipTaskFindFirstArgs>(args?: SelectSubset<T, VipTaskFindFirstArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VipTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipTaskFindFirstOrThrowArgs} args - Arguments to find a VipTask
     * @example
     * // Get one VipTask
     * const vipTask = await prisma.vipTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VipTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, VipTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VipTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VipTasks
     * const vipTasks = await prisma.vipTask.findMany()
     * 
     * // Get first 10 VipTasks
     * const vipTasks = await prisma.vipTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vipTaskWithIdOnly = await prisma.vipTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VipTaskFindManyArgs>(args?: SelectSubset<T, VipTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VipTask.
     * @param {VipTaskCreateArgs} args - Arguments to create a VipTask.
     * @example
     * // Create one VipTask
     * const VipTask = await prisma.vipTask.create({
     *   data: {
     *     // ... data to create a VipTask
     *   }
     * })
     * 
     */
    create<T extends VipTaskCreateArgs>(args: SelectSubset<T, VipTaskCreateArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VipTasks.
     * @param {VipTaskCreateManyArgs} args - Arguments to create many VipTasks.
     * @example
     * // Create many VipTasks
     * const vipTask = await prisma.vipTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VipTaskCreateManyArgs>(args?: SelectSubset<T, VipTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VipTasks and returns the data saved in the database.
     * @param {VipTaskCreateManyAndReturnArgs} args - Arguments to create many VipTasks.
     * @example
     * // Create many VipTasks
     * const vipTask = await prisma.vipTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VipTasks and only return the `id`
     * const vipTaskWithIdOnly = await prisma.vipTask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VipTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, VipTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VipTask.
     * @param {VipTaskDeleteArgs} args - Arguments to delete one VipTask.
     * @example
     * // Delete one VipTask
     * const VipTask = await prisma.vipTask.delete({
     *   where: {
     *     // ... filter to delete one VipTask
     *   }
     * })
     * 
     */
    delete<T extends VipTaskDeleteArgs>(args: SelectSubset<T, VipTaskDeleteArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VipTask.
     * @param {VipTaskUpdateArgs} args - Arguments to update one VipTask.
     * @example
     * // Update one VipTask
     * const vipTask = await prisma.vipTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VipTaskUpdateArgs>(args: SelectSubset<T, VipTaskUpdateArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VipTasks.
     * @param {VipTaskDeleteManyArgs} args - Arguments to filter VipTasks to delete.
     * @example
     * // Delete a few VipTasks
     * const { count } = await prisma.vipTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VipTaskDeleteManyArgs>(args?: SelectSubset<T, VipTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VipTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VipTasks
     * const vipTask = await prisma.vipTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VipTaskUpdateManyArgs>(args: SelectSubset<T, VipTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VipTasks and returns the data updated in the database.
     * @param {VipTaskUpdateManyAndReturnArgs} args - Arguments to update many VipTasks.
     * @example
     * // Update many VipTasks
     * const vipTask = await prisma.vipTask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VipTasks and only return the `id`
     * const vipTaskWithIdOnly = await prisma.vipTask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VipTaskUpdateManyAndReturnArgs>(args: SelectSubset<T, VipTaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VipTask.
     * @param {VipTaskUpsertArgs} args - Arguments to update or create a VipTask.
     * @example
     * // Update or create a VipTask
     * const vipTask = await prisma.vipTask.upsert({
     *   create: {
     *     // ... data to create a VipTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VipTask we want to update
     *   }
     * })
     */
    upsert<T extends VipTaskUpsertArgs>(args: SelectSubset<T, VipTaskUpsertArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VipTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipTaskCountArgs} args - Arguments to filter VipTasks to count.
     * @example
     * // Count the number of VipTasks
     * const count = await prisma.vipTask.count({
     *   where: {
     *     // ... the filter for the VipTasks we want to count
     *   }
     * })
    **/
    count<T extends VipTaskCountArgs>(
      args?: Subset<T, VipTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VipTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VipTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VipTaskAggregateArgs>(args: Subset<T, VipTaskAggregateArgs>): Prisma.PrismaPromise<GetVipTaskAggregateType<T>>

    /**
     * Group by VipTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VipTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VipTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VipTaskGroupByArgs['orderBy'] }
        : { orderBy?: VipTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VipTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVipTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VipTask model
   */
  readonly fields: VipTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VipTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VipTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userTaskProgress<T extends VipTask$userTaskProgressArgs<ExtArgs> = {}>(args?: Subset<T, VipTask$userTaskProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VipTask model
   */
  interface VipTaskFieldRefs {
    readonly id: FieldRef<"VipTask", 'String'>
    readonly taskType: FieldRef<"VipTask", 'VipTaskType'>
    readonly title: FieldRef<"VipTask", 'String'>
    readonly description: FieldRef<"VipTask", 'String'>
    readonly xpReward: FieldRef<"VipTask", 'Int'>
    readonly itemRewardId: FieldRef<"VipTask", 'String'>
    readonly bonusRewardAmount: FieldRef<"VipTask", 'Int'>
    readonly bonusCurrencyId: FieldRef<"VipTask", 'String'>
    readonly targetValue: FieldRef<"VipTask", 'Int'>
    readonly durationDays: FieldRef<"VipTask", 'Int'>
    readonly isActive: FieldRef<"VipTask", 'Boolean'>
    readonly requiredVipLevel: FieldRef<"VipTask", 'Int'>
    readonly resetCycle: FieldRef<"VipTask", 'String'>
    readonly createdAt: FieldRef<"VipTask", 'DateTime'>
    readonly updatedAt: FieldRef<"VipTask", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VipTask findUnique
   */
  export type VipTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * Filter, which VipTask to fetch.
     */
    where: VipTaskWhereUniqueInput
  }

  /**
   * VipTask findUniqueOrThrow
   */
  export type VipTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * Filter, which VipTask to fetch.
     */
    where: VipTaskWhereUniqueInput
  }

  /**
   * VipTask findFirst
   */
  export type VipTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * Filter, which VipTask to fetch.
     */
    where?: VipTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipTasks to fetch.
     */
    orderBy?: VipTaskOrderByWithRelationInput | VipTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VipTasks.
     */
    cursor?: VipTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VipTasks.
     */
    distinct?: VipTaskScalarFieldEnum | VipTaskScalarFieldEnum[]
  }

  /**
   * VipTask findFirstOrThrow
   */
  export type VipTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * Filter, which VipTask to fetch.
     */
    where?: VipTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipTasks to fetch.
     */
    orderBy?: VipTaskOrderByWithRelationInput | VipTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VipTasks.
     */
    cursor?: VipTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VipTasks.
     */
    distinct?: VipTaskScalarFieldEnum | VipTaskScalarFieldEnum[]
  }

  /**
   * VipTask findMany
   */
  export type VipTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * Filter, which VipTasks to fetch.
     */
    where?: VipTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VipTasks to fetch.
     */
    orderBy?: VipTaskOrderByWithRelationInput | VipTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VipTasks.
     */
    cursor?: VipTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VipTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VipTasks.
     */
    skip?: number
    distinct?: VipTaskScalarFieldEnum | VipTaskScalarFieldEnum[]
  }

  /**
   * VipTask create
   */
  export type VipTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a VipTask.
     */
    data: XOR<VipTaskCreateInput, VipTaskUncheckedCreateInput>
  }

  /**
   * VipTask createMany
   */
  export type VipTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VipTasks.
     */
    data: VipTaskCreateManyInput | VipTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VipTask createManyAndReturn
   */
  export type VipTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * The data used to create many VipTasks.
     */
    data: VipTaskCreateManyInput | VipTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VipTask update
   */
  export type VipTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a VipTask.
     */
    data: XOR<VipTaskUpdateInput, VipTaskUncheckedUpdateInput>
    /**
     * Choose, which VipTask to update.
     */
    where: VipTaskWhereUniqueInput
  }

  /**
   * VipTask updateMany
   */
  export type VipTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VipTasks.
     */
    data: XOR<VipTaskUpdateManyMutationInput, VipTaskUncheckedUpdateManyInput>
    /**
     * Filter which VipTasks to update
     */
    where?: VipTaskWhereInput
    /**
     * Limit how many VipTasks to update.
     */
    limit?: number
  }

  /**
   * VipTask updateManyAndReturn
   */
  export type VipTaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * The data used to update VipTasks.
     */
    data: XOR<VipTaskUpdateManyMutationInput, VipTaskUncheckedUpdateManyInput>
    /**
     * Filter which VipTasks to update
     */
    where?: VipTaskWhereInput
    /**
     * Limit how many VipTasks to update.
     */
    limit?: number
  }

  /**
   * VipTask upsert
   */
  export type VipTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the VipTask to update in case it exists.
     */
    where: VipTaskWhereUniqueInput
    /**
     * In case the VipTask found by the `where` argument doesn't exist, create a new VipTask with this data.
     */
    create: XOR<VipTaskCreateInput, VipTaskUncheckedCreateInput>
    /**
     * In case the VipTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VipTaskUpdateInput, VipTaskUncheckedUpdateInput>
  }

  /**
   * VipTask delete
   */
  export type VipTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
    /**
     * Filter which VipTask to delete.
     */
    where: VipTaskWhereUniqueInput
  }

  /**
   * VipTask deleteMany
   */
  export type VipTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VipTasks to delete
     */
    where?: VipTaskWhereInput
    /**
     * Limit how many VipTasks to delete.
     */
    limit?: number
  }

  /**
   * VipTask.userTaskProgress
   */
  export type VipTask$userTaskProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    where?: UserVipTaskProgressWhereInput
    orderBy?: UserVipTaskProgressOrderByWithRelationInput | UserVipTaskProgressOrderByWithRelationInput[]
    cursor?: UserVipTaskProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserVipTaskProgressScalarFieldEnum | UserVipTaskProgressScalarFieldEnum[]
  }

  /**
   * VipTask without action
   */
  export type VipTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VipTask
     */
    select?: VipTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VipTask
     */
    omit?: VipTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VipTaskInclude<ExtArgs> | null
  }


  /**
   * Model UserVipTaskProgress
   */

  export type AggregateUserVipTaskProgress = {
    _count: UserVipTaskProgressCountAggregateOutputType | null
    _avg: UserVipTaskProgressAvgAggregateOutputType | null
    _sum: UserVipTaskProgressSumAggregateOutputType | null
    _min: UserVipTaskProgressMinAggregateOutputType | null
    _max: UserVipTaskProgressMaxAggregateOutputType | null
  }

  export type UserVipTaskProgressAvgAggregateOutputType = {
    progress: number | null
  }

  export type UserVipTaskProgressSumAggregateOutputType = {
    progress: number | null
  }

  export type UserVipTaskProgressMinAggregateOutputType = {
    id: string | null
    userId: string | null
    taskId: string | null
    progress: number | null
    isCompleted: boolean | null
    rewardClaimedAt: Date | null
    lastProgressAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserVipTaskProgressMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    taskId: string | null
    progress: number | null
    isCompleted: boolean | null
    rewardClaimedAt: Date | null
    lastProgressAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserVipTaskProgressCountAggregateOutputType = {
    id: number
    userId: number
    taskId: number
    progress: number
    isCompleted: number
    rewardClaimedAt: number
    lastProgressAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserVipTaskProgressAvgAggregateInputType = {
    progress?: true
  }

  export type UserVipTaskProgressSumAggregateInputType = {
    progress?: true
  }

  export type UserVipTaskProgressMinAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
    progress?: true
    isCompleted?: true
    rewardClaimedAt?: true
    lastProgressAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserVipTaskProgressMaxAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
    progress?: true
    isCompleted?: true
    rewardClaimedAt?: true
    lastProgressAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserVipTaskProgressCountAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
    progress?: true
    isCompleted?: true
    rewardClaimedAt?: true
    lastProgressAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserVipTaskProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserVipTaskProgress to aggregate.
     */
    where?: UserVipTaskProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVipTaskProgresses to fetch.
     */
    orderBy?: UserVipTaskProgressOrderByWithRelationInput | UserVipTaskProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserVipTaskProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVipTaskProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVipTaskProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserVipTaskProgresses
    **/
    _count?: true | UserVipTaskProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserVipTaskProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserVipTaskProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserVipTaskProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserVipTaskProgressMaxAggregateInputType
  }

  export type GetUserVipTaskProgressAggregateType<T extends UserVipTaskProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserVipTaskProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserVipTaskProgress[P]>
      : GetScalarType<T[P], AggregateUserVipTaskProgress[P]>
  }




  export type UserVipTaskProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserVipTaskProgressWhereInput
    orderBy?: UserVipTaskProgressOrderByWithAggregationInput | UserVipTaskProgressOrderByWithAggregationInput[]
    by: UserVipTaskProgressScalarFieldEnum[] | UserVipTaskProgressScalarFieldEnum
    having?: UserVipTaskProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserVipTaskProgressCountAggregateInputType | true
    _avg?: UserVipTaskProgressAvgAggregateInputType
    _sum?: UserVipTaskProgressSumAggregateInputType
    _min?: UserVipTaskProgressMinAggregateInputType
    _max?: UserVipTaskProgressMaxAggregateInputType
  }

  export type UserVipTaskProgressGroupByOutputType = {
    id: string
    userId: string
    taskId: string
    progress: number
    isCompleted: boolean
    rewardClaimedAt: Date | null
    lastProgressAt: Date
    createdAt: Date
    updatedAt: Date
    _count: UserVipTaskProgressCountAggregateOutputType | null
    _avg: UserVipTaskProgressAvgAggregateOutputType | null
    _sum: UserVipTaskProgressSumAggregateOutputType | null
    _min: UserVipTaskProgressMinAggregateOutputType | null
    _max: UserVipTaskProgressMaxAggregateOutputType | null
  }

  type GetUserVipTaskProgressGroupByPayload<T extends UserVipTaskProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserVipTaskProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserVipTaskProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserVipTaskProgressGroupByOutputType[P]>
            : GetScalarType<T[P], UserVipTaskProgressGroupByOutputType[P]>
        }
      >
    >


  export type UserVipTaskProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    taskId?: boolean
    progress?: boolean
    isCompleted?: boolean
    rewardClaimedAt?: boolean
    lastProgressAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | VipTaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userVipTaskProgress"]>

  export type UserVipTaskProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    taskId?: boolean
    progress?: boolean
    isCompleted?: boolean
    rewardClaimedAt?: boolean
    lastProgressAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | VipTaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userVipTaskProgress"]>

  export type UserVipTaskProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    taskId?: boolean
    progress?: boolean
    isCompleted?: boolean
    rewardClaimedAt?: boolean
    lastProgressAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | VipTaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userVipTaskProgress"]>

  export type UserVipTaskProgressSelectScalar = {
    id?: boolean
    userId?: boolean
    taskId?: boolean
    progress?: boolean
    isCompleted?: boolean
    rewardClaimedAt?: boolean
    lastProgressAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserVipTaskProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "taskId" | "progress" | "isCompleted" | "rewardClaimedAt" | "lastProgressAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userVipTaskProgress"]>
  export type UserVipTaskProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | VipTaskDefaultArgs<ExtArgs>
  }
  export type UserVipTaskProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | VipTaskDefaultArgs<ExtArgs>
  }
  export type UserVipTaskProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | VipTaskDefaultArgs<ExtArgs>
  }

  export type $UserVipTaskProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserVipTaskProgress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$VipTaskPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      taskId: string
      progress: number
      isCompleted: boolean
      rewardClaimedAt: Date | null
      lastProgressAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userVipTaskProgress"]>
    composites: {}
  }

  type UserVipTaskProgressGetPayload<S extends boolean | null | undefined | UserVipTaskProgressDefaultArgs> = $Result.GetResult<Prisma.$UserVipTaskProgressPayload, S>

  type UserVipTaskProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserVipTaskProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserVipTaskProgressCountAggregateInputType | true
    }

  export interface UserVipTaskProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserVipTaskProgress'], meta: { name: 'UserVipTaskProgress' } }
    /**
     * Find zero or one UserVipTaskProgress that matches the filter.
     * @param {UserVipTaskProgressFindUniqueArgs} args - Arguments to find a UserVipTaskProgress
     * @example
     * // Get one UserVipTaskProgress
     * const userVipTaskProgress = await prisma.userVipTaskProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserVipTaskProgressFindUniqueArgs>(args: SelectSubset<T, UserVipTaskProgressFindUniqueArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserVipTaskProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserVipTaskProgressFindUniqueOrThrowArgs} args - Arguments to find a UserVipTaskProgress
     * @example
     * // Get one UserVipTaskProgress
     * const userVipTaskProgress = await prisma.userVipTaskProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserVipTaskProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, UserVipTaskProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserVipTaskProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVipTaskProgressFindFirstArgs} args - Arguments to find a UserVipTaskProgress
     * @example
     * // Get one UserVipTaskProgress
     * const userVipTaskProgress = await prisma.userVipTaskProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserVipTaskProgressFindFirstArgs>(args?: SelectSubset<T, UserVipTaskProgressFindFirstArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserVipTaskProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVipTaskProgressFindFirstOrThrowArgs} args - Arguments to find a UserVipTaskProgress
     * @example
     * // Get one UserVipTaskProgress
     * const userVipTaskProgress = await prisma.userVipTaskProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserVipTaskProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, UserVipTaskProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserVipTaskProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVipTaskProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserVipTaskProgresses
     * const userVipTaskProgresses = await prisma.userVipTaskProgress.findMany()
     * 
     * // Get first 10 UserVipTaskProgresses
     * const userVipTaskProgresses = await prisma.userVipTaskProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userVipTaskProgressWithIdOnly = await prisma.userVipTaskProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserVipTaskProgressFindManyArgs>(args?: SelectSubset<T, UserVipTaskProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserVipTaskProgress.
     * @param {UserVipTaskProgressCreateArgs} args - Arguments to create a UserVipTaskProgress.
     * @example
     * // Create one UserVipTaskProgress
     * const UserVipTaskProgress = await prisma.userVipTaskProgress.create({
     *   data: {
     *     // ... data to create a UserVipTaskProgress
     *   }
     * })
     * 
     */
    create<T extends UserVipTaskProgressCreateArgs>(args: SelectSubset<T, UserVipTaskProgressCreateArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserVipTaskProgresses.
     * @param {UserVipTaskProgressCreateManyArgs} args - Arguments to create many UserVipTaskProgresses.
     * @example
     * // Create many UserVipTaskProgresses
     * const userVipTaskProgress = await prisma.userVipTaskProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserVipTaskProgressCreateManyArgs>(args?: SelectSubset<T, UserVipTaskProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserVipTaskProgresses and returns the data saved in the database.
     * @param {UserVipTaskProgressCreateManyAndReturnArgs} args - Arguments to create many UserVipTaskProgresses.
     * @example
     * // Create many UserVipTaskProgresses
     * const userVipTaskProgress = await prisma.userVipTaskProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserVipTaskProgresses and only return the `id`
     * const userVipTaskProgressWithIdOnly = await prisma.userVipTaskProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserVipTaskProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, UserVipTaskProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserVipTaskProgress.
     * @param {UserVipTaskProgressDeleteArgs} args - Arguments to delete one UserVipTaskProgress.
     * @example
     * // Delete one UserVipTaskProgress
     * const UserVipTaskProgress = await prisma.userVipTaskProgress.delete({
     *   where: {
     *     // ... filter to delete one UserVipTaskProgress
     *   }
     * })
     * 
     */
    delete<T extends UserVipTaskProgressDeleteArgs>(args: SelectSubset<T, UserVipTaskProgressDeleteArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserVipTaskProgress.
     * @param {UserVipTaskProgressUpdateArgs} args - Arguments to update one UserVipTaskProgress.
     * @example
     * // Update one UserVipTaskProgress
     * const userVipTaskProgress = await prisma.userVipTaskProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserVipTaskProgressUpdateArgs>(args: SelectSubset<T, UserVipTaskProgressUpdateArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserVipTaskProgresses.
     * @param {UserVipTaskProgressDeleteManyArgs} args - Arguments to filter UserVipTaskProgresses to delete.
     * @example
     * // Delete a few UserVipTaskProgresses
     * const { count } = await prisma.userVipTaskProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserVipTaskProgressDeleteManyArgs>(args?: SelectSubset<T, UserVipTaskProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserVipTaskProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVipTaskProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserVipTaskProgresses
     * const userVipTaskProgress = await prisma.userVipTaskProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserVipTaskProgressUpdateManyArgs>(args: SelectSubset<T, UserVipTaskProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserVipTaskProgresses and returns the data updated in the database.
     * @param {UserVipTaskProgressUpdateManyAndReturnArgs} args - Arguments to update many UserVipTaskProgresses.
     * @example
     * // Update many UserVipTaskProgresses
     * const userVipTaskProgress = await prisma.userVipTaskProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserVipTaskProgresses and only return the `id`
     * const userVipTaskProgressWithIdOnly = await prisma.userVipTaskProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserVipTaskProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, UserVipTaskProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserVipTaskProgress.
     * @param {UserVipTaskProgressUpsertArgs} args - Arguments to update or create a UserVipTaskProgress.
     * @example
     * // Update or create a UserVipTaskProgress
     * const userVipTaskProgress = await prisma.userVipTaskProgress.upsert({
     *   create: {
     *     // ... data to create a UserVipTaskProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserVipTaskProgress we want to update
     *   }
     * })
     */
    upsert<T extends UserVipTaskProgressUpsertArgs>(args: SelectSubset<T, UserVipTaskProgressUpsertArgs<ExtArgs>>): Prisma__UserVipTaskProgressClient<$Result.GetResult<Prisma.$UserVipTaskProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserVipTaskProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVipTaskProgressCountArgs} args - Arguments to filter UserVipTaskProgresses to count.
     * @example
     * // Count the number of UserVipTaskProgresses
     * const count = await prisma.userVipTaskProgress.count({
     *   where: {
     *     // ... the filter for the UserVipTaskProgresses we want to count
     *   }
     * })
    **/
    count<T extends UserVipTaskProgressCountArgs>(
      args?: Subset<T, UserVipTaskProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserVipTaskProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserVipTaskProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVipTaskProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserVipTaskProgressAggregateArgs>(args: Subset<T, UserVipTaskProgressAggregateArgs>): Prisma.PrismaPromise<GetUserVipTaskProgressAggregateType<T>>

    /**
     * Group by UserVipTaskProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVipTaskProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserVipTaskProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserVipTaskProgressGroupByArgs['orderBy'] }
        : { orderBy?: UserVipTaskProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserVipTaskProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserVipTaskProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserVipTaskProgress model
   */
  readonly fields: UserVipTaskProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserVipTaskProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserVipTaskProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    task<T extends VipTaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VipTaskDefaultArgs<ExtArgs>>): Prisma__VipTaskClient<$Result.GetResult<Prisma.$VipTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserVipTaskProgress model
   */
  interface UserVipTaskProgressFieldRefs {
    readonly id: FieldRef<"UserVipTaskProgress", 'String'>
    readonly userId: FieldRef<"UserVipTaskProgress", 'String'>
    readonly taskId: FieldRef<"UserVipTaskProgress", 'String'>
    readonly progress: FieldRef<"UserVipTaskProgress", 'Float'>
    readonly isCompleted: FieldRef<"UserVipTaskProgress", 'Boolean'>
    readonly rewardClaimedAt: FieldRef<"UserVipTaskProgress", 'DateTime'>
    readonly lastProgressAt: FieldRef<"UserVipTaskProgress", 'DateTime'>
    readonly createdAt: FieldRef<"UserVipTaskProgress", 'DateTime'>
    readonly updatedAt: FieldRef<"UserVipTaskProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserVipTaskProgress findUnique
   */
  export type UserVipTaskProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserVipTaskProgress to fetch.
     */
    where: UserVipTaskProgressWhereUniqueInput
  }

  /**
   * UserVipTaskProgress findUniqueOrThrow
   */
  export type UserVipTaskProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserVipTaskProgress to fetch.
     */
    where: UserVipTaskProgressWhereUniqueInput
  }

  /**
   * UserVipTaskProgress findFirst
   */
  export type UserVipTaskProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserVipTaskProgress to fetch.
     */
    where?: UserVipTaskProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVipTaskProgresses to fetch.
     */
    orderBy?: UserVipTaskProgressOrderByWithRelationInput | UserVipTaskProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserVipTaskProgresses.
     */
    cursor?: UserVipTaskProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVipTaskProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVipTaskProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserVipTaskProgresses.
     */
    distinct?: UserVipTaskProgressScalarFieldEnum | UserVipTaskProgressScalarFieldEnum[]
  }

  /**
   * UserVipTaskProgress findFirstOrThrow
   */
  export type UserVipTaskProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserVipTaskProgress to fetch.
     */
    where?: UserVipTaskProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVipTaskProgresses to fetch.
     */
    orderBy?: UserVipTaskProgressOrderByWithRelationInput | UserVipTaskProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserVipTaskProgresses.
     */
    cursor?: UserVipTaskProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVipTaskProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVipTaskProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserVipTaskProgresses.
     */
    distinct?: UserVipTaskProgressScalarFieldEnum | UserVipTaskProgressScalarFieldEnum[]
  }

  /**
   * UserVipTaskProgress findMany
   */
  export type UserVipTaskProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserVipTaskProgresses to fetch.
     */
    where?: UserVipTaskProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVipTaskProgresses to fetch.
     */
    orderBy?: UserVipTaskProgressOrderByWithRelationInput | UserVipTaskProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserVipTaskProgresses.
     */
    cursor?: UserVipTaskProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVipTaskProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVipTaskProgresses.
     */
    skip?: number
    distinct?: UserVipTaskProgressScalarFieldEnum | UserVipTaskProgressScalarFieldEnum[]
  }

  /**
   * UserVipTaskProgress create
   */
  export type UserVipTaskProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a UserVipTaskProgress.
     */
    data: XOR<UserVipTaskProgressCreateInput, UserVipTaskProgressUncheckedCreateInput>
  }

  /**
   * UserVipTaskProgress createMany
   */
  export type UserVipTaskProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserVipTaskProgresses.
     */
    data: UserVipTaskProgressCreateManyInput | UserVipTaskProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserVipTaskProgress createManyAndReturn
   */
  export type UserVipTaskProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * The data used to create many UserVipTaskProgresses.
     */
    data: UserVipTaskProgressCreateManyInput | UserVipTaskProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserVipTaskProgress update
   */
  export type UserVipTaskProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a UserVipTaskProgress.
     */
    data: XOR<UserVipTaskProgressUpdateInput, UserVipTaskProgressUncheckedUpdateInput>
    /**
     * Choose, which UserVipTaskProgress to update.
     */
    where: UserVipTaskProgressWhereUniqueInput
  }

  /**
   * UserVipTaskProgress updateMany
   */
  export type UserVipTaskProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserVipTaskProgresses.
     */
    data: XOR<UserVipTaskProgressUpdateManyMutationInput, UserVipTaskProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserVipTaskProgresses to update
     */
    where?: UserVipTaskProgressWhereInput
    /**
     * Limit how many UserVipTaskProgresses to update.
     */
    limit?: number
  }

  /**
   * UserVipTaskProgress updateManyAndReturn
   */
  export type UserVipTaskProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * The data used to update UserVipTaskProgresses.
     */
    data: XOR<UserVipTaskProgressUpdateManyMutationInput, UserVipTaskProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserVipTaskProgresses to update
     */
    where?: UserVipTaskProgressWhereInput
    /**
     * Limit how many UserVipTaskProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserVipTaskProgress upsert
   */
  export type UserVipTaskProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the UserVipTaskProgress to update in case it exists.
     */
    where: UserVipTaskProgressWhereUniqueInput
    /**
     * In case the UserVipTaskProgress found by the `where` argument doesn't exist, create a new UserVipTaskProgress with this data.
     */
    create: XOR<UserVipTaskProgressCreateInput, UserVipTaskProgressUncheckedCreateInput>
    /**
     * In case the UserVipTaskProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserVipTaskProgressUpdateInput, UserVipTaskProgressUncheckedUpdateInput>
  }

  /**
   * UserVipTaskProgress delete
   */
  export type UserVipTaskProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
    /**
     * Filter which UserVipTaskProgress to delete.
     */
    where: UserVipTaskProgressWhereUniqueInput
  }

  /**
   * UserVipTaskProgress deleteMany
   */
  export type UserVipTaskProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserVipTaskProgresses to delete
     */
    where?: UserVipTaskProgressWhereInput
    /**
     * Limit how many UserVipTaskProgresses to delete.
     */
    limit?: number
  }

  /**
   * UserVipTaskProgress without action
   */
  export type UserVipTaskProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVipTaskProgress
     */
    select?: UserVipTaskProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVipTaskProgress
     */
    omit?: UserVipTaskProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVipTaskProgressInclude<ExtArgs> | null
  }


  /**
   * Model RebateTransaction
   */

  export type AggregateRebateTransaction = {
    _count: RebateTransactionCountAggregateOutputType | null
    _avg: RebateTransactionAvgAggregateOutputType | null
    _sum: RebateTransactionSumAggregateOutputType | null
    _min: RebateTransactionMinAggregateOutputType | null
    _max: RebateTransactionMaxAggregateOutputType | null
  }

  export type RebateTransactionAvgAggregateOutputType = {
    rebateAmount: number | null
    vipLevel: number | null
    rebatePercentage: number | null
  }

  export type RebateTransactionSumAggregateOutputType = {
    rebateAmount: number | null
    vipLevel: number | null
    rebatePercentage: number | null
  }

  export type RebateTransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    transactionId: string | null
    rebateAmount: number | null
    currencyId: string | null
    vipLevel: number | null
    rebatePercentage: number | null
    status: $Enums.RewardStatus | null
    paidOutAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RebateTransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    transactionId: string | null
    rebateAmount: number | null
    currencyId: string | null
    vipLevel: number | null
    rebatePercentage: number | null
    status: $Enums.RewardStatus | null
    paidOutAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RebateTransactionCountAggregateOutputType = {
    id: number
    userId: number
    transactionId: number
    rebateAmount: number
    currencyId: number
    vipLevel: number
    rebatePercentage: number
    status: number
    paidOutAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RebateTransactionAvgAggregateInputType = {
    rebateAmount?: true
    vipLevel?: true
    rebatePercentage?: true
  }

  export type RebateTransactionSumAggregateInputType = {
    rebateAmount?: true
    vipLevel?: true
    rebatePercentage?: true
  }

  export type RebateTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    transactionId?: true
    rebateAmount?: true
    currencyId?: true
    vipLevel?: true
    rebatePercentage?: true
    status?: true
    paidOutAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RebateTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    transactionId?: true
    rebateAmount?: true
    currencyId?: true
    vipLevel?: true
    rebatePercentage?: true
    status?: true
    paidOutAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RebateTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    transactionId?: true
    rebateAmount?: true
    currencyId?: true
    vipLevel?: true
    rebatePercentage?: true
    status?: true
    paidOutAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RebateTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RebateTransaction to aggregate.
     */
    where?: RebateTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RebateTransactions to fetch.
     */
    orderBy?: RebateTransactionOrderByWithRelationInput | RebateTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RebateTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RebateTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RebateTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RebateTransactions
    **/
    _count?: true | RebateTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RebateTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RebateTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RebateTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RebateTransactionMaxAggregateInputType
  }

  export type GetRebateTransactionAggregateType<T extends RebateTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateRebateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRebateTransaction[P]>
      : GetScalarType<T[P], AggregateRebateTransaction[P]>
  }




  export type RebateTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RebateTransactionWhereInput
    orderBy?: RebateTransactionOrderByWithAggregationInput | RebateTransactionOrderByWithAggregationInput[]
    by: RebateTransactionScalarFieldEnum[] | RebateTransactionScalarFieldEnum
    having?: RebateTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RebateTransactionCountAggregateInputType | true
    _avg?: RebateTransactionAvgAggregateInputType
    _sum?: RebateTransactionSumAggregateInputType
    _min?: RebateTransactionMinAggregateInputType
    _max?: RebateTransactionMaxAggregateInputType
  }

  export type RebateTransactionGroupByOutputType = {
    id: string
    userId: string
    transactionId: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status: $Enums.RewardStatus
    paidOutAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: RebateTransactionCountAggregateOutputType | null
    _avg: RebateTransactionAvgAggregateOutputType | null
    _sum: RebateTransactionSumAggregateOutputType | null
    _min: RebateTransactionMinAggregateOutputType | null
    _max: RebateTransactionMaxAggregateOutputType | null
  }

  type GetRebateTransactionGroupByPayload<T extends RebateTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RebateTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RebateTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RebateTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], RebateTransactionGroupByOutputType[P]>
        }
      >
    >


  export type RebateTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    transactionId?: boolean
    rebateAmount?: boolean
    currencyId?: boolean
    vipLevel?: boolean
    rebatePercentage?: boolean
    status?: boolean
    paidOutAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    originalTransaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rebateTransaction"]>

  export type RebateTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    transactionId?: boolean
    rebateAmount?: boolean
    currencyId?: boolean
    vipLevel?: boolean
    rebatePercentage?: boolean
    status?: boolean
    paidOutAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    originalTransaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rebateTransaction"]>

  export type RebateTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    transactionId?: boolean
    rebateAmount?: boolean
    currencyId?: boolean
    vipLevel?: boolean
    rebatePercentage?: boolean
    status?: boolean
    paidOutAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    originalTransaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rebateTransaction"]>

  export type RebateTransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    transactionId?: boolean
    rebateAmount?: boolean
    currencyId?: boolean
    vipLevel?: boolean
    rebatePercentage?: boolean
    status?: boolean
    paidOutAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RebateTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "transactionId" | "rebateAmount" | "currencyId" | "vipLevel" | "rebatePercentage" | "status" | "paidOutAt" | "createdAt" | "updatedAt", ExtArgs["result"]["rebateTransaction"]>
  export type RebateTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    originalTransaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }
  export type RebateTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    originalTransaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }
  export type RebateTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    originalTransaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }

  export type $RebateTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RebateTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      originalTransaction: Prisma.$TransactionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      transactionId: string
      rebateAmount: number
      currencyId: string
      vipLevel: number
      rebatePercentage: number
      status: $Enums.RewardStatus
      paidOutAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rebateTransaction"]>
    composites: {}
  }

  type RebateTransactionGetPayload<S extends boolean | null | undefined | RebateTransactionDefaultArgs> = $Result.GetResult<Prisma.$RebateTransactionPayload, S>

  type RebateTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RebateTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RebateTransactionCountAggregateInputType | true
    }

  export interface RebateTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RebateTransaction'], meta: { name: 'RebateTransaction' } }
    /**
     * Find zero or one RebateTransaction that matches the filter.
     * @param {RebateTransactionFindUniqueArgs} args - Arguments to find a RebateTransaction
     * @example
     * // Get one RebateTransaction
     * const rebateTransaction = await prisma.rebateTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RebateTransactionFindUniqueArgs>(args: SelectSubset<T, RebateTransactionFindUniqueArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RebateTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RebateTransactionFindUniqueOrThrowArgs} args - Arguments to find a RebateTransaction
     * @example
     * // Get one RebateTransaction
     * const rebateTransaction = await prisma.rebateTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RebateTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, RebateTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RebateTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RebateTransactionFindFirstArgs} args - Arguments to find a RebateTransaction
     * @example
     * // Get one RebateTransaction
     * const rebateTransaction = await prisma.rebateTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RebateTransactionFindFirstArgs>(args?: SelectSubset<T, RebateTransactionFindFirstArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RebateTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RebateTransactionFindFirstOrThrowArgs} args - Arguments to find a RebateTransaction
     * @example
     * // Get one RebateTransaction
     * const rebateTransaction = await prisma.rebateTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RebateTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, RebateTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RebateTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RebateTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RebateTransactions
     * const rebateTransactions = await prisma.rebateTransaction.findMany()
     * 
     * // Get first 10 RebateTransactions
     * const rebateTransactions = await prisma.rebateTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rebateTransactionWithIdOnly = await prisma.rebateTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RebateTransactionFindManyArgs>(args?: SelectSubset<T, RebateTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RebateTransaction.
     * @param {RebateTransactionCreateArgs} args - Arguments to create a RebateTransaction.
     * @example
     * // Create one RebateTransaction
     * const RebateTransaction = await prisma.rebateTransaction.create({
     *   data: {
     *     // ... data to create a RebateTransaction
     *   }
     * })
     * 
     */
    create<T extends RebateTransactionCreateArgs>(args: SelectSubset<T, RebateTransactionCreateArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RebateTransactions.
     * @param {RebateTransactionCreateManyArgs} args - Arguments to create many RebateTransactions.
     * @example
     * // Create many RebateTransactions
     * const rebateTransaction = await prisma.rebateTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RebateTransactionCreateManyArgs>(args?: SelectSubset<T, RebateTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RebateTransactions and returns the data saved in the database.
     * @param {RebateTransactionCreateManyAndReturnArgs} args - Arguments to create many RebateTransactions.
     * @example
     * // Create many RebateTransactions
     * const rebateTransaction = await prisma.rebateTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RebateTransactions and only return the `id`
     * const rebateTransactionWithIdOnly = await prisma.rebateTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RebateTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, RebateTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RebateTransaction.
     * @param {RebateTransactionDeleteArgs} args - Arguments to delete one RebateTransaction.
     * @example
     * // Delete one RebateTransaction
     * const RebateTransaction = await prisma.rebateTransaction.delete({
     *   where: {
     *     // ... filter to delete one RebateTransaction
     *   }
     * })
     * 
     */
    delete<T extends RebateTransactionDeleteArgs>(args: SelectSubset<T, RebateTransactionDeleteArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RebateTransaction.
     * @param {RebateTransactionUpdateArgs} args - Arguments to update one RebateTransaction.
     * @example
     * // Update one RebateTransaction
     * const rebateTransaction = await prisma.rebateTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RebateTransactionUpdateArgs>(args: SelectSubset<T, RebateTransactionUpdateArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RebateTransactions.
     * @param {RebateTransactionDeleteManyArgs} args - Arguments to filter RebateTransactions to delete.
     * @example
     * // Delete a few RebateTransactions
     * const { count } = await prisma.rebateTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RebateTransactionDeleteManyArgs>(args?: SelectSubset<T, RebateTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RebateTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RebateTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RebateTransactions
     * const rebateTransaction = await prisma.rebateTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RebateTransactionUpdateManyArgs>(args: SelectSubset<T, RebateTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RebateTransactions and returns the data updated in the database.
     * @param {RebateTransactionUpdateManyAndReturnArgs} args - Arguments to update many RebateTransactions.
     * @example
     * // Update many RebateTransactions
     * const rebateTransaction = await prisma.rebateTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RebateTransactions and only return the `id`
     * const rebateTransactionWithIdOnly = await prisma.rebateTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RebateTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, RebateTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RebateTransaction.
     * @param {RebateTransactionUpsertArgs} args - Arguments to update or create a RebateTransaction.
     * @example
     * // Update or create a RebateTransaction
     * const rebateTransaction = await prisma.rebateTransaction.upsert({
     *   create: {
     *     // ... data to create a RebateTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RebateTransaction we want to update
     *   }
     * })
     */
    upsert<T extends RebateTransactionUpsertArgs>(args: SelectSubset<T, RebateTransactionUpsertArgs<ExtArgs>>): Prisma__RebateTransactionClient<$Result.GetResult<Prisma.$RebateTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RebateTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RebateTransactionCountArgs} args - Arguments to filter RebateTransactions to count.
     * @example
     * // Count the number of RebateTransactions
     * const count = await prisma.rebateTransaction.count({
     *   where: {
     *     // ... the filter for the RebateTransactions we want to count
     *   }
     * })
    **/
    count<T extends RebateTransactionCountArgs>(
      args?: Subset<T, RebateTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RebateTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RebateTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RebateTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RebateTransactionAggregateArgs>(args: Subset<T, RebateTransactionAggregateArgs>): Prisma.PrismaPromise<GetRebateTransactionAggregateType<T>>

    /**
     * Group by RebateTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RebateTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RebateTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RebateTransactionGroupByArgs['orderBy'] }
        : { orderBy?: RebateTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RebateTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRebateTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RebateTransaction model
   */
  readonly fields: RebateTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RebateTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RebateTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    originalTransaction<T extends TransactionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransactionDefaultArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RebateTransaction model
   */
  interface RebateTransactionFieldRefs {
    readonly id: FieldRef<"RebateTransaction", 'String'>
    readonly userId: FieldRef<"RebateTransaction", 'String'>
    readonly transactionId: FieldRef<"RebateTransaction", 'String'>
    readonly rebateAmount: FieldRef<"RebateTransaction", 'Float'>
    readonly currencyId: FieldRef<"RebateTransaction", 'String'>
    readonly vipLevel: FieldRef<"RebateTransaction", 'Int'>
    readonly rebatePercentage: FieldRef<"RebateTransaction", 'Float'>
    readonly status: FieldRef<"RebateTransaction", 'RewardStatus'>
    readonly paidOutAt: FieldRef<"RebateTransaction", 'DateTime'>
    readonly createdAt: FieldRef<"RebateTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"RebateTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RebateTransaction findUnique
   */
  export type RebateTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * Filter, which RebateTransaction to fetch.
     */
    where: RebateTransactionWhereUniqueInput
  }

  /**
   * RebateTransaction findUniqueOrThrow
   */
  export type RebateTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * Filter, which RebateTransaction to fetch.
     */
    where: RebateTransactionWhereUniqueInput
  }

  /**
   * RebateTransaction findFirst
   */
  export type RebateTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * Filter, which RebateTransaction to fetch.
     */
    where?: RebateTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RebateTransactions to fetch.
     */
    orderBy?: RebateTransactionOrderByWithRelationInput | RebateTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RebateTransactions.
     */
    cursor?: RebateTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RebateTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RebateTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RebateTransactions.
     */
    distinct?: RebateTransactionScalarFieldEnum | RebateTransactionScalarFieldEnum[]
  }

  /**
   * RebateTransaction findFirstOrThrow
   */
  export type RebateTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * Filter, which RebateTransaction to fetch.
     */
    where?: RebateTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RebateTransactions to fetch.
     */
    orderBy?: RebateTransactionOrderByWithRelationInput | RebateTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RebateTransactions.
     */
    cursor?: RebateTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RebateTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RebateTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RebateTransactions.
     */
    distinct?: RebateTransactionScalarFieldEnum | RebateTransactionScalarFieldEnum[]
  }

  /**
   * RebateTransaction findMany
   */
  export type RebateTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * Filter, which RebateTransactions to fetch.
     */
    where?: RebateTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RebateTransactions to fetch.
     */
    orderBy?: RebateTransactionOrderByWithRelationInput | RebateTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RebateTransactions.
     */
    cursor?: RebateTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RebateTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RebateTransactions.
     */
    skip?: number
    distinct?: RebateTransactionScalarFieldEnum | RebateTransactionScalarFieldEnum[]
  }

  /**
   * RebateTransaction create
   */
  export type RebateTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a RebateTransaction.
     */
    data: XOR<RebateTransactionCreateInput, RebateTransactionUncheckedCreateInput>
  }

  /**
   * RebateTransaction createMany
   */
  export type RebateTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RebateTransactions.
     */
    data: RebateTransactionCreateManyInput | RebateTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RebateTransaction createManyAndReturn
   */
  export type RebateTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many RebateTransactions.
     */
    data: RebateTransactionCreateManyInput | RebateTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RebateTransaction update
   */
  export type RebateTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a RebateTransaction.
     */
    data: XOR<RebateTransactionUpdateInput, RebateTransactionUncheckedUpdateInput>
    /**
     * Choose, which RebateTransaction to update.
     */
    where: RebateTransactionWhereUniqueInput
  }

  /**
   * RebateTransaction updateMany
   */
  export type RebateTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RebateTransactions.
     */
    data: XOR<RebateTransactionUpdateManyMutationInput, RebateTransactionUncheckedUpdateManyInput>
    /**
     * Filter which RebateTransactions to update
     */
    where?: RebateTransactionWhereInput
    /**
     * Limit how many RebateTransactions to update.
     */
    limit?: number
  }

  /**
   * RebateTransaction updateManyAndReturn
   */
  export type RebateTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * The data used to update RebateTransactions.
     */
    data: XOR<RebateTransactionUpdateManyMutationInput, RebateTransactionUncheckedUpdateManyInput>
    /**
     * Filter which RebateTransactions to update
     */
    where?: RebateTransactionWhereInput
    /**
     * Limit how many RebateTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RebateTransaction upsert
   */
  export type RebateTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the RebateTransaction to update in case it exists.
     */
    where: RebateTransactionWhereUniqueInput
    /**
     * In case the RebateTransaction found by the `where` argument doesn't exist, create a new RebateTransaction with this data.
     */
    create: XOR<RebateTransactionCreateInput, RebateTransactionUncheckedCreateInput>
    /**
     * In case the RebateTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RebateTransactionUpdateInput, RebateTransactionUncheckedUpdateInput>
  }

  /**
   * RebateTransaction delete
   */
  export type RebateTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
    /**
     * Filter which RebateTransaction to delete.
     */
    where: RebateTransactionWhereUniqueInput
  }

  /**
   * RebateTransaction deleteMany
   */
  export type RebateTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RebateTransactions to delete
     */
    where?: RebateTransactionWhereInput
    /**
     * Limit how many RebateTransactions to delete.
     */
    limit?: number
  }

  /**
   * RebateTransaction without action
   */
  export type RebateTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RebateTransaction
     */
    select?: RebateTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RebateTransaction
     */
    omit?: RebateTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RebateTransactionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    displayUsername: 'displayUsername',
    phone: 'phone',
    cashtag: 'cashtag',
    phoneVerified: 'phoneVerified',
    isVerified: 'isVerified',
    passwordHash: 'passwordHash',
    role: 'role',
    status: 'status',
    totalXp: 'totalXp',
    currentLevel: 'currentLevel',
    referralCode: 'referralCode',
    commissionRate: 'commissionRate',
    twoFactorEnabled: 'twoFactorEnabled',
    isOnline: 'isOnline',
    twoFactorSecret: 'twoFactorSecret',
    image: 'image',
    twoFactorRecoveryCodes: 'twoFactorRecoveryCodes',
    lastLogin: 'lastLogin',
    lastIp: 'lastIp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    activeWalletId: 'activeWalletId',
    referrerId: 'referrerId',
    firstName: 'firstName',
    lastName: 'lastName',
    avatarUrl: 'avatarUrl',
    dob: 'dob',
    gender: 'gender',
    preferredCurrencyId: 'preferredCurrencyId',
    timezone: 'timezone',
    locale: 'locale',
    mfaEnabled: 'mfaEnabled',
    mfaSecret: 'mfaSecret'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CurrencyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    symbol: 'symbol',
    type: 'type',
    precision: 'precision',
    isActive: 'isActive',
    isDefault: 'isDefault',
    contractAddress: 'contractAddress',
    blockchain: 'blockchain',
    withdrawalFeeFixed: 'withdrawalFeeFixed',
    withdrawalFeePercent: 'withdrawalFeePercent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CurrencyScalarFieldEnum = (typeof CurrencyScalarFieldEnum)[keyof typeof CurrencyScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    username: 'username',
    name: 'name',
    activeGameId: 'activeGameId',
    ipAddress: 'ipAddress',
    startTime: 'startTime',
    endTime: 'endTime',
    lastActivityAt: 'lastActivityAt',
    userAgent: 'userAgent',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    refreshToken: 'refreshToken',
    active: 'active',
    token: 'token',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    balance: 'balance',
    totalXpFromOperator: 'totalXpFromOperator',
    activeCurrencyType: 'activeCurrencyType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    currentGameSessionid: 'currentGameSessionid',
    userId: 'userId',
    otherUserid: 'otherUserid',
    role: 'role',
    operatorAccessId: 'operatorAccessId'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const SettingsScalarFieldEnum: {
    id: 'id',
    theme: 'theme',
    language: 'language',
    emailNotifications: 'emailNotifications',
    smsNotifications: 'smsNotifications',
    pushNotifications: 'pushNotifications',
    meta: 'meta',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    balance: 'balance',
    isActive: 'isActive',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    currencyId: 'currencyId',
    bonusBalance: 'bonusBalance',
    lockedBalance: 'lockedBalance'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const OperatorAccessScalarFieldEnum: {
    id: 'id',
    name: 'name',
    operator_secret: 'operator_secret',
    operator_access: 'operator_access',
    callbackUrl: 'callbackUrl',
    active: 'active',
    permissions: 'permissions',
    ips: 'ips',
    description: 'description',
    lastUsedAt: 'lastUsedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId',
    acceptedPayments: 'acceptedPayments',
    ownedById: 'ownedById'
  };

  export type OperatorAccessScalarFieldEnum = (typeof OperatorAccessScalarFieldEnum)[keyof typeof OperatorAccessScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    xpReward: 'xpReward',
    iconUrl: 'iconUrl',
    secret: 'secret',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    blur: 'blur'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    title: 'title',
    goldsvetData: 'goldsvetData',
    description: 'description',
    provider: 'provider',
    category: 'category',
    tags: 'tags',
    isActive: 'isActive',
    thumbnailUrl: 'thumbnailUrl',
    bannerUrl: 'bannerUrl',
    meta: 'meta',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    featured: 'featured',
    operatorId: 'operatorId'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    published: 'published',
    tags: 'tags',
    viewCount: 'viewCount',
    meta: 'meta',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    postId: 'postId',
    authorId: 'authorId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const GameSpinScalarFieldEnum: {
    id: 'id',
    spinData: 'spinData',
    createdAt: 'createdAt',
    grossWinAmount: 'grossWinAmount',
    currencyId: 'currencyId',
    spinNumber: 'spinNumber',
    gameSessionId: 'gameSessionId',
    wagerAmount: 'wagerAmount',
    sessionId: 'sessionId',
    timeStamp: 'timeStamp'
  };

  export type GameSpinScalarFieldEnum = (typeof GameSpinScalarFieldEnum)[keyof typeof GameSpinScalarFieldEnum]


  export const GameSessionScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive',
    sessionData: 'sessionData',
    sessionId: 'sessionId',
    currencyId: 'currencyId',
    startedAt: 'startedAt',
    endTime: 'endTime',
    startTime: 'startTime',
    ipAddress: 'ipAddress',
    startingBalance: 'startingBalance',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    totalWagered: 'totalWagered',
    totalWon: 'totalWon',
    userId: 'userId',
    gameId: 'gameId',
    profileId: 'profileId'
  };

  export type GameSessionScalarFieldEnum = (typeof GameSessionScalarFieldEnum)[keyof typeof GameSessionScalarFieldEnum]


  export const UserAchievementScalarFieldEnum: {
    id: 'id',
    unlockedAt: 'unlockedAt',
    metaData: 'metaData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    achievementId: 'achievementId'
  };

  export type UserAchievementScalarFieldEnum = (typeof UserAchievementScalarFieldEnum)[keyof typeof UserAchievementScalarFieldEnum]


  export const XpEventScalarFieldEnum: {
    id: 'id',
    points: 'points',
    source: 'source',
    sourceId: 'sourceId',
    meta: 'meta',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type XpEventScalarFieldEnum = (typeof XpEventScalarFieldEnum)[keyof typeof XpEventScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    readAt: 'readAt',
    actionUrl: 'actionUrl',
    imageUrl: 'imageUrl',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    channel: 'channel',
    content: 'content',
    mediaUrl: 'mediaUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    id: 'id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    requesterId: 'requesterId',
    receiverId: 'receiverId'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    originatorUserId: 'originatorUserId',
    processedAt: 'processedAt',
    receiverUserId: 'receiverUserId',
    walletId: 'walletId',
    type: 'type',
    status: 'status',
    amount: 'amount',
    netAmount: 'netAmount',
    feeAmount: 'feeAmount',
    productId: 'productId',
    currencyId: 'currencyId',
    balanceBefore: 'balanceBefore',
    balanceAfter: 'balanceAfter',
    bonusBalanceBefore: 'bonusBalanceBefore',
    bonusBalanceAfter: 'bonusBalanceAfter',
    bonusAmount: 'bonusAmount',
    wageringRequirement: 'wageringRequirement',
    wageringProgress: 'wageringProgress',
    description: 'description',
    provider: 'provider',
    providerTxId: 'providerTxId',
    relatedGameId: 'relatedGameId',
    relatedRoundId: 'relatedRoundId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const GameLaunchLinkScalarFieldEnum: {
    id: 'id',
    token_internal: 'token_internal',
    currency: 'currency',
    player_operator_id: 'player_operator_id',
    mode: 'mode',
    meta: 'meta',
    requestIp: 'requestIp',
    userAgent: 'userAgent',
    session_url: 'session_url',
    state: 'state',
    active: 'active',
    expiresAt: 'expiresAt',
    extra_meta: 'extra_meta',
    token_original: 'token_original',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    gameId: 'gameId',
    operatorId: 'operatorId'
  };

  export type GameLaunchLinkScalarFieldEnum = (typeof GameLaunchLinkScalarFieldEnum)[keyof typeof GameLaunchLinkScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    url: 'url',
    iconUrl: 'iconUrl',
    productType: 'productType',
    bonusCode: 'bonusCode',
    bonusTotalInCredits: 'bonusTotalInCredits',
    isActive: 'isActive',
    currencyId: 'currencyId',
    priceInCents: 'priceInCents',
    amountToReceiveInCredits: 'amountToReceiveInCredits',
    bestValue: 'bestValue',
    discountInCents: 'discountInCents',
    bonusSpins: 'bonusSpins',
    isPromo: 'isPromo',
    totalDiscountInCents: 'totalDiscountInCents',
    shopId: 'shopId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    transactionId: 'transactionId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const EventLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    targetType: 'targetType',
    targetId: 'targetId',
    data: 'data',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    timestamp: 'timestamp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    actorId: 'actorId'
  };

  export type EventLogScalarFieldEnum = (typeof EventLogScalarFieldEnum)[keyof typeof EventLogScalarFieldEnum]


  export const OperatorInvitationScalarFieldEnum: {
    id: 'id',
    operatorId: 'operatorId',
    email: 'email',
    role: 'role',
    token: 'token',
    expiresAt: 'expiresAt',
    acceptedAt: 'acceptedAt',
    invitedById: 'invitedById'
  };

  export type OperatorInvitationScalarFieldEnum = (typeof OperatorInvitationScalarFieldEnum)[keyof typeof OperatorInvitationScalarFieldEnum]


  export const VipInfoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    level: 'level',
    currentLevelXp: 'currentLevelXp',
    totalXp: 'totalXp',
    nextLevelXpRequired: 'nextLevelXpRequired',
    cashbackPercentage: 'cashbackPercentage',
    prioritySupport: 'prioritySupport',
    specialBonusesAvailable: 'specialBonusesAvailable',
    dailyBonusClaimedAt: 'dailyBonusClaimedAt',
    weeklyBonusClaimedAt: 'weeklyBonusClaimedAt',
    monthlyBonusClaimedAt: 'monthlyBonusClaimedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VipInfoScalarFieldEnum = (typeof VipInfoScalarFieldEnum)[keyof typeof VipInfoScalarFieldEnum]


  export const UserRewardScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    rewardType: 'rewardType',
    claimedAt: 'claimedAt',
    description: 'description',
    status: 'status',
    amount: 'amount',
    currencyId: 'currencyId',
    metaData: 'metaData',
    expiresAt: 'expiresAt',
    availableFrom: 'availableFrom',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    vipLevelRequirement: 'vipLevelRequirement'
  };

  export type UserRewardScalarFieldEnum = (typeof UserRewardScalarFieldEnum)[keyof typeof UserRewardScalarFieldEnum]


  export const VipTaskScalarFieldEnum: {
    id: 'id',
    taskType: 'taskType',
    title: 'title',
    description: 'description',
    xpReward: 'xpReward',
    itemRewardId: 'itemRewardId',
    bonusRewardAmount: 'bonusRewardAmount',
    bonusCurrencyId: 'bonusCurrencyId',
    targetValue: 'targetValue',
    durationDays: 'durationDays',
    isActive: 'isActive',
    requiredVipLevel: 'requiredVipLevel',
    resetCycle: 'resetCycle',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VipTaskScalarFieldEnum = (typeof VipTaskScalarFieldEnum)[keyof typeof VipTaskScalarFieldEnum]


  export const UserVipTaskProgressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    taskId: 'taskId',
    progress: 'progress',
    isCompleted: 'isCompleted',
    rewardClaimedAt: 'rewardClaimedAt',
    lastProgressAt: 'lastProgressAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserVipTaskProgressScalarFieldEnum = (typeof UserVipTaskProgressScalarFieldEnum)[keyof typeof UserVipTaskProgressScalarFieldEnum]


  export const RebateTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    transactionId: 'transactionId',
    rebateAmount: 'rebateAmount',
    currencyId: 'currencyId',
    vipLevel: 'vipLevel',
    rebatePercentage: 'rebatePercentage',
    status: 'status',
    paidOutAt: 'paidOutAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RebateTransactionScalarFieldEnum = (typeof RebateTransactionScalarFieldEnum)[keyof typeof RebateTransactionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'KeyMode[]'
   */
  export type ListEnumKeyModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KeyMode[]'>
    


  /**
   * Reference to a field of type 'KeyMode'
   */
  export type EnumKeyModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KeyMode'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'GameProvider'
   */
  export type EnumGameProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameProvider'>
    


  /**
   * Reference to a field of type 'GameProvider[]'
   */
  export type ListEnumGameProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameProvider[]'>
    


  /**
   * Reference to a field of type 'GameCategory'
   */
  export type EnumGameCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameCategory'>
    


  /**
   * Reference to a field of type 'GameCategory[]'
   */
  export type ListEnumGameCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameCategory[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'FriendshipStatus'
   */
  export type EnumFriendshipStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FriendshipStatus'>
    


  /**
   * Reference to a field of type 'FriendshipStatus[]'
   */
  export type ListEnumFriendshipStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FriendshipStatus[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'TransactionStatus'
   */
  export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus'>
    


  /**
   * Reference to a field of type 'TransactionStatus[]'
   */
  export type ListEnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus[]'>
    


  /**
   * Reference to a field of type 'RewardType'
   */
  export type EnumRewardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardType'>
    


  /**
   * Reference to a field of type 'RewardType[]'
   */
  export type ListEnumRewardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardType[]'>
    


  /**
   * Reference to a field of type 'RewardStatus'
   */
  export type EnumRewardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardStatus'>
    


  /**
   * Reference to a field of type 'RewardStatus[]'
   */
  export type ListEnumRewardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardStatus[]'>
    


  /**
   * Reference to a field of type 'VipTaskType'
   */
  export type EnumVipTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VipTaskType'>
    


  /**
   * Reference to a field of type 'VipTaskType[]'
   */
  export type ListEnumVipTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VipTaskType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    displayUsername?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    cashtag?: StringNullableFilter<"User"> | string | null
    phoneVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    isVerified?: BoolFilter<"User"> | boolean
    passwordHash?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    totalXp?: IntFilter<"User"> | number
    currentLevel?: IntFilter<"User"> | number
    referralCode?: StringNullableFilter<"User"> | string | null
    commissionRate?: FloatNullableFilter<"User"> | number | null
    twoFactorEnabled?: BoolNullableFilter<"User"> | boolean | null
    isOnline?: BoolNullableFilter<"User"> | boolean | null
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    twoFactorRecoveryCodes?: StringNullableListFilter<"User">
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastIp?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    activeWalletId?: StringNullableFilter<"User"> | string | null
    referrerId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableFilter<"User"> | $Enums.Gender | null
    preferredCurrencyId?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    locale?: StringNullableFilter<"User"> | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    otherProfiles?: ProfileListRelationFilter
    settings?: XOR<SettingsNullableScalarRelationFilter, SettingsWhereInput> | null
    wallets?: WalletListRelationFilter
    posts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    gameSessions?: GameSessionListRelationFilter
    xpEvents?: XpEventListRelationFilter
    userAchievements?: UserAchievementListRelationFilter
    sentMessages?: ChatMessageListRelationFilter
    friendshipsSent?: FriendshipListRelationFilter
    friendshipsReceived?: FriendshipListRelationFilter
    gameLaunchLinks?: GameLaunchLinkListRelationFilter
    eventLogsAsActor?: EventLogListRelationFilter
    createdOperators?: OperatorAccessListRelationFilter
    invitationsSent?: OperatorInvitationListRelationFilter
    invitationsReceived?: OperatorInvitationListRelationFilter
    referrer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    referrals?: UserListRelationFilter
    account?: AccountListRelationFilter
    Session?: SessionListRelationFilter
    vipInfo?: XOR<VipInfoNullableScalarRelationFilter, VipInfoWhereInput> | null
    rebateTransaction?: RebateTransactionListRelationFilter
    preferredCurrency?: XOR<CurrencyNullableScalarRelationFilter, CurrencyWhereInput> | null
    userRewards?: UserRewardListRelationFilter
    userVipTaskProgress?: UserVipTaskProgressListRelationFilter
    sentNotifications?: NotificationListRelationFilter
    receivedNotifications?: NotificationListRelationFilter
    originatedTransactions?: TransactionListRelationFilter
    receivedTransactions?: TransactionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    displayUsername?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    cashtag?: SortOrderInput | SortOrder
    phoneVerified?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    totalXp?: SortOrder
    currentLevel?: SortOrder
    referralCode?: SortOrderInput | SortOrder
    commissionRate?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrderInput | SortOrder
    isOnline?: SortOrderInput | SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    twoFactorRecoveryCodes?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    lastIp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWalletId?: SortOrderInput | SortOrder
    referrerId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    preferredCurrencyId?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    locale?: SortOrderInput | SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
    otherProfiles?: ProfileOrderByRelationAggregateInput
    settings?: SettingsOrderByWithRelationInput
    wallets?: WalletOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    gameSessions?: GameSessionOrderByRelationAggregateInput
    xpEvents?: XpEventOrderByRelationAggregateInput
    userAchievements?: UserAchievementOrderByRelationAggregateInput
    sentMessages?: ChatMessageOrderByRelationAggregateInput
    friendshipsSent?: FriendshipOrderByRelationAggregateInput
    friendshipsReceived?: FriendshipOrderByRelationAggregateInput
    gameLaunchLinks?: GameLaunchLinkOrderByRelationAggregateInput
    eventLogsAsActor?: EventLogOrderByRelationAggregateInput
    createdOperators?: OperatorAccessOrderByRelationAggregateInput
    invitationsSent?: OperatorInvitationOrderByRelationAggregateInput
    invitationsReceived?: OperatorInvitationOrderByRelationAggregateInput
    referrer?: UserOrderByWithRelationInput
    referrals?: UserOrderByRelationAggregateInput
    account?: AccountOrderByRelationAggregateInput
    Session?: SessionOrderByRelationAggregateInput
    vipInfo?: VipInfoOrderByWithRelationInput
    rebateTransaction?: RebateTransactionOrderByRelationAggregateInput
    preferredCurrency?: CurrencyOrderByWithRelationInput
    userRewards?: UserRewardOrderByRelationAggregateInput
    userVipTaskProgress?: UserVipTaskProgressOrderByRelationAggregateInput
    sentNotifications?: NotificationOrderByRelationAggregateInput
    receivedNotifications?: NotificationOrderByRelationAggregateInput
    originatedTransactions?: TransactionOrderByRelationAggregateInput
    receivedTransactions?: TransactionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    name?: string
    email?: string
    phone?: string
    cashtag?: string
    referralCode?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    displayUsername?: StringNullableFilter<"User"> | string | null
    phoneVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    isVerified?: BoolFilter<"User"> | boolean
    passwordHash?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    totalXp?: IntFilter<"User"> | number
    currentLevel?: IntFilter<"User"> | number
    commissionRate?: FloatNullableFilter<"User"> | number | null
    twoFactorEnabled?: BoolNullableFilter<"User"> | boolean | null
    isOnline?: BoolNullableFilter<"User"> | boolean | null
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    twoFactorRecoveryCodes?: StringNullableListFilter<"User">
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastIp?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    activeWalletId?: StringNullableFilter<"User"> | string | null
    referrerId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableFilter<"User"> | $Enums.Gender | null
    preferredCurrencyId?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    locale?: StringNullableFilter<"User"> | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    otherProfiles?: ProfileListRelationFilter
    settings?: XOR<SettingsNullableScalarRelationFilter, SettingsWhereInput> | null
    wallets?: WalletListRelationFilter
    posts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    gameSessions?: GameSessionListRelationFilter
    xpEvents?: XpEventListRelationFilter
    userAchievements?: UserAchievementListRelationFilter
    sentMessages?: ChatMessageListRelationFilter
    friendshipsSent?: FriendshipListRelationFilter
    friendshipsReceived?: FriendshipListRelationFilter
    gameLaunchLinks?: GameLaunchLinkListRelationFilter
    eventLogsAsActor?: EventLogListRelationFilter
    createdOperators?: OperatorAccessListRelationFilter
    invitationsSent?: OperatorInvitationListRelationFilter
    invitationsReceived?: OperatorInvitationListRelationFilter
    referrer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    referrals?: UserListRelationFilter
    account?: AccountListRelationFilter
    Session?: SessionListRelationFilter
    vipInfo?: XOR<VipInfoNullableScalarRelationFilter, VipInfoWhereInput> | null
    rebateTransaction?: RebateTransactionListRelationFilter
    preferredCurrency?: XOR<CurrencyNullableScalarRelationFilter, CurrencyWhereInput> | null
    userRewards?: UserRewardListRelationFilter
    userVipTaskProgress?: UserVipTaskProgressListRelationFilter
    sentNotifications?: NotificationListRelationFilter
    receivedNotifications?: NotificationListRelationFilter
    originatedTransactions?: TransactionListRelationFilter
    receivedTransactions?: TransactionListRelationFilter
  }, "id" | "username" | "name" | "email" | "phone" | "cashtag" | "referralCode">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    displayUsername?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    cashtag?: SortOrderInput | SortOrder
    phoneVerified?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    totalXp?: SortOrder
    currentLevel?: SortOrder
    referralCode?: SortOrderInput | SortOrder
    commissionRate?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrderInput | SortOrder
    isOnline?: SortOrderInput | SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    twoFactorRecoveryCodes?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    lastIp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWalletId?: SortOrderInput | SortOrder
    referrerId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    preferredCurrencyId?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    locale?: SortOrderInput | SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    displayUsername?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    cashtag?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    totalXp?: IntWithAggregatesFilter<"User"> | number
    currentLevel?: IntWithAggregatesFilter<"User"> | number
    referralCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    commissionRate?: FloatNullableWithAggregatesFilter<"User"> | number | null
    twoFactorEnabled?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    isOnline?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    twoFactorSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    twoFactorRecoveryCodes?: StringNullableListFilter<"User">
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastIp?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    activeWalletId?: StringNullableWithAggregatesFilter<"User"> | string | null
    referrerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"User"> | $Enums.Gender | null
    preferredCurrencyId?: StringNullableWithAggregatesFilter<"User"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    locale?: StringNullableWithAggregatesFilter<"User"> | string | null
    mfaEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    mfaSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CurrencyWhereInput = {
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    id?: StringFilter<"Currency"> | string
    name?: StringFilter<"Currency"> | string
    symbol?: StringFilter<"Currency"> | string
    type?: StringFilter<"Currency"> | string
    precision?: IntFilter<"Currency"> | number
    isActive?: BoolFilter<"Currency"> | boolean
    isDefault?: BoolFilter<"Currency"> | boolean
    contractAddress?: StringNullableFilter<"Currency"> | string | null
    blockchain?: StringNullableFilter<"Currency"> | string | null
    withdrawalFeeFixed?: IntNullableFilter<"Currency"> | number | null
    withdrawalFeePercent?: FloatNullableFilter<"Currency"> | number | null
    createdAt?: DateTimeFilter<"Currency"> | Date | string
    updatedAt?: DateTimeFilter<"Currency"> | Date | string
    usersPreferringThisCurrency?: UserListRelationFilter
    wallets?: WalletListRelationFilter
    transactions?: TransactionListRelationFilter
    products?: ProductListRelationFilter
  }

  export type CurrencyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    type?: SortOrder
    precision?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    contractAddress?: SortOrderInput | SortOrder
    blockchain?: SortOrderInput | SortOrder
    withdrawalFeeFixed?: SortOrderInput | SortOrder
    withdrawalFeePercent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usersPreferringThisCurrency?: UserOrderByRelationAggregateInput
    wallets?: WalletOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
  }

  export type CurrencyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    contractAddress?: string
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    symbol?: StringFilter<"Currency"> | string
    type?: StringFilter<"Currency"> | string
    precision?: IntFilter<"Currency"> | number
    isActive?: BoolFilter<"Currency"> | boolean
    isDefault?: BoolFilter<"Currency"> | boolean
    blockchain?: StringNullableFilter<"Currency"> | string | null
    withdrawalFeeFixed?: IntNullableFilter<"Currency"> | number | null
    withdrawalFeePercent?: FloatNullableFilter<"Currency"> | number | null
    createdAt?: DateTimeFilter<"Currency"> | Date | string
    updatedAt?: DateTimeFilter<"Currency"> | Date | string
    usersPreferringThisCurrency?: UserListRelationFilter
    wallets?: WalletListRelationFilter
    transactions?: TransactionListRelationFilter
    products?: ProductListRelationFilter
  }, "id" | "name" | "contractAddress">

  export type CurrencyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    type?: SortOrder
    precision?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    contractAddress?: SortOrderInput | SortOrder
    blockchain?: SortOrderInput | SortOrder
    withdrawalFeeFixed?: SortOrderInput | SortOrder
    withdrawalFeePercent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CurrencyCountOrderByAggregateInput
    _avg?: CurrencyAvgOrderByAggregateInput
    _max?: CurrencyMaxOrderByAggregateInput
    _min?: CurrencyMinOrderByAggregateInput
    _sum?: CurrencySumOrderByAggregateInput
  }

  export type CurrencyScalarWhereWithAggregatesInput = {
    AND?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    OR?: CurrencyScalarWhereWithAggregatesInput[]
    NOT?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Currency"> | string
    name?: StringWithAggregatesFilter<"Currency"> | string
    symbol?: StringWithAggregatesFilter<"Currency"> | string
    type?: StringWithAggregatesFilter<"Currency"> | string
    precision?: IntWithAggregatesFilter<"Currency"> | number
    isActive?: BoolWithAggregatesFilter<"Currency"> | boolean
    isDefault?: BoolWithAggregatesFilter<"Currency"> | boolean
    contractAddress?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    blockchain?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    withdrawalFeeFixed?: IntNullableWithAggregatesFilter<"Currency"> | number | null
    withdrawalFeePercent?: FloatNullableWithAggregatesFilter<"Currency"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Currency"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Currency"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    username?: StringNullableFilter<"Session"> | string | null
    name?: StringNullableFilter<"Session"> | string | null
    activeGameId?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    startTime?: DateTimeFilter<"Session"> | Date | string
    endTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    lastActivityAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    refreshToken?: StringNullableFilter<"Session"> | string | null
    active?: BoolFilter<"Session"> | boolean
    token?: StringFilter<"Session"> | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    activeGameId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    lastActivityAt?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    active?: SortOrder
    token?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    refreshToken?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    username?: StringNullableFilter<"Session"> | string | null
    name?: StringNullableFilter<"Session"> | string | null
    activeGameId?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    startTime?: DateTimeFilter<"Session"> | Date | string
    endTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    lastActivityAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    active?: BoolFilter<"Session"> | boolean
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "refreshToken" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    activeGameId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    lastActivityAt?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    active?: SortOrder
    token?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    username?: StringNullableWithAggregatesFilter<"Session"> | string | null
    name?: StringNullableWithAggregatesFilter<"Session"> | string | null
    activeGameId?: StringNullableWithAggregatesFilter<"Session"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    lastActivityAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    refreshToken?: StringNullableWithAggregatesFilter<"Session"> | string | null
    active?: BoolWithAggregatesFilter<"Session"> | boolean
    token?: StringWithAggregatesFilter<"Session"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    balance?: IntFilter<"Profile"> | number
    totalXpFromOperator?: IntFilter<"Profile"> | number
    activeCurrencyType?: StringFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    currentGameSessionid?: StringNullableFilter<"Profile"> | string | null
    userId?: StringFilter<"Profile"> | string
    otherUserid?: StringNullableFilter<"Profile"> | string | null
    role?: EnumRoleNullableFilter<"Profile"> | $Enums.Role | null
    operatorAccessId?: StringNullableFilter<"Profile"> | string | null
    currentGameSession?: XOR<GameSessionNullableScalarRelationFilter, GameSessionWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    otherUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    operator?: XOR<OperatorAccessNullableScalarRelationFilter, OperatorAccessWhereInput> | null
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    balance?: SortOrder
    totalXpFromOperator?: SortOrder
    activeCurrencyType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGameSessionid?: SortOrderInput | SortOrder
    userId?: SortOrder
    otherUserid?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    operatorAccessId?: SortOrderInput | SortOrder
    currentGameSession?: GameSessionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    otherUser?: UserOrderByWithRelationInput
    operator?: OperatorAccessOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    balance?: IntFilter<"Profile"> | number
    totalXpFromOperator?: IntFilter<"Profile"> | number
    activeCurrencyType?: StringFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    currentGameSessionid?: StringNullableFilter<"Profile"> | string | null
    otherUserid?: StringNullableFilter<"Profile"> | string | null
    role?: EnumRoleNullableFilter<"Profile"> | $Enums.Role | null
    operatorAccessId?: StringNullableFilter<"Profile"> | string | null
    currentGameSession?: XOR<GameSessionNullableScalarRelationFilter, GameSessionWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    otherUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    operator?: XOR<OperatorAccessNullableScalarRelationFilter, OperatorAccessWhereInput> | null
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    balance?: SortOrder
    totalXpFromOperator?: SortOrder
    activeCurrencyType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGameSessionid?: SortOrderInput | SortOrder
    userId?: SortOrder
    otherUserid?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    operatorAccessId?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    balance?: IntWithAggregatesFilter<"Profile"> | number
    totalXpFromOperator?: IntWithAggregatesFilter<"Profile"> | number
    activeCurrencyType?: StringWithAggregatesFilter<"Profile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    currentGameSessionid?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    userId?: StringWithAggregatesFilter<"Profile"> | string
    otherUserid?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    role?: EnumRoleNullableWithAggregatesFilter<"Profile"> | $Enums.Role | null
    operatorAccessId?: StringNullableWithAggregatesFilter<"Profile"> | string | null
  }

  export type SettingsWhereInput = {
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    id?: StringFilter<"Settings"> | string
    theme?: StringNullableFilter<"Settings"> | string | null
    language?: StringNullableFilter<"Settings"> | string | null
    emailNotifications?: BoolFilter<"Settings"> | boolean
    smsNotifications?: BoolFilter<"Settings"> | boolean
    pushNotifications?: BoolFilter<"Settings"> | boolean
    meta?: JsonNullableFilter<"Settings">
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
    userId?: StringFilter<"Settings"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SettingsOrderByWithRelationInput = {
    id?: SortOrder
    theme?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    pushNotifications?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    theme?: StringNullableFilter<"Settings"> | string | null
    language?: StringNullableFilter<"Settings"> | string | null
    emailNotifications?: BoolFilter<"Settings"> | boolean
    smsNotifications?: BoolFilter<"Settings"> | boolean
    pushNotifications?: BoolFilter<"Settings"> | boolean
    meta?: JsonNullableFilter<"Settings">
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type SettingsOrderByWithAggregationInput = {
    id?: SortOrder
    theme?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    pushNotifications?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: SettingsCountOrderByAggregateInput
    _max?: SettingsMaxOrderByAggregateInput
    _min?: SettingsMinOrderByAggregateInput
  }

  export type SettingsScalarWhereWithAggregatesInput = {
    AND?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    OR?: SettingsScalarWhereWithAggregatesInput[]
    NOT?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Settings"> | string
    theme?: StringNullableWithAggregatesFilter<"Settings"> | string | null
    language?: StringNullableWithAggregatesFilter<"Settings"> | string | null
    emailNotifications?: BoolWithAggregatesFilter<"Settings"> | boolean
    smsNotifications?: BoolWithAggregatesFilter<"Settings"> | boolean
    pushNotifications?: BoolWithAggregatesFilter<"Settings"> | boolean
    meta?: JsonNullableWithAggregatesFilter<"Settings">
    createdAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    userId?: StringWithAggregatesFilter<"Settings"> | string
  }

  export type WalletWhereInput = {
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    id?: StringFilter<"Wallet"> | string
    balance?: FloatFilter<"Wallet"> | number
    isActive?: BoolFilter<"Wallet"> | boolean
    address?: StringNullableFilter<"Wallet"> | string | null
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    userId?: StringFilter<"Wallet"> | string
    currencyId?: StringFilter<"Wallet"> | string
    bonusBalance?: IntFilter<"Wallet"> | number
    lockedBalance?: IntFilter<"Wallet"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    transactions?: TransactionListRelationFilter
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    balance?: SortOrder
    isActive?: SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    currencyId?: SortOrder
    bonusBalance?: SortOrder
    lockedBalance?: SortOrder
    user?: UserOrderByWithRelationInput
    currency?: CurrencyOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type WalletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    address?: string
    userId_currencyId?: WalletUserIdCurrencyIdCompoundUniqueInput
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    balance?: FloatFilter<"Wallet"> | number
    isActive?: BoolFilter<"Wallet"> | boolean
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    userId?: StringFilter<"Wallet"> | string
    currencyId?: StringFilter<"Wallet"> | string
    bonusBalance?: IntFilter<"Wallet"> | number
    lockedBalance?: IntFilter<"Wallet"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    transactions?: TransactionListRelationFilter
  }, "id" | "address" | "userId_currencyId">

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    balance?: SortOrder
    isActive?: SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    currencyId?: SortOrder
    bonusBalance?: SortOrder
    lockedBalance?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    OR?: WalletScalarWhereWithAggregatesInput[]
    NOT?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wallet"> | string
    balance?: FloatWithAggregatesFilter<"Wallet"> | number
    isActive?: BoolWithAggregatesFilter<"Wallet"> | boolean
    address?: StringNullableWithAggregatesFilter<"Wallet"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
    userId?: StringWithAggregatesFilter<"Wallet"> | string
    currencyId?: StringWithAggregatesFilter<"Wallet"> | string
    bonusBalance?: IntWithAggregatesFilter<"Wallet"> | number
    lockedBalance?: IntWithAggregatesFilter<"Wallet"> | number
  }

  export type OperatorAccessWhereInput = {
    AND?: OperatorAccessWhereInput | OperatorAccessWhereInput[]
    OR?: OperatorAccessWhereInput[]
    NOT?: OperatorAccessWhereInput | OperatorAccessWhereInput[]
    id?: StringFilter<"OperatorAccess"> | string
    name?: StringFilter<"OperatorAccess"> | string
    operator_secret?: StringFilter<"OperatorAccess"> | string
    operator_access?: StringFilter<"OperatorAccess"> | string
    callbackUrl?: StringFilter<"OperatorAccess"> | string
    active?: BoolFilter<"OperatorAccess"> | boolean
    permissions?: EnumKeyModeNullableListFilter<"OperatorAccess">
    ips?: StringNullableListFilter<"OperatorAccess">
    description?: StringNullableFilter<"OperatorAccess"> | string | null
    lastUsedAt?: DateTimeNullableFilter<"OperatorAccess"> | Date | string | null
    createdAt?: DateTimeFilter<"OperatorAccess"> | Date | string
    updatedAt?: DateTimeFilter<"OperatorAccess"> | Date | string
    ownerId?: StringNullableFilter<"OperatorAccess"> | string | null
    acceptedPayments?: EnumPaymentMethodNullableListFilter<"OperatorAccess">
    ownedById?: StringNullableFilter<"OperatorAccess"> | string | null
    invitations?: OperatorInvitationListRelationFilter
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    gameLaunchLinks?: GameLaunchLinkListRelationFilter
    products?: ProductListRelationFilter
    games?: GameListRelationFilter
    profiles?: ProfileListRelationFilter
  }

  export type OperatorAccessOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    operator_secret?: SortOrder
    operator_access?: SortOrder
    callbackUrl?: SortOrder
    active?: SortOrder
    permissions?: SortOrder
    ips?: SortOrder
    description?: SortOrderInput | SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    acceptedPayments?: SortOrder
    ownedById?: SortOrderInput | SortOrder
    invitations?: OperatorInvitationOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
    gameLaunchLinks?: GameLaunchLinkOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
    games?: GameOrderByRelationAggregateInput
    profiles?: ProfileOrderByRelationAggregateInput
  }

  export type OperatorAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: OperatorAccessWhereInput | OperatorAccessWhereInput[]
    OR?: OperatorAccessWhereInput[]
    NOT?: OperatorAccessWhereInput | OperatorAccessWhereInput[]
    operator_secret?: StringFilter<"OperatorAccess"> | string
    operator_access?: StringFilter<"OperatorAccess"> | string
    callbackUrl?: StringFilter<"OperatorAccess"> | string
    active?: BoolFilter<"OperatorAccess"> | boolean
    permissions?: EnumKeyModeNullableListFilter<"OperatorAccess">
    ips?: StringNullableListFilter<"OperatorAccess">
    description?: StringNullableFilter<"OperatorAccess"> | string | null
    lastUsedAt?: DateTimeNullableFilter<"OperatorAccess"> | Date | string | null
    createdAt?: DateTimeFilter<"OperatorAccess"> | Date | string
    updatedAt?: DateTimeFilter<"OperatorAccess"> | Date | string
    ownerId?: StringNullableFilter<"OperatorAccess"> | string | null
    acceptedPayments?: EnumPaymentMethodNullableListFilter<"OperatorAccess">
    ownedById?: StringNullableFilter<"OperatorAccess"> | string | null
    invitations?: OperatorInvitationListRelationFilter
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    gameLaunchLinks?: GameLaunchLinkListRelationFilter
    products?: ProductListRelationFilter
    games?: GameListRelationFilter
    profiles?: ProfileListRelationFilter
  }, "id" | "name">

  export type OperatorAccessOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    operator_secret?: SortOrder
    operator_access?: SortOrder
    callbackUrl?: SortOrder
    active?: SortOrder
    permissions?: SortOrder
    ips?: SortOrder
    description?: SortOrderInput | SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    acceptedPayments?: SortOrder
    ownedById?: SortOrderInput | SortOrder
    _count?: OperatorAccessCountOrderByAggregateInput
    _max?: OperatorAccessMaxOrderByAggregateInput
    _min?: OperatorAccessMinOrderByAggregateInput
  }

  export type OperatorAccessScalarWhereWithAggregatesInput = {
    AND?: OperatorAccessScalarWhereWithAggregatesInput | OperatorAccessScalarWhereWithAggregatesInput[]
    OR?: OperatorAccessScalarWhereWithAggregatesInput[]
    NOT?: OperatorAccessScalarWhereWithAggregatesInput | OperatorAccessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OperatorAccess"> | string
    name?: StringWithAggregatesFilter<"OperatorAccess"> | string
    operator_secret?: StringWithAggregatesFilter<"OperatorAccess"> | string
    operator_access?: StringWithAggregatesFilter<"OperatorAccess"> | string
    callbackUrl?: StringWithAggregatesFilter<"OperatorAccess"> | string
    active?: BoolWithAggregatesFilter<"OperatorAccess"> | boolean
    permissions?: EnumKeyModeNullableListFilter<"OperatorAccess">
    ips?: StringNullableListFilter<"OperatorAccess">
    description?: StringNullableWithAggregatesFilter<"OperatorAccess"> | string | null
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"OperatorAccess"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OperatorAccess"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OperatorAccess"> | Date | string
    ownerId?: StringNullableWithAggregatesFilter<"OperatorAccess"> | string | null
    acceptedPayments?: EnumPaymentMethodNullableListFilter<"OperatorAccess">
    ownedById?: StringNullableWithAggregatesFilter<"OperatorAccess"> | string | null
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    id?: StringFilter<"Achievement"> | string
    name?: StringFilter<"Achievement"> | string
    description?: StringFilter<"Achievement"> | string
    xpReward?: IntFilter<"Achievement"> | number
    iconUrl?: StringNullableFilter<"Achievement"> | string | null
    secret?: BoolFilter<"Achievement"> | boolean
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    updatedAt?: DateTimeFilter<"Achievement"> | Date | string
    blur?: IntFilter<"Achievement"> | number
    userAchievements?: UserAchievementListRelationFilter
  }

  export type AchievementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blur?: SortOrder
    userAchievements?: UserAchievementOrderByRelationAggregateInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    description?: StringFilter<"Achievement"> | string
    xpReward?: IntFilter<"Achievement"> | number
    iconUrl?: StringNullableFilter<"Achievement"> | string | null
    secret?: BoolFilter<"Achievement"> | boolean
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    updatedAt?: DateTimeFilter<"Achievement"> | Date | string
    blur?: IntFilter<"Achievement"> | number
    userAchievements?: UserAchievementListRelationFilter
  }, "id" | "name">

  export type AchievementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blur?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _avg?: AchievementAvgOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
    _sum?: AchievementSumOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Achievement"> | string
    name?: StringWithAggregatesFilter<"Achievement"> | string
    description?: StringWithAggregatesFilter<"Achievement"> | string
    xpReward?: IntWithAggregatesFilter<"Achievement"> | number
    iconUrl?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    secret?: BoolWithAggregatesFilter<"Achievement"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Achievement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Achievement"> | Date | string
    blur?: IntWithAggregatesFilter<"Achievement"> | number
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: StringFilter<"Game"> | string
    name?: StringFilter<"Game"> | string
    title?: StringFilter<"Game"> | string
    goldsvetData?: JsonNullableFilter<"Game">
    description?: StringNullableFilter<"Game"> | string | null
    provider?: EnumGameProviderFilter<"Game"> | $Enums.GameProvider
    category?: EnumGameCategoryFilter<"Game"> | $Enums.GameCategory
    tags?: StringNullableListFilter<"Game">
    isActive?: BoolFilter<"Game"> | boolean
    thumbnailUrl?: StringNullableFilter<"Game"> | string | null
    bannerUrl?: StringNullableFilter<"Game"> | string | null
    meta?: JsonNullableFilter<"Game">
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    featured?: BoolFilter<"Game"> | boolean
    operatorId?: StringNullableFilter<"Game"> | string | null
    gameSessions?: GameSessionListRelationFilter
    gameLaunchLinks?: GameLaunchLinkListRelationFilter
    operator?: XOR<OperatorAccessNullableScalarRelationFilter, OperatorAccessWhereInput> | null
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    goldsvetData?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    provider?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    bannerUrl?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    featured?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    gameSessions?: GameSessionOrderByRelationAggregateInput
    gameLaunchLinks?: GameLaunchLinkOrderByRelationAggregateInput
    operator?: OperatorAccessOrderByWithRelationInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    name?: StringFilter<"Game"> | string
    title?: StringFilter<"Game"> | string
    goldsvetData?: JsonNullableFilter<"Game">
    description?: StringNullableFilter<"Game"> | string | null
    provider?: EnumGameProviderFilter<"Game"> | $Enums.GameProvider
    category?: EnumGameCategoryFilter<"Game"> | $Enums.GameCategory
    tags?: StringNullableListFilter<"Game">
    isActive?: BoolFilter<"Game"> | boolean
    thumbnailUrl?: StringNullableFilter<"Game"> | string | null
    bannerUrl?: StringNullableFilter<"Game"> | string | null
    meta?: JsonNullableFilter<"Game">
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    featured?: BoolFilter<"Game"> | boolean
    operatorId?: StringNullableFilter<"Game"> | string | null
    gameSessions?: GameSessionListRelationFilter
    gameLaunchLinks?: GameLaunchLinkListRelationFilter
    operator?: XOR<OperatorAccessNullableScalarRelationFilter, OperatorAccessWhereInput> | null
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    goldsvetData?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    provider?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    bannerUrl?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    featured?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    _count?: GameCountOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Game"> | string
    name?: StringWithAggregatesFilter<"Game"> | string
    title?: StringWithAggregatesFilter<"Game"> | string
    goldsvetData?: JsonNullableWithAggregatesFilter<"Game">
    description?: StringNullableWithAggregatesFilter<"Game"> | string | null
    provider?: EnumGameProviderWithAggregatesFilter<"Game"> | $Enums.GameProvider
    category?: EnumGameCategoryWithAggregatesFilter<"Game"> | $Enums.GameCategory
    tags?: StringNullableListFilter<"Game">
    isActive?: BoolWithAggregatesFilter<"Game"> | boolean
    thumbnailUrl?: StringNullableWithAggregatesFilter<"Game"> | string | null
    bannerUrl?: StringNullableWithAggregatesFilter<"Game"> | string | null
    meta?: JsonNullableWithAggregatesFilter<"Game">
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    featured?: BoolWithAggregatesFilter<"Game"> | boolean
    operatorId?: StringNullableWithAggregatesFilter<"Game"> | string | null
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    published?: BoolFilter<"Post"> | boolean
    tags?: StringNullableListFilter<"Post">
    viewCount?: IntFilter<"Post"> | number
    meta?: JsonNullableFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    authorId?: StringFilter<"Post"> | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    tags?: SortOrder
    viewCount?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    author?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    published?: BoolFilter<"Post"> | boolean
    tags?: StringNullableListFilter<"Post">
    viewCount?: IntFilter<"Post"> | number
    meta?: JsonNullableFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    authorId?: StringFilter<"Post"> | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    tags?: SortOrder
    viewCount?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    title?: StringWithAggregatesFilter<"Post"> | string
    content?: StringWithAggregatesFilter<"Post"> | string
    published?: BoolWithAggregatesFilter<"Post"> | boolean
    tags?: StringNullableListFilter<"Post">
    viewCount?: IntWithAggregatesFilter<"Post"> | number
    meta?: JsonNullableWithAggregatesFilter<"Post">
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    authorId?: StringWithAggregatesFilter<"Post"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    postId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
    post?: PostOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    postId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    postId?: StringWithAggregatesFilter<"Comment"> | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type GameSpinWhereInput = {
    AND?: GameSpinWhereInput | GameSpinWhereInput[]
    OR?: GameSpinWhereInput[]
    NOT?: GameSpinWhereInput | GameSpinWhereInput[]
    id?: StringFilter<"GameSpin"> | string
    spinData?: JsonNullableFilter<"GameSpin">
    createdAt?: DateTimeFilter<"GameSpin"> | Date | string
    grossWinAmount?: IntFilter<"GameSpin"> | number
    currencyId?: StringNullableFilter<"GameSpin"> | string | null
    spinNumber?: IntFilter<"GameSpin"> | number
    gameSessionId?: StringFilter<"GameSpin"> | string
    wagerAmount?: IntFilter<"GameSpin"> | number
    sessionId?: StringFilter<"GameSpin"> | string
    timeStamp?: DateTimeFilter<"GameSpin"> | Date | string
    gameSession?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
  }

  export type GameSpinOrderByWithRelationInput = {
    id?: SortOrder
    spinData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    grossWinAmount?: SortOrder
    currencyId?: SortOrderInput | SortOrder
    spinNumber?: SortOrder
    gameSessionId?: SortOrder
    wagerAmount?: SortOrder
    sessionId?: SortOrder
    timeStamp?: SortOrder
    gameSession?: GameSessionOrderByWithRelationInput
  }

  export type GameSpinWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameSpinWhereInput | GameSpinWhereInput[]
    OR?: GameSpinWhereInput[]
    NOT?: GameSpinWhereInput | GameSpinWhereInput[]
    spinData?: JsonNullableFilter<"GameSpin">
    createdAt?: DateTimeFilter<"GameSpin"> | Date | string
    grossWinAmount?: IntFilter<"GameSpin"> | number
    currencyId?: StringNullableFilter<"GameSpin"> | string | null
    spinNumber?: IntFilter<"GameSpin"> | number
    gameSessionId?: StringFilter<"GameSpin"> | string
    wagerAmount?: IntFilter<"GameSpin"> | number
    sessionId?: StringFilter<"GameSpin"> | string
    timeStamp?: DateTimeFilter<"GameSpin"> | Date | string
    gameSession?: XOR<GameSessionScalarRelationFilter, GameSessionWhereInput>
  }, "id">

  export type GameSpinOrderByWithAggregationInput = {
    id?: SortOrder
    spinData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    grossWinAmount?: SortOrder
    currencyId?: SortOrderInput | SortOrder
    spinNumber?: SortOrder
    gameSessionId?: SortOrder
    wagerAmount?: SortOrder
    sessionId?: SortOrder
    timeStamp?: SortOrder
    _count?: GameSpinCountOrderByAggregateInput
    _avg?: GameSpinAvgOrderByAggregateInput
    _max?: GameSpinMaxOrderByAggregateInput
    _min?: GameSpinMinOrderByAggregateInput
    _sum?: GameSpinSumOrderByAggregateInput
  }

  export type GameSpinScalarWhereWithAggregatesInput = {
    AND?: GameSpinScalarWhereWithAggregatesInput | GameSpinScalarWhereWithAggregatesInput[]
    OR?: GameSpinScalarWhereWithAggregatesInput[]
    NOT?: GameSpinScalarWhereWithAggregatesInput | GameSpinScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameSpin"> | string
    spinData?: JsonNullableWithAggregatesFilter<"GameSpin">
    createdAt?: DateTimeWithAggregatesFilter<"GameSpin"> | Date | string
    grossWinAmount?: IntWithAggregatesFilter<"GameSpin"> | number
    currencyId?: StringNullableWithAggregatesFilter<"GameSpin"> | string | null
    spinNumber?: IntWithAggregatesFilter<"GameSpin"> | number
    gameSessionId?: StringWithAggregatesFilter<"GameSpin"> | string
    wagerAmount?: IntWithAggregatesFilter<"GameSpin"> | number
    sessionId?: StringWithAggregatesFilter<"GameSpin"> | string
    timeStamp?: DateTimeWithAggregatesFilter<"GameSpin"> | Date | string
  }

  export type GameSessionWhereInput = {
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    id?: StringFilter<"GameSession"> | string
    isActive?: BoolFilter<"GameSession"> | boolean
    sessionData?: JsonNullableFilter<"GameSession">
    sessionId?: StringNullableFilter<"GameSession"> | string | null
    currencyId?: StringNullableFilter<"GameSession"> | string | null
    startedAt?: DateTimeFilter<"GameSession"> | Date | string
    endTime?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    startTime?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    ipAddress?: StringNullableFilter<"GameSession"> | string | null
    startingBalance?: IntNullableFilter<"GameSession"> | number | null
    userAgent?: StringNullableFilter<"GameSession"> | string | null
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeFilter<"GameSession"> | Date | string
    totalWagered?: IntFilter<"GameSession"> | number
    totalWon?: IntFilter<"GameSession"> | number
    userId?: StringFilter<"GameSession"> | string
    gameId?: StringFilter<"GameSession"> | string
    profileId?: StringNullableFilter<"GameSession"> | string | null
    spins?: GameSpinListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    Profile?: ProfileListRelationFilter
  }

  export type GameSessionOrderByWithRelationInput = {
    id?: SortOrder
    isActive?: SortOrder
    sessionData?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    currencyId?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    endTime?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    startingBalance?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalWagered?: SortOrder
    totalWon?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    profileId?: SortOrderInput | SortOrder
    spins?: GameSpinOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
    Profile?: ProfileOrderByRelationAggregateInput
  }

  export type GameSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    isActive?: BoolFilter<"GameSession"> | boolean
    sessionData?: JsonNullableFilter<"GameSession">
    sessionId?: StringNullableFilter<"GameSession"> | string | null
    currencyId?: StringNullableFilter<"GameSession"> | string | null
    startedAt?: DateTimeFilter<"GameSession"> | Date | string
    endTime?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    startTime?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    ipAddress?: StringNullableFilter<"GameSession"> | string | null
    startingBalance?: IntNullableFilter<"GameSession"> | number | null
    userAgent?: StringNullableFilter<"GameSession"> | string | null
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeFilter<"GameSession"> | Date | string
    totalWagered?: IntFilter<"GameSession"> | number
    totalWon?: IntFilter<"GameSession"> | number
    userId?: StringFilter<"GameSession"> | string
    gameId?: StringFilter<"GameSession"> | string
    profileId?: StringNullableFilter<"GameSession"> | string | null
    spins?: GameSpinListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    Profile?: ProfileListRelationFilter
  }, "id">

  export type GameSessionOrderByWithAggregationInput = {
    id?: SortOrder
    isActive?: SortOrder
    sessionData?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    currencyId?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    endTime?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    startingBalance?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalWagered?: SortOrder
    totalWon?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    profileId?: SortOrderInput | SortOrder
    _count?: GameSessionCountOrderByAggregateInput
    _avg?: GameSessionAvgOrderByAggregateInput
    _max?: GameSessionMaxOrderByAggregateInput
    _min?: GameSessionMinOrderByAggregateInput
    _sum?: GameSessionSumOrderByAggregateInput
  }

  export type GameSessionScalarWhereWithAggregatesInput = {
    AND?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    OR?: GameSessionScalarWhereWithAggregatesInput[]
    NOT?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameSession"> | string
    isActive?: BoolWithAggregatesFilter<"GameSession"> | boolean
    sessionData?: JsonNullableWithAggregatesFilter<"GameSession">
    sessionId?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
    currencyId?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
    startedAt?: DateTimeWithAggregatesFilter<"GameSession"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
    startTime?: DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
    startingBalance?: IntNullableWithAggregatesFilter<"GameSession"> | number | null
    userAgent?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GameSession"> | Date | string
    totalWagered?: IntWithAggregatesFilter<"GameSession"> | number
    totalWon?: IntWithAggregatesFilter<"GameSession"> | number
    userId?: StringWithAggregatesFilter<"GameSession"> | string
    gameId?: StringWithAggregatesFilter<"GameSession"> | string
    profileId?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
  }

  export type UserAchievementWhereInput = {
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    metaData?: JsonNullableFilter<"UserAchievement">
    createdAt?: DateTimeFilter<"UserAchievement"> | Date | string
    updatedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }

  export type UserAchievementOrderByWithRelationInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    metaData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    user?: UserOrderByWithRelationInput
    achievement?: AchievementOrderByWithRelationInput
  }

  export type UserAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_achievementId?: UserAchievementUserIdAchievementIdCompoundUniqueInput
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    metaData?: JsonNullableFilter<"UserAchievement">
    createdAt?: DateTimeFilter<"UserAchievement"> | Date | string
    updatedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }, "id" | "userId_achievementId">

  export type UserAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    metaData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    _count?: UserAchievementCountOrderByAggregateInput
    _max?: UserAchievementMaxOrderByAggregateInput
    _min?: UserAchievementMinOrderByAggregateInput
  }

  export type UserAchievementScalarWhereWithAggregatesInput = {
    AND?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    OR?: UserAchievementScalarWhereWithAggregatesInput[]
    NOT?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
    metaData?: JsonNullableWithAggregatesFilter<"UserAchievement">
    createdAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
    userId?: StringWithAggregatesFilter<"UserAchievement"> | string
    achievementId?: StringWithAggregatesFilter<"UserAchievement"> | string
  }

  export type XpEventWhereInput = {
    AND?: XpEventWhereInput | XpEventWhereInput[]
    OR?: XpEventWhereInput[]
    NOT?: XpEventWhereInput | XpEventWhereInput[]
    id?: StringFilter<"XpEvent"> | string
    points?: IntFilter<"XpEvent"> | number
    source?: StringFilter<"XpEvent"> | string
    sourceId?: StringNullableFilter<"XpEvent"> | string | null
    meta?: JsonNullableFilter<"XpEvent">
    createdAt?: DateTimeFilter<"XpEvent"> | Date | string
    updatedAt?: DateTimeFilter<"XpEvent"> | Date | string
    userId?: StringFilter<"XpEvent"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type XpEventOrderByWithRelationInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type XpEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: XpEventWhereInput | XpEventWhereInput[]
    OR?: XpEventWhereInput[]
    NOT?: XpEventWhereInput | XpEventWhereInput[]
    points?: IntFilter<"XpEvent"> | number
    source?: StringFilter<"XpEvent"> | string
    sourceId?: StringNullableFilter<"XpEvent"> | string | null
    meta?: JsonNullableFilter<"XpEvent">
    createdAt?: DateTimeFilter<"XpEvent"> | Date | string
    updatedAt?: DateTimeFilter<"XpEvent"> | Date | string
    userId?: StringFilter<"XpEvent"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type XpEventOrderByWithAggregationInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: XpEventCountOrderByAggregateInput
    _avg?: XpEventAvgOrderByAggregateInput
    _max?: XpEventMaxOrderByAggregateInput
    _min?: XpEventMinOrderByAggregateInput
    _sum?: XpEventSumOrderByAggregateInput
  }

  export type XpEventScalarWhereWithAggregatesInput = {
    AND?: XpEventScalarWhereWithAggregatesInput | XpEventScalarWhereWithAggregatesInput[]
    OR?: XpEventScalarWhereWithAggregatesInput[]
    NOT?: XpEventScalarWhereWithAggregatesInput | XpEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"XpEvent"> | string
    points?: IntWithAggregatesFilter<"XpEvent"> | number
    source?: StringWithAggregatesFilter<"XpEvent"> | string
    sourceId?: StringNullableWithAggregatesFilter<"XpEvent"> | string | null
    meta?: JsonNullableWithAggregatesFilter<"XpEvent">
    createdAt?: DateTimeWithAggregatesFilter<"XpEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"XpEvent"> | Date | string
    userId?: StringWithAggregatesFilter<"XpEvent"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    imageUrl?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    originator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    actionUrl?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sender?: UserOrderByWithRelationInput
    originator?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    imageUrl?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    originator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    actionUrl?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    channel?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    mediaUrl?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    authorId?: StringFilter<"ChatMessage"> | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    channel?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    author?: UserOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    channel?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    mediaUrl?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    authorId?: StringFilter<"ChatMessage"> | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    channel?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    channel?: StringWithAggregatesFilter<"ChatMessage"> | string
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    mediaUrl?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    authorId?: StringWithAggregatesFilter<"ChatMessage"> | string
  }

  export type FriendshipWhereInput = {
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    id?: StringFilter<"Friendship"> | string
    status?: EnumFriendshipStatusFilter<"Friendship"> | $Enums.FriendshipStatus
    createdAt?: DateTimeFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeFilter<"Friendship"> | Date | string
    requesterId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FriendshipOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    requester?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type FriendshipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_friendId?: FriendshipUserId_friendIdCompoundUniqueInput
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    status?: EnumFriendshipStatusFilter<"Friendship"> | $Enums.FriendshipStatus
    createdAt?: DateTimeFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeFilter<"Friendship"> | Date | string
    requesterId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_friendId">

  export type FriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    OR?: FriendshipScalarWhereWithAggregatesInput[]
    NOT?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Friendship"> | string
    status?: EnumFriendshipStatusWithAggregatesFilter<"Friendship"> | $Enums.FriendshipStatus
    createdAt?: DateTimeWithAggregatesFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Friendship"> | Date | string
    requesterId?: StringWithAggregatesFilter<"Friendship"> | string
    receiverId?: StringWithAggregatesFilter<"Friendship"> | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    originatorUserId?: StringFilter<"Transaction"> | string
    processedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    receiverUserId?: StringNullableFilter<"Transaction"> | string | null
    walletId?: StringNullableFilter<"Transaction"> | string | null
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    amount?: IntFilter<"Transaction"> | number
    netAmount?: IntNullableFilter<"Transaction"> | number | null
    feeAmount?: IntNullableFilter<"Transaction"> | number | null
    productId?: StringNullableFilter<"Transaction"> | string | null
    currencyId?: StringFilter<"Transaction"> | string
    balanceBefore?: IntNullableFilter<"Transaction"> | number | null
    balanceAfter?: IntNullableFilter<"Transaction"> | number | null
    bonusBalanceBefore?: IntNullableFilter<"Transaction"> | number | null
    bonusBalanceAfter?: IntNullableFilter<"Transaction"> | number | null
    bonusAmount?: IntNullableFilter<"Transaction"> | number | null
    wageringRequirement?: IntNullableFilter<"Transaction"> | number | null
    wageringProgress?: IntNullableFilter<"Transaction"> | number | null
    description?: StringNullableFilter<"Transaction"> | string | null
    provider?: StringNullableFilter<"Transaction"> | string | null
    providerTxId?: StringNullableFilter<"Transaction"> | string | null
    relatedGameId?: StringNullableFilter<"Transaction"> | string | null
    relatedRoundId?: StringNullableFilter<"Transaction"> | string | null
    metadata?: JsonNullableFilter<"Transaction">
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    originator?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    rebateGenerated?: XOR<RebateTransactionNullableScalarRelationFilter, RebateTransactionWhereInput> | null
    Product?: ProductListRelationFilter
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    originatorUserId?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    receiverUserId?: SortOrderInput | SortOrder
    walletId?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    netAmount?: SortOrderInput | SortOrder
    feeAmount?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    currencyId?: SortOrder
    balanceBefore?: SortOrderInput | SortOrder
    balanceAfter?: SortOrderInput | SortOrder
    bonusBalanceBefore?: SortOrderInput | SortOrder
    bonusBalanceAfter?: SortOrderInput | SortOrder
    bonusAmount?: SortOrderInput | SortOrder
    wageringRequirement?: SortOrderInput | SortOrder
    wageringProgress?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    providerTxId?: SortOrderInput | SortOrder
    relatedGameId?: SortOrderInput | SortOrder
    relatedRoundId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originator?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    wallet?: WalletOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    currency?: CurrencyOrderByWithRelationInput
    rebateGenerated?: RebateTransactionOrderByWithRelationInput
    Product?: ProductOrderByRelationAggregateInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    originatorUserId?: StringFilter<"Transaction"> | string
    processedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    receiverUserId?: StringNullableFilter<"Transaction"> | string | null
    walletId?: StringNullableFilter<"Transaction"> | string | null
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    amount?: IntFilter<"Transaction"> | number
    netAmount?: IntNullableFilter<"Transaction"> | number | null
    feeAmount?: IntNullableFilter<"Transaction"> | number | null
    productId?: StringNullableFilter<"Transaction"> | string | null
    currencyId?: StringFilter<"Transaction"> | string
    balanceBefore?: IntNullableFilter<"Transaction"> | number | null
    balanceAfter?: IntNullableFilter<"Transaction"> | number | null
    bonusBalanceBefore?: IntNullableFilter<"Transaction"> | number | null
    bonusBalanceAfter?: IntNullableFilter<"Transaction"> | number | null
    bonusAmount?: IntNullableFilter<"Transaction"> | number | null
    wageringRequirement?: IntNullableFilter<"Transaction"> | number | null
    wageringProgress?: IntNullableFilter<"Transaction"> | number | null
    description?: StringNullableFilter<"Transaction"> | string | null
    provider?: StringNullableFilter<"Transaction"> | string | null
    providerTxId?: StringNullableFilter<"Transaction"> | string | null
    relatedGameId?: StringNullableFilter<"Transaction"> | string | null
    relatedRoundId?: StringNullableFilter<"Transaction"> | string | null
    metadata?: JsonNullableFilter<"Transaction">
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    originator?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    rebateGenerated?: XOR<RebateTransactionNullableScalarRelationFilter, RebateTransactionWhereInput> | null
    Product?: ProductListRelationFilter
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    originatorUserId?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    receiverUserId?: SortOrderInput | SortOrder
    walletId?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    netAmount?: SortOrderInput | SortOrder
    feeAmount?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    currencyId?: SortOrder
    balanceBefore?: SortOrderInput | SortOrder
    balanceAfter?: SortOrderInput | SortOrder
    bonusBalanceBefore?: SortOrderInput | SortOrder
    bonusBalanceAfter?: SortOrderInput | SortOrder
    bonusAmount?: SortOrderInput | SortOrder
    wageringRequirement?: SortOrderInput | SortOrder
    wageringProgress?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    providerTxId?: SortOrderInput | SortOrder
    relatedGameId?: SortOrderInput | SortOrder
    relatedRoundId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    originatorUserId?: StringWithAggregatesFilter<"Transaction"> | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"Transaction"> | Date | string | null
    receiverUserId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    walletId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    type?: EnumTransactionTypeWithAggregatesFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusWithAggregatesFilter<"Transaction"> | $Enums.TransactionStatus
    amount?: IntWithAggregatesFilter<"Transaction"> | number
    netAmount?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    feeAmount?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    productId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    currencyId?: StringWithAggregatesFilter<"Transaction"> | string
    balanceBefore?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    balanceAfter?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    bonusBalanceBefore?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    bonusBalanceAfter?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    bonusAmount?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    wageringRequirement?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    wageringProgress?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    description?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    provider?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    providerTxId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    relatedGameId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    relatedRoundId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Transaction">
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type GameLaunchLinkWhereInput = {
    AND?: GameLaunchLinkWhereInput | GameLaunchLinkWhereInput[]
    OR?: GameLaunchLinkWhereInput[]
    NOT?: GameLaunchLinkWhereInput | GameLaunchLinkWhereInput[]
    id?: StringFilter<"GameLaunchLink"> | string
    token_internal?: StringFilter<"GameLaunchLink"> | string
    currency?: StringFilter<"GameLaunchLink"> | string
    player_operator_id?: StringNullableFilter<"GameLaunchLink"> | string | null
    mode?: StringFilter<"GameLaunchLink"> | string
    meta?: JsonNullableFilter<"GameLaunchLink">
    requestIp?: StringNullableFilter<"GameLaunchLink"> | string | null
    userAgent?: StringNullableFilter<"GameLaunchLink"> | string | null
    session_url?: StringNullableFilter<"GameLaunchLink"> | string | null
    state?: StringFilter<"GameLaunchLink"> | string
    active?: BoolFilter<"GameLaunchLink"> | boolean
    expiresAt?: DateTimeNullableFilter<"GameLaunchLink"> | Date | string | null
    extra_meta?: JsonNullableFilter<"GameLaunchLink">
    token_original?: StringNullableFilter<"GameLaunchLink"> | string | null
    createdAt?: DateTimeFilter<"GameLaunchLink"> | Date | string
    updatedAt?: DateTimeFilter<"GameLaunchLink"> | Date | string
    userId?: StringFilter<"GameLaunchLink"> | string
    gameId?: StringFilter<"GameLaunchLink"> | string
    operatorId?: StringFilter<"GameLaunchLink"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    operator?: XOR<OperatorAccessScalarRelationFilter, OperatorAccessWhereInput>
  }

  export type GameLaunchLinkOrderByWithRelationInput = {
    id?: SortOrder
    token_internal?: SortOrder
    currency?: SortOrder
    player_operator_id?: SortOrderInput | SortOrder
    mode?: SortOrder
    meta?: SortOrderInput | SortOrder
    requestIp?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    session_url?: SortOrderInput | SortOrder
    state?: SortOrder
    active?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    extra_meta?: SortOrderInput | SortOrder
    token_original?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    operatorId?: SortOrder
    user?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
    operator?: OperatorAccessOrderByWithRelationInput
  }

  export type GameLaunchLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token_internal?: string
    session_url?: string
    AND?: GameLaunchLinkWhereInput | GameLaunchLinkWhereInput[]
    OR?: GameLaunchLinkWhereInput[]
    NOT?: GameLaunchLinkWhereInput | GameLaunchLinkWhereInput[]
    currency?: StringFilter<"GameLaunchLink"> | string
    player_operator_id?: StringNullableFilter<"GameLaunchLink"> | string | null
    mode?: StringFilter<"GameLaunchLink"> | string
    meta?: JsonNullableFilter<"GameLaunchLink">
    requestIp?: StringNullableFilter<"GameLaunchLink"> | string | null
    userAgent?: StringNullableFilter<"GameLaunchLink"> | string | null
    state?: StringFilter<"GameLaunchLink"> | string
    active?: BoolFilter<"GameLaunchLink"> | boolean
    expiresAt?: DateTimeNullableFilter<"GameLaunchLink"> | Date | string | null
    extra_meta?: JsonNullableFilter<"GameLaunchLink">
    token_original?: StringNullableFilter<"GameLaunchLink"> | string | null
    createdAt?: DateTimeFilter<"GameLaunchLink"> | Date | string
    updatedAt?: DateTimeFilter<"GameLaunchLink"> | Date | string
    userId?: StringFilter<"GameLaunchLink"> | string
    gameId?: StringFilter<"GameLaunchLink"> | string
    operatorId?: StringFilter<"GameLaunchLink"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    operator?: XOR<OperatorAccessScalarRelationFilter, OperatorAccessWhereInput>
  }, "id" | "token_internal" | "session_url">

  export type GameLaunchLinkOrderByWithAggregationInput = {
    id?: SortOrder
    token_internal?: SortOrder
    currency?: SortOrder
    player_operator_id?: SortOrderInput | SortOrder
    mode?: SortOrder
    meta?: SortOrderInput | SortOrder
    requestIp?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    session_url?: SortOrderInput | SortOrder
    state?: SortOrder
    active?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    extra_meta?: SortOrderInput | SortOrder
    token_original?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    operatorId?: SortOrder
    _count?: GameLaunchLinkCountOrderByAggregateInput
    _max?: GameLaunchLinkMaxOrderByAggregateInput
    _min?: GameLaunchLinkMinOrderByAggregateInput
  }

  export type GameLaunchLinkScalarWhereWithAggregatesInput = {
    AND?: GameLaunchLinkScalarWhereWithAggregatesInput | GameLaunchLinkScalarWhereWithAggregatesInput[]
    OR?: GameLaunchLinkScalarWhereWithAggregatesInput[]
    NOT?: GameLaunchLinkScalarWhereWithAggregatesInput | GameLaunchLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameLaunchLink"> | string
    token_internal?: StringWithAggregatesFilter<"GameLaunchLink"> | string
    currency?: StringWithAggregatesFilter<"GameLaunchLink"> | string
    player_operator_id?: StringNullableWithAggregatesFilter<"GameLaunchLink"> | string | null
    mode?: StringWithAggregatesFilter<"GameLaunchLink"> | string
    meta?: JsonNullableWithAggregatesFilter<"GameLaunchLink">
    requestIp?: StringNullableWithAggregatesFilter<"GameLaunchLink"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"GameLaunchLink"> | string | null
    session_url?: StringNullableWithAggregatesFilter<"GameLaunchLink"> | string | null
    state?: StringWithAggregatesFilter<"GameLaunchLink"> | string
    active?: BoolWithAggregatesFilter<"GameLaunchLink"> | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter<"GameLaunchLink"> | Date | string | null
    extra_meta?: JsonNullableWithAggregatesFilter<"GameLaunchLink">
    token_original?: StringNullableWithAggregatesFilter<"GameLaunchLink"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GameLaunchLink"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GameLaunchLink"> | Date | string
    userId?: StringWithAggregatesFilter<"GameLaunchLink"> | string
    gameId?: StringWithAggregatesFilter<"GameLaunchLink"> | string
    operatorId?: StringWithAggregatesFilter<"GameLaunchLink"> | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    title?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    url?: StringFilter<"Product"> | string
    iconUrl?: StringNullableFilter<"Product"> | string | null
    productType?: StringFilter<"Product"> | string
    bonusCode?: StringNullableFilter<"Product"> | string | null
    bonusTotalInCredits?: IntFilter<"Product"> | number
    isActive?: BoolNullableFilter<"Product"> | boolean | null
    currencyId?: StringFilter<"Product"> | string
    priceInCents?: IntFilter<"Product"> | number
    amountToReceiveInCredits?: IntFilter<"Product"> | number
    bestValue?: IntFilter<"Product"> | number
    discountInCents?: IntFilter<"Product"> | number
    bonusSpins?: IntFilter<"Product"> | number
    isPromo?: BoolNullableFilter<"Product"> | boolean | null
    totalDiscountInCents?: IntFilter<"Product"> | number
    shopId?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    transactionId?: StringNullableFilter<"Product"> | string | null
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    operator?: XOR<OperatorAccessNullableScalarRelationFilter, OperatorAccessWhereInput> | null
    transactions?: TransactionListRelationFilter
    Transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    productType?: SortOrder
    bonusCode?: SortOrderInput | SortOrder
    bonusTotalInCredits?: SortOrder
    isActive?: SortOrderInput | SortOrder
    currencyId?: SortOrder
    priceInCents?: SortOrder
    amountToReceiveInCredits?: SortOrder
    bestValue?: SortOrder
    discountInCents?: SortOrder
    bonusSpins?: SortOrder
    isPromo?: SortOrderInput | SortOrder
    totalDiscountInCents?: SortOrder
    shopId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    currency?: CurrencyOrderByWithRelationInput
    operator?: OperatorAccessOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
    Transaction?: TransactionOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    title?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    url?: StringFilter<"Product"> | string
    iconUrl?: StringNullableFilter<"Product"> | string | null
    productType?: StringFilter<"Product"> | string
    bonusCode?: StringNullableFilter<"Product"> | string | null
    bonusTotalInCredits?: IntFilter<"Product"> | number
    isActive?: BoolNullableFilter<"Product"> | boolean | null
    currencyId?: StringFilter<"Product"> | string
    priceInCents?: IntFilter<"Product"> | number
    amountToReceiveInCredits?: IntFilter<"Product"> | number
    bestValue?: IntFilter<"Product"> | number
    discountInCents?: IntFilter<"Product"> | number
    bonusSpins?: IntFilter<"Product"> | number
    isPromo?: BoolNullableFilter<"Product"> | boolean | null
    totalDiscountInCents?: IntFilter<"Product"> | number
    shopId?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    transactionId?: StringNullableFilter<"Product"> | string | null
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    operator?: XOR<OperatorAccessNullableScalarRelationFilter, OperatorAccessWhereInput> | null
    transactions?: TransactionListRelationFilter
    Transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    productType?: SortOrder
    bonusCode?: SortOrderInput | SortOrder
    bonusTotalInCredits?: SortOrder
    isActive?: SortOrderInput | SortOrder
    currencyId?: SortOrder
    priceInCents?: SortOrder
    amountToReceiveInCredits?: SortOrder
    bestValue?: SortOrder
    discountInCents?: SortOrder
    bonusSpins?: SortOrder
    isPromo?: SortOrderInput | SortOrder
    totalDiscountInCents?: SortOrder
    shopId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    title?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    url?: StringWithAggregatesFilter<"Product"> | string
    iconUrl?: StringNullableWithAggregatesFilter<"Product"> | string | null
    productType?: StringWithAggregatesFilter<"Product"> | string
    bonusCode?: StringNullableWithAggregatesFilter<"Product"> | string | null
    bonusTotalInCredits?: IntWithAggregatesFilter<"Product"> | number
    isActive?: BoolNullableWithAggregatesFilter<"Product"> | boolean | null
    currencyId?: StringWithAggregatesFilter<"Product"> | string
    priceInCents?: IntWithAggregatesFilter<"Product"> | number
    amountToReceiveInCredits?: IntWithAggregatesFilter<"Product"> | number
    bestValue?: IntWithAggregatesFilter<"Product"> | number
    discountInCents?: IntWithAggregatesFilter<"Product"> | number
    bonusSpins?: IntWithAggregatesFilter<"Product"> | number
    isPromo?: BoolNullableWithAggregatesFilter<"Product"> | boolean | null
    totalDiscountInCents?: IntWithAggregatesFilter<"Product"> | number
    shopId?: StringNullableWithAggregatesFilter<"Product"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    transactionId?: StringNullableWithAggregatesFilter<"Product"> | string | null
  }

  export type EventLogWhereInput = {
    AND?: EventLogWhereInput | EventLogWhereInput[]
    OR?: EventLogWhereInput[]
    NOT?: EventLogWhereInput | EventLogWhereInput[]
    id?: StringFilter<"EventLog"> | string
    action?: StringFilter<"EventLog"> | string
    targetType?: StringNullableFilter<"EventLog"> | string | null
    targetId?: StringNullableFilter<"EventLog"> | string | null
    data?: JsonNullableFilter<"EventLog">
    ipAddress?: StringNullableFilter<"EventLog"> | string | null
    userAgent?: StringNullableFilter<"EventLog"> | string | null
    timestamp?: DateTimeFilter<"EventLog"> | Date | string
    createdAt?: DateTimeFilter<"EventLog"> | Date | string
    updatedAt?: DateTimeFilter<"EventLog"> | Date | string
    actorId?: StringNullableFilter<"EventLog"> | string | null
    actor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type EventLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    targetType?: SortOrderInput | SortOrder
    targetId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    actorId?: SortOrderInput | SortOrder
    actor?: UserOrderByWithRelationInput
  }

  export type EventLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventLogWhereInput | EventLogWhereInput[]
    OR?: EventLogWhereInput[]
    NOT?: EventLogWhereInput | EventLogWhereInput[]
    action?: StringFilter<"EventLog"> | string
    targetType?: StringNullableFilter<"EventLog"> | string | null
    targetId?: StringNullableFilter<"EventLog"> | string | null
    data?: JsonNullableFilter<"EventLog">
    ipAddress?: StringNullableFilter<"EventLog"> | string | null
    userAgent?: StringNullableFilter<"EventLog"> | string | null
    timestamp?: DateTimeFilter<"EventLog"> | Date | string
    createdAt?: DateTimeFilter<"EventLog"> | Date | string
    updatedAt?: DateTimeFilter<"EventLog"> | Date | string
    actorId?: StringNullableFilter<"EventLog"> | string | null
    actor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type EventLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    targetType?: SortOrderInput | SortOrder
    targetId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    actorId?: SortOrderInput | SortOrder
    _count?: EventLogCountOrderByAggregateInput
    _max?: EventLogMaxOrderByAggregateInput
    _min?: EventLogMinOrderByAggregateInput
  }

  export type EventLogScalarWhereWithAggregatesInput = {
    AND?: EventLogScalarWhereWithAggregatesInput | EventLogScalarWhereWithAggregatesInput[]
    OR?: EventLogScalarWhereWithAggregatesInput[]
    NOT?: EventLogScalarWhereWithAggregatesInput | EventLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventLog"> | string
    action?: StringWithAggregatesFilter<"EventLog"> | string
    targetType?: StringNullableWithAggregatesFilter<"EventLog"> | string | null
    targetId?: StringNullableWithAggregatesFilter<"EventLog"> | string | null
    data?: JsonNullableWithAggregatesFilter<"EventLog">
    ipAddress?: StringNullableWithAggregatesFilter<"EventLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"EventLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"EventLog"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"EventLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EventLog"> | Date | string
    actorId?: StringNullableWithAggregatesFilter<"EventLog"> | string | null
  }

  export type OperatorInvitationWhereInput = {
    AND?: OperatorInvitationWhereInput | OperatorInvitationWhereInput[]
    OR?: OperatorInvitationWhereInput[]
    NOT?: OperatorInvitationWhereInput | OperatorInvitationWhereInput[]
    id?: StringFilter<"OperatorInvitation"> | string
    operatorId?: StringFilter<"OperatorInvitation"> | string
    email?: StringFilter<"OperatorInvitation"> | string
    role?: EnumRoleFilter<"OperatorInvitation"> | $Enums.Role
    token?: StringFilter<"OperatorInvitation"> | string
    expiresAt?: DateTimeFilter<"OperatorInvitation"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"OperatorInvitation"> | Date | string | null
    invitedById?: StringFilter<"OperatorInvitation"> | string
    operator?: XOR<OperatorAccessScalarRelationFilter, OperatorAccessWhereInput>
    invitedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    User?: UserListRelationFilter
  }

  export type OperatorInvitationOrderByWithRelationInput = {
    id?: SortOrder
    operatorId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    invitedById?: SortOrder
    operator?: OperatorAccessOrderByWithRelationInput
    invitedBy?: UserOrderByWithRelationInput
    User?: UserOrderByRelationAggregateInput
  }

  export type OperatorInvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: OperatorInvitationWhereInput | OperatorInvitationWhereInput[]
    OR?: OperatorInvitationWhereInput[]
    NOT?: OperatorInvitationWhereInput | OperatorInvitationWhereInput[]
    operatorId?: StringFilter<"OperatorInvitation"> | string
    email?: StringFilter<"OperatorInvitation"> | string
    role?: EnumRoleFilter<"OperatorInvitation"> | $Enums.Role
    expiresAt?: DateTimeFilter<"OperatorInvitation"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"OperatorInvitation"> | Date | string | null
    invitedById?: StringFilter<"OperatorInvitation"> | string
    operator?: XOR<OperatorAccessScalarRelationFilter, OperatorAccessWhereInput>
    invitedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    User?: UserListRelationFilter
  }, "id" | "token">

  export type OperatorInvitationOrderByWithAggregationInput = {
    id?: SortOrder
    operatorId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    invitedById?: SortOrder
    _count?: OperatorInvitationCountOrderByAggregateInput
    _max?: OperatorInvitationMaxOrderByAggregateInput
    _min?: OperatorInvitationMinOrderByAggregateInput
  }

  export type OperatorInvitationScalarWhereWithAggregatesInput = {
    AND?: OperatorInvitationScalarWhereWithAggregatesInput | OperatorInvitationScalarWhereWithAggregatesInput[]
    OR?: OperatorInvitationScalarWhereWithAggregatesInput[]
    NOT?: OperatorInvitationScalarWhereWithAggregatesInput | OperatorInvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OperatorInvitation"> | string
    operatorId?: StringWithAggregatesFilter<"OperatorInvitation"> | string
    email?: StringWithAggregatesFilter<"OperatorInvitation"> | string
    role?: EnumRoleWithAggregatesFilter<"OperatorInvitation"> | $Enums.Role
    token?: StringWithAggregatesFilter<"OperatorInvitation"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"OperatorInvitation"> | Date | string
    acceptedAt?: DateTimeNullableWithAggregatesFilter<"OperatorInvitation"> | Date | string | null
    invitedById?: StringWithAggregatesFilter<"OperatorInvitation"> | string
  }

  export type VipInfoWhereInput = {
    AND?: VipInfoWhereInput | VipInfoWhereInput[]
    OR?: VipInfoWhereInput[]
    NOT?: VipInfoWhereInput | VipInfoWhereInput[]
    id?: StringFilter<"VipInfo"> | string
    userId?: StringFilter<"VipInfo"> | string
    level?: IntFilter<"VipInfo"> | number
    currentLevelXp?: FloatFilter<"VipInfo"> | number
    totalXp?: FloatFilter<"VipInfo"> | number
    nextLevelXpRequired?: FloatFilter<"VipInfo"> | number
    cashbackPercentage?: FloatFilter<"VipInfo"> | number
    prioritySupport?: BoolFilter<"VipInfo"> | boolean
    specialBonusesAvailable?: IntFilter<"VipInfo"> | number
    dailyBonusClaimedAt?: DateTimeNullableFilter<"VipInfo"> | Date | string | null
    weeklyBonusClaimedAt?: DateTimeNullableFilter<"VipInfo"> | Date | string | null
    monthlyBonusClaimedAt?: DateTimeNullableFilter<"VipInfo"> | Date | string | null
    createdAt?: DateTimeFilter<"VipInfo"> | Date | string
    updatedAt?: DateTimeFilter<"VipInfo"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type VipInfoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    currentLevelXp?: SortOrder
    totalXp?: SortOrder
    nextLevelXpRequired?: SortOrder
    cashbackPercentage?: SortOrder
    prioritySupport?: SortOrder
    specialBonusesAvailable?: SortOrder
    dailyBonusClaimedAt?: SortOrderInput | SortOrder
    weeklyBonusClaimedAt?: SortOrderInput | SortOrder
    monthlyBonusClaimedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type VipInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: VipInfoWhereInput | VipInfoWhereInput[]
    OR?: VipInfoWhereInput[]
    NOT?: VipInfoWhereInput | VipInfoWhereInput[]
    level?: IntFilter<"VipInfo"> | number
    currentLevelXp?: FloatFilter<"VipInfo"> | number
    totalXp?: FloatFilter<"VipInfo"> | number
    nextLevelXpRequired?: FloatFilter<"VipInfo"> | number
    cashbackPercentage?: FloatFilter<"VipInfo"> | number
    prioritySupport?: BoolFilter<"VipInfo"> | boolean
    specialBonusesAvailable?: IntFilter<"VipInfo"> | number
    dailyBonusClaimedAt?: DateTimeNullableFilter<"VipInfo"> | Date | string | null
    weeklyBonusClaimedAt?: DateTimeNullableFilter<"VipInfo"> | Date | string | null
    monthlyBonusClaimedAt?: DateTimeNullableFilter<"VipInfo"> | Date | string | null
    createdAt?: DateTimeFilter<"VipInfo"> | Date | string
    updatedAt?: DateTimeFilter<"VipInfo"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type VipInfoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    currentLevelXp?: SortOrder
    totalXp?: SortOrder
    nextLevelXpRequired?: SortOrder
    cashbackPercentage?: SortOrder
    prioritySupport?: SortOrder
    specialBonusesAvailable?: SortOrder
    dailyBonusClaimedAt?: SortOrderInput | SortOrder
    weeklyBonusClaimedAt?: SortOrderInput | SortOrder
    monthlyBonusClaimedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VipInfoCountOrderByAggregateInput
    _avg?: VipInfoAvgOrderByAggregateInput
    _max?: VipInfoMaxOrderByAggregateInput
    _min?: VipInfoMinOrderByAggregateInput
    _sum?: VipInfoSumOrderByAggregateInput
  }

  export type VipInfoScalarWhereWithAggregatesInput = {
    AND?: VipInfoScalarWhereWithAggregatesInput | VipInfoScalarWhereWithAggregatesInput[]
    OR?: VipInfoScalarWhereWithAggregatesInput[]
    NOT?: VipInfoScalarWhereWithAggregatesInput | VipInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VipInfo"> | string
    userId?: StringWithAggregatesFilter<"VipInfo"> | string
    level?: IntWithAggregatesFilter<"VipInfo"> | number
    currentLevelXp?: FloatWithAggregatesFilter<"VipInfo"> | number
    totalXp?: FloatWithAggregatesFilter<"VipInfo"> | number
    nextLevelXpRequired?: FloatWithAggregatesFilter<"VipInfo"> | number
    cashbackPercentage?: FloatWithAggregatesFilter<"VipInfo"> | number
    prioritySupport?: BoolWithAggregatesFilter<"VipInfo"> | boolean
    specialBonusesAvailable?: IntWithAggregatesFilter<"VipInfo"> | number
    dailyBonusClaimedAt?: DateTimeNullableWithAggregatesFilter<"VipInfo"> | Date | string | null
    weeklyBonusClaimedAt?: DateTimeNullableWithAggregatesFilter<"VipInfo"> | Date | string | null
    monthlyBonusClaimedAt?: DateTimeNullableWithAggregatesFilter<"VipInfo"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"VipInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VipInfo"> | Date | string
  }

  export type UserRewardWhereInput = {
    AND?: UserRewardWhereInput | UserRewardWhereInput[]
    OR?: UserRewardWhereInput[]
    NOT?: UserRewardWhereInput | UserRewardWhereInput[]
    id?: StringFilter<"UserReward"> | string
    userId?: StringFilter<"UserReward"> | string
    rewardType?: EnumRewardTypeFilter<"UserReward"> | $Enums.RewardType
    claimedAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    description?: StringFilter<"UserReward"> | string
    status?: EnumRewardStatusFilter<"UserReward"> | $Enums.RewardStatus
    amount?: FloatNullableFilter<"UserReward"> | number | null
    currencyId?: StringNullableFilter<"UserReward"> | string | null
    metaData?: JsonNullableFilter<"UserReward">
    expiresAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    availableFrom?: DateTimeFilter<"UserReward"> | Date | string
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    vipLevelRequirement?: IntNullableFilter<"UserReward"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserRewardOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    rewardType?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    description?: SortOrder
    status?: SortOrder
    amount?: SortOrderInput | SortOrder
    currencyId?: SortOrderInput | SortOrder
    metaData?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    availableFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vipLevelRequirement?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserRewardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserRewardWhereInput | UserRewardWhereInput[]
    OR?: UserRewardWhereInput[]
    NOT?: UserRewardWhereInput | UserRewardWhereInput[]
    userId?: StringFilter<"UserReward"> | string
    rewardType?: EnumRewardTypeFilter<"UserReward"> | $Enums.RewardType
    claimedAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    description?: StringFilter<"UserReward"> | string
    status?: EnumRewardStatusFilter<"UserReward"> | $Enums.RewardStatus
    amount?: FloatNullableFilter<"UserReward"> | number | null
    currencyId?: StringNullableFilter<"UserReward"> | string | null
    metaData?: JsonNullableFilter<"UserReward">
    expiresAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    availableFrom?: DateTimeFilter<"UserReward"> | Date | string
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    vipLevelRequirement?: IntNullableFilter<"UserReward"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserRewardOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    rewardType?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    description?: SortOrder
    status?: SortOrder
    amount?: SortOrderInput | SortOrder
    currencyId?: SortOrderInput | SortOrder
    metaData?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    availableFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vipLevelRequirement?: SortOrderInput | SortOrder
    _count?: UserRewardCountOrderByAggregateInput
    _avg?: UserRewardAvgOrderByAggregateInput
    _max?: UserRewardMaxOrderByAggregateInput
    _min?: UserRewardMinOrderByAggregateInput
    _sum?: UserRewardSumOrderByAggregateInput
  }

  export type UserRewardScalarWhereWithAggregatesInput = {
    AND?: UserRewardScalarWhereWithAggregatesInput | UserRewardScalarWhereWithAggregatesInput[]
    OR?: UserRewardScalarWhereWithAggregatesInput[]
    NOT?: UserRewardScalarWhereWithAggregatesInput | UserRewardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserReward"> | string
    userId?: StringWithAggregatesFilter<"UserReward"> | string
    rewardType?: EnumRewardTypeWithAggregatesFilter<"UserReward"> | $Enums.RewardType
    claimedAt?: DateTimeNullableWithAggregatesFilter<"UserReward"> | Date | string | null
    description?: StringWithAggregatesFilter<"UserReward"> | string
    status?: EnumRewardStatusWithAggregatesFilter<"UserReward"> | $Enums.RewardStatus
    amount?: FloatNullableWithAggregatesFilter<"UserReward"> | number | null
    currencyId?: StringNullableWithAggregatesFilter<"UserReward"> | string | null
    metaData?: JsonNullableWithAggregatesFilter<"UserReward">
    expiresAt?: DateTimeNullableWithAggregatesFilter<"UserReward"> | Date | string | null
    availableFrom?: DateTimeWithAggregatesFilter<"UserReward"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserReward"> | Date | string
    vipLevelRequirement?: IntNullableWithAggregatesFilter<"UserReward"> | number | null
  }

  export type VipTaskWhereInput = {
    AND?: VipTaskWhereInput | VipTaskWhereInput[]
    OR?: VipTaskWhereInput[]
    NOT?: VipTaskWhereInput | VipTaskWhereInput[]
    id?: StringFilter<"VipTask"> | string
    taskType?: EnumVipTaskTypeFilter<"VipTask"> | $Enums.VipTaskType
    title?: StringNullableFilter<"VipTask"> | string | null
    description?: StringFilter<"VipTask"> | string
    xpReward?: IntNullableFilter<"VipTask"> | number | null
    itemRewardId?: StringNullableFilter<"VipTask"> | string | null
    bonusRewardAmount?: IntNullableFilter<"VipTask"> | number | null
    bonusCurrencyId?: StringNullableFilter<"VipTask"> | string | null
    targetValue?: IntNullableFilter<"VipTask"> | number | null
    durationDays?: IntNullableFilter<"VipTask"> | number | null
    isActive?: BoolFilter<"VipTask"> | boolean
    requiredVipLevel?: IntFilter<"VipTask"> | number
    resetCycle?: StringNullableFilter<"VipTask"> | string | null
    createdAt?: DateTimeFilter<"VipTask"> | Date | string
    updatedAt?: DateTimeFilter<"VipTask"> | Date | string
    userTaskProgress?: UserVipTaskProgressListRelationFilter
  }

  export type VipTaskOrderByWithRelationInput = {
    id?: SortOrder
    taskType?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrder
    xpReward?: SortOrderInput | SortOrder
    itemRewardId?: SortOrderInput | SortOrder
    bonusRewardAmount?: SortOrderInput | SortOrder
    bonusCurrencyId?: SortOrderInput | SortOrder
    targetValue?: SortOrderInput | SortOrder
    durationDays?: SortOrderInput | SortOrder
    isActive?: SortOrder
    requiredVipLevel?: SortOrder
    resetCycle?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userTaskProgress?: UserVipTaskProgressOrderByRelationAggregateInput
  }

  export type VipTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VipTaskWhereInput | VipTaskWhereInput[]
    OR?: VipTaskWhereInput[]
    NOT?: VipTaskWhereInput | VipTaskWhereInput[]
    taskType?: EnumVipTaskTypeFilter<"VipTask"> | $Enums.VipTaskType
    title?: StringNullableFilter<"VipTask"> | string | null
    description?: StringFilter<"VipTask"> | string
    xpReward?: IntNullableFilter<"VipTask"> | number | null
    itemRewardId?: StringNullableFilter<"VipTask"> | string | null
    bonusRewardAmount?: IntNullableFilter<"VipTask"> | number | null
    bonusCurrencyId?: StringNullableFilter<"VipTask"> | string | null
    targetValue?: IntNullableFilter<"VipTask"> | number | null
    durationDays?: IntNullableFilter<"VipTask"> | number | null
    isActive?: BoolFilter<"VipTask"> | boolean
    requiredVipLevel?: IntFilter<"VipTask"> | number
    resetCycle?: StringNullableFilter<"VipTask"> | string | null
    createdAt?: DateTimeFilter<"VipTask"> | Date | string
    updatedAt?: DateTimeFilter<"VipTask"> | Date | string
    userTaskProgress?: UserVipTaskProgressListRelationFilter
  }, "id">

  export type VipTaskOrderByWithAggregationInput = {
    id?: SortOrder
    taskType?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrder
    xpReward?: SortOrderInput | SortOrder
    itemRewardId?: SortOrderInput | SortOrder
    bonusRewardAmount?: SortOrderInput | SortOrder
    bonusCurrencyId?: SortOrderInput | SortOrder
    targetValue?: SortOrderInput | SortOrder
    durationDays?: SortOrderInput | SortOrder
    isActive?: SortOrder
    requiredVipLevel?: SortOrder
    resetCycle?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VipTaskCountOrderByAggregateInput
    _avg?: VipTaskAvgOrderByAggregateInput
    _max?: VipTaskMaxOrderByAggregateInput
    _min?: VipTaskMinOrderByAggregateInput
    _sum?: VipTaskSumOrderByAggregateInput
  }

  export type VipTaskScalarWhereWithAggregatesInput = {
    AND?: VipTaskScalarWhereWithAggregatesInput | VipTaskScalarWhereWithAggregatesInput[]
    OR?: VipTaskScalarWhereWithAggregatesInput[]
    NOT?: VipTaskScalarWhereWithAggregatesInput | VipTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VipTask"> | string
    taskType?: EnumVipTaskTypeWithAggregatesFilter<"VipTask"> | $Enums.VipTaskType
    title?: StringNullableWithAggregatesFilter<"VipTask"> | string | null
    description?: StringWithAggregatesFilter<"VipTask"> | string
    xpReward?: IntNullableWithAggregatesFilter<"VipTask"> | number | null
    itemRewardId?: StringNullableWithAggregatesFilter<"VipTask"> | string | null
    bonusRewardAmount?: IntNullableWithAggregatesFilter<"VipTask"> | number | null
    bonusCurrencyId?: StringNullableWithAggregatesFilter<"VipTask"> | string | null
    targetValue?: IntNullableWithAggregatesFilter<"VipTask"> | number | null
    durationDays?: IntNullableWithAggregatesFilter<"VipTask"> | number | null
    isActive?: BoolWithAggregatesFilter<"VipTask"> | boolean
    requiredVipLevel?: IntWithAggregatesFilter<"VipTask"> | number
    resetCycle?: StringNullableWithAggregatesFilter<"VipTask"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"VipTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VipTask"> | Date | string
  }

  export type UserVipTaskProgressWhereInput = {
    AND?: UserVipTaskProgressWhereInput | UserVipTaskProgressWhereInput[]
    OR?: UserVipTaskProgressWhereInput[]
    NOT?: UserVipTaskProgressWhereInput | UserVipTaskProgressWhereInput[]
    id?: StringFilter<"UserVipTaskProgress"> | string
    userId?: StringFilter<"UserVipTaskProgress"> | string
    taskId?: StringFilter<"UserVipTaskProgress"> | string
    progress?: FloatFilter<"UserVipTaskProgress"> | number
    isCompleted?: BoolFilter<"UserVipTaskProgress"> | boolean
    rewardClaimedAt?: DateTimeNullableFilter<"UserVipTaskProgress"> | Date | string | null
    lastProgressAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    createdAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    updatedAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<VipTaskScalarRelationFilter, VipTaskWhereInput>
  }

  export type UserVipTaskProgressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    progress?: SortOrder
    isCompleted?: SortOrder
    rewardClaimedAt?: SortOrderInput | SortOrder
    lastProgressAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    task?: VipTaskOrderByWithRelationInput
  }

  export type UserVipTaskProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_taskId?: UserVipTaskProgressUserIdTaskIdCompoundUniqueInput
    AND?: UserVipTaskProgressWhereInput | UserVipTaskProgressWhereInput[]
    OR?: UserVipTaskProgressWhereInput[]
    NOT?: UserVipTaskProgressWhereInput | UserVipTaskProgressWhereInput[]
    userId?: StringFilter<"UserVipTaskProgress"> | string
    taskId?: StringFilter<"UserVipTaskProgress"> | string
    progress?: FloatFilter<"UserVipTaskProgress"> | number
    isCompleted?: BoolFilter<"UserVipTaskProgress"> | boolean
    rewardClaimedAt?: DateTimeNullableFilter<"UserVipTaskProgress"> | Date | string | null
    lastProgressAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    createdAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    updatedAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<VipTaskScalarRelationFilter, VipTaskWhereInput>
  }, "id" | "userId_taskId">

  export type UserVipTaskProgressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    progress?: SortOrder
    isCompleted?: SortOrder
    rewardClaimedAt?: SortOrderInput | SortOrder
    lastProgressAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserVipTaskProgressCountOrderByAggregateInput
    _avg?: UserVipTaskProgressAvgOrderByAggregateInput
    _max?: UserVipTaskProgressMaxOrderByAggregateInput
    _min?: UserVipTaskProgressMinOrderByAggregateInput
    _sum?: UserVipTaskProgressSumOrderByAggregateInput
  }

  export type UserVipTaskProgressScalarWhereWithAggregatesInput = {
    AND?: UserVipTaskProgressScalarWhereWithAggregatesInput | UserVipTaskProgressScalarWhereWithAggregatesInput[]
    OR?: UserVipTaskProgressScalarWhereWithAggregatesInput[]
    NOT?: UserVipTaskProgressScalarWhereWithAggregatesInput | UserVipTaskProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserVipTaskProgress"> | string
    userId?: StringWithAggregatesFilter<"UserVipTaskProgress"> | string
    taskId?: StringWithAggregatesFilter<"UserVipTaskProgress"> | string
    progress?: FloatWithAggregatesFilter<"UserVipTaskProgress"> | number
    isCompleted?: BoolWithAggregatesFilter<"UserVipTaskProgress"> | boolean
    rewardClaimedAt?: DateTimeNullableWithAggregatesFilter<"UserVipTaskProgress"> | Date | string | null
    lastProgressAt?: DateTimeWithAggregatesFilter<"UserVipTaskProgress"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserVipTaskProgress"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserVipTaskProgress"> | Date | string
  }

  export type RebateTransactionWhereInput = {
    AND?: RebateTransactionWhereInput | RebateTransactionWhereInput[]
    OR?: RebateTransactionWhereInput[]
    NOT?: RebateTransactionWhereInput | RebateTransactionWhereInput[]
    id?: StringFilter<"RebateTransaction"> | string
    userId?: StringFilter<"RebateTransaction"> | string
    transactionId?: StringFilter<"RebateTransaction"> | string
    rebateAmount?: FloatFilter<"RebateTransaction"> | number
    currencyId?: StringFilter<"RebateTransaction"> | string
    vipLevel?: IntFilter<"RebateTransaction"> | number
    rebatePercentage?: FloatFilter<"RebateTransaction"> | number
    status?: EnumRewardStatusFilter<"RebateTransaction"> | $Enums.RewardStatus
    paidOutAt?: DateTimeNullableFilter<"RebateTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"RebateTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"RebateTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    originalTransaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
  }

  export type RebateTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionId?: SortOrder
    rebateAmount?: SortOrder
    currencyId?: SortOrder
    vipLevel?: SortOrder
    rebatePercentage?: SortOrder
    status?: SortOrder
    paidOutAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    originalTransaction?: TransactionOrderByWithRelationInput
  }

  export type RebateTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    transactionId?: string
    AND?: RebateTransactionWhereInput | RebateTransactionWhereInput[]
    OR?: RebateTransactionWhereInput[]
    NOT?: RebateTransactionWhereInput | RebateTransactionWhereInput[]
    userId?: StringFilter<"RebateTransaction"> | string
    rebateAmount?: FloatFilter<"RebateTransaction"> | number
    currencyId?: StringFilter<"RebateTransaction"> | string
    vipLevel?: IntFilter<"RebateTransaction"> | number
    rebatePercentage?: FloatFilter<"RebateTransaction"> | number
    status?: EnumRewardStatusFilter<"RebateTransaction"> | $Enums.RewardStatus
    paidOutAt?: DateTimeNullableFilter<"RebateTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"RebateTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"RebateTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    originalTransaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
  }, "id" | "transactionId">

  export type RebateTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionId?: SortOrder
    rebateAmount?: SortOrder
    currencyId?: SortOrder
    vipLevel?: SortOrder
    rebatePercentage?: SortOrder
    status?: SortOrder
    paidOutAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RebateTransactionCountOrderByAggregateInput
    _avg?: RebateTransactionAvgOrderByAggregateInput
    _max?: RebateTransactionMaxOrderByAggregateInput
    _min?: RebateTransactionMinOrderByAggregateInput
    _sum?: RebateTransactionSumOrderByAggregateInput
  }

  export type RebateTransactionScalarWhereWithAggregatesInput = {
    AND?: RebateTransactionScalarWhereWithAggregatesInput | RebateTransactionScalarWhereWithAggregatesInput[]
    OR?: RebateTransactionScalarWhereWithAggregatesInput[]
    NOT?: RebateTransactionScalarWhereWithAggregatesInput | RebateTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RebateTransaction"> | string
    userId?: StringWithAggregatesFilter<"RebateTransaction"> | string
    transactionId?: StringWithAggregatesFilter<"RebateTransaction"> | string
    rebateAmount?: FloatWithAggregatesFilter<"RebateTransaction"> | number
    currencyId?: StringWithAggregatesFilter<"RebateTransaction"> | string
    vipLevel?: IntWithAggregatesFilter<"RebateTransaction"> | number
    rebatePercentage?: FloatWithAggregatesFilter<"RebateTransaction"> | number
    status?: EnumRewardStatusWithAggregatesFilter<"RebateTransaction"> | $Enums.RewardStatus
    paidOutAt?: DateTimeNullableWithAggregatesFilter<"RebateTransaction"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RebateTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RebateTransaction"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CurrencyCreateInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserCreateNestedManyWithoutPreferredCurrencyInput
    wallets?: WalletCreateNestedManyWithoutCurrencyInput
    transactions?: TransactionCreateNestedManyWithoutCurrencyInput
    products?: ProductCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserUncheckedCreateNestedManyWithoutPreferredCurrencyInput
    wallets?: WalletUncheckedCreateNestedManyWithoutCurrencyInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCurrencyInput
    products?: ProductUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUpdateManyWithoutPreferredCurrencyNestedInput
    wallets?: WalletUpdateManyWithoutCurrencyNestedInput
    transactions?: TransactionUpdateManyWithoutCurrencyNestedInput
    products?: ProductUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUncheckedUpdateManyWithoutPreferredCurrencyNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutCurrencyNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCurrencyNestedInput
    products?: ProductUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyCreateManyInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    username?: string | null
    name?: string | null
    activeGameId?: string | null
    ipAddress?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    lastActivityAt?: Date | string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    refreshToken?: string | null
    active?: boolean
    token: string
    updatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    username?: string | null
    name?: string | null
    activeGameId?: string | null
    ipAddress?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    lastActivityAt?: Date | string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    refreshToken?: string | null
    active?: boolean
    token: string
    updatedAt?: Date | string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    activeGameId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    activeGameId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    username?: string | null
    name?: string | null
    activeGameId?: string | null
    ipAddress?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    lastActivityAt?: Date | string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    refreshToken?: string | null
    active?: boolean
    token: string
    updatedAt?: Date | string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    activeGameId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    activeGameId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountCreateInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationCreateInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUncheckedCreateInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationCreateManyInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProfileCreateInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.Role | null
    currentGameSession?: GameSessionCreateNestedOneWithoutProfileInput
    user: UserCreateNestedOneWithoutProfileInput
    otherUser?: UserCreateNestedOneWithoutOtherProfilesInput
    operator?: OperatorAccessCreateNestedOneWithoutProfilesInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGameSessionid?: string | null
    userId: string
    otherUserid?: string | null
    role?: $Enums.Role | null
    operatorAccessId?: string | null
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    currentGameSession?: GameSessionUpdateOneWithoutProfileNestedInput
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    otherUser?: UserUpdateOneWithoutOtherProfilesNestedInput
    operator?: OperatorAccessUpdateOneWithoutProfilesNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGameSessionid?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    otherUserid?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    operatorAccessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateManyInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGameSessionid?: string | null
    userId: string
    otherUserid?: string | null
    role?: $Enums.Role | null
    operatorAccessId?: string | null
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGameSessionid?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    otherUserid?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    operatorAccessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SettingsCreateInput = {
    id?: string
    theme?: string | null
    language?: string | null
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type SettingsUncheckedCreateInput = {
    id?: string
    theme?: string | null
    language?: string | null
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type SettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type SettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SettingsCreateManyInput = {
    id?: string
    theme?: string | null
    language?: string | null
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type SettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WalletCreateInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bonusBalance?: number
    lockedBalance?: number
    user: UserCreateNestedOneWithoutWalletsInput
    currency: CurrencyCreateNestedOneWithoutWalletsInput
    transactions?: TransactionCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    currencyId: string
    bonusBalance?: number
    lockedBalance?: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutWalletsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutWalletsNestedInput
    transactions?: TransactionUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type WalletCreateManyInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    currencyId: string
    bonusBalance?: number
    lockedBalance?: number
  }

  export type WalletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
  }

  export type WalletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
  }

  export type OperatorAccessCreateInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationCreateNestedManyWithoutOperatorInput
    owner?: UserCreateNestedOneWithoutCreatedOperatorsInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutOperatorInput
    products?: ProductCreateNestedManyWithoutOperatorInput
    games?: GameCreateNestedManyWithoutOperatorInput
    profiles?: ProfileCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUncheckedCreateInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: string | null
    invitations?: OperatorInvitationUncheckedCreateNestedManyWithoutOperatorInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutOperatorInput
    products?: ProductUncheckedCreateNestedManyWithoutOperatorInput
    games?: GameUncheckedCreateNestedManyWithoutOperatorInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUpdateManyWithoutOperatorNestedInput
    owner?: UserUpdateOneWithoutCreatedOperatorsNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutOperatorNestedInput
    products?: ProductUpdateManyWithoutOperatorNestedInput
    games?: GameUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: NullableStringFieldUpdateOperationsInput | string | null
    invitations?: OperatorInvitationUncheckedUpdateManyWithoutOperatorNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutOperatorNestedInput
    products?: ProductUncheckedUpdateManyWithoutOperatorNestedInput
    games?: GameUncheckedUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessCreateManyInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: string | null
  }

  export type OperatorAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
  }

  export type OperatorAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementCreateInput = {
    id?: string
    name: string
    description: string
    xpReward: number
    iconUrl?: string | null
    secret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    blur: number
    userAchievements?: UserAchievementCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    xpReward: number
    iconUrl?: string | null
    secret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    blur: number
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: IntFieldUpdateOperationsInput | number
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blur?: IntFieldUpdateOperationsInput | number
    userAchievements?: UserAchievementUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: IntFieldUpdateOperationsInput | number
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blur?: IntFieldUpdateOperationsInput | number
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementCreateManyInput = {
    id?: string
    name: string
    description: string
    xpReward: number
    iconUrl?: string | null
    secret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    blur: number
  }

  export type AchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: IntFieldUpdateOperationsInput | number
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blur?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: IntFieldUpdateOperationsInput | number
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blur?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    gameSessions?: GameSessionCreateNestedManyWithoutGameInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutGameInput
    operator?: OperatorAccessCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    operatorId?: string | null
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutGameInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    gameSessions?: GameSessionUpdateManyWithoutGameNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutGameNestedInput
    operator?: OperatorAccessUpdateOneWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    gameSessions?: GameSessionUncheckedUpdateManyWithoutGameNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    operatorId?: string | null
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostCreateInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    post: PostCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
    authorId: string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
    authorId: string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type GameSpinCreateInput = {
    id?: string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    grossWinAmount?: number
    currencyId?: string | null
    spinNumber?: number
    wagerAmount?: number
    sessionId: string
    timeStamp: Date | string
    gameSession: GameSessionCreateNestedOneWithoutSpinsInput
  }

  export type GameSpinUncheckedCreateInput = {
    id?: string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    grossWinAmount?: number
    currencyId?: string | null
    spinNumber?: number
    gameSessionId: string
    wagerAmount?: number
    sessionId: string
    timeStamp: Date | string
  }

  export type GameSpinUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grossWinAmount?: IntFieldUpdateOperationsInput | number
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    spinNumber?: IntFieldUpdateOperationsInput | number
    wagerAmount?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    gameSession?: GameSessionUpdateOneRequiredWithoutSpinsNestedInput
  }

  export type GameSpinUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grossWinAmount?: IntFieldUpdateOperationsInput | number
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    spinNumber?: IntFieldUpdateOperationsInput | number
    gameSessionId?: StringFieldUpdateOperationsInput | string
    wagerAmount?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSpinCreateManyInput = {
    id?: string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    grossWinAmount?: number
    currencyId?: string | null
    spinNumber?: number
    gameSessionId: string
    wagerAmount?: number
    sessionId: string
    timeStamp: Date | string
  }

  export type GameSpinUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grossWinAmount?: IntFieldUpdateOperationsInput | number
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    spinNumber?: IntFieldUpdateOperationsInput | number
    wagerAmount?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSpinUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grossWinAmount?: IntFieldUpdateOperationsInput | number
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    spinNumber?: IntFieldUpdateOperationsInput | number
    gameSessionId?: StringFieldUpdateOperationsInput | string
    wagerAmount?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSessionCreateInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    profileId?: string | null
    spins?: GameSpinCreateNestedManyWithoutGameSessionInput
    user: UserCreateNestedOneWithoutGameSessionsInput
    game: GameCreateNestedOneWithoutGameSessionsInput
    Profile?: ProfileCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionUncheckedCreateInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    userId: string
    gameId: string
    profileId?: string | null
    spins?: GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
    Profile?: ProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUpdateManyWithoutGameSessionNestedInput
    user?: UserUpdateOneRequiredWithoutGameSessionsNestedInput
    game?: GameUpdateOneRequiredWithoutGameSessionsNestedInput
    Profile?: ProfileUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
    Profile?: ProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSessionCreateManyInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    userId: string
    gameId: string
    profileId?: string | null
  }

  export type GameSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAchievementCreateInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserAchievementsInput
    achievement: AchievementCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    achievementId: string
  }

  export type UserAchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserAchievementsNestedInput
    achievement?: AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementCreateManyInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    achievementId: string
  }

  export type UserAchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type XpEventCreateInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutXpEventsInput
  }

  export type XpEventUncheckedCreateInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type XpEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutXpEventsNestedInput
  }

  export type XpEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type XpEventCreateManyInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type XpEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XpEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    sender: UserCreateNestedOneWithoutSentNotificationsInput
    originator: UserCreateNestedOneWithoutReceivedNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentNotificationsNestedInput
    originator?: UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    id?: string
    channel: string
    content: string
    mediaUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    channel: string
    content: string
    mediaUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    channel: string
    content: string
    mediaUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipCreateInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutFriendshipsSentInput
    receiver: UserCreateNestedOneWithoutFriendshipsReceivedInput
  }

  export type FriendshipUncheckedCreateInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
    receiverId: string
  }

  export type FriendshipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutFriendshipsSentNestedInput
    receiver?: UserUpdateOneRequiredWithoutFriendshipsReceivedNestedInput
  }

  export type FriendshipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipCreateManyInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
    receiverId: string
  }

  export type FriendshipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutOriginatedTransactionsInput
    receiver?: UserCreateNestedOneWithoutReceivedTransactionsInput
    wallet?: WalletCreateNestedOneWithoutTransactionsInput
    product?: ProductCreateNestedOneWithoutTransactionsInput
    currency: CurrencyCreateNestedOneWithoutTransactionsInput
    rebateGenerated?: RebateTransactionCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    rebateGenerated?: RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput
    receiver?: UserUpdateOneWithoutReceivedTransactionsNestedInput
    wallet?: WalletUpdateOneWithoutTransactionsNestedInput
    product?: ProductUpdateOneWithoutTransactionsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
    rebateGenerated?: RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rebateGenerated?: RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionCreateManyInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameLaunchLinkCreateInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGameLaunchLinksInput
    game: GameCreateNestedOneWithoutGameLaunchLinksInput
    operator: OperatorAccessCreateNestedOneWithoutGameLaunchLinksInput
  }

  export type GameLaunchLinkUncheckedCreateInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    gameId: string
    operatorId: string
  }

  export type GameLaunchLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGameLaunchLinksNestedInput
    game?: GameUpdateOneRequiredWithoutGameLaunchLinksNestedInput
    operator?: OperatorAccessUpdateOneRequiredWithoutGameLaunchLinksNestedInput
  }

  export type GameLaunchLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
  }

  export type GameLaunchLinkCreateManyInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    gameId: string
    operatorId: string
  }

  export type GameLaunchLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameLaunchLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    currency: CurrencyCreateNestedOneWithoutProductsInput
    operator?: OperatorAccessCreateNestedOneWithoutProductsInput
    transactions?: TransactionCreateNestedManyWithoutProductInput
    Transaction?: TransactionCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    currencyId: string
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    shopId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactionId?: string | null
    transactions?: TransactionUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: CurrencyUpdateOneRequiredWithoutProductsNestedInput
    operator?: OperatorAccessUpdateOneWithoutProductsNestedInput
    transactions?: TransactionUpdateManyWithoutProductNestedInput
    Transaction?: TransactionUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currencyId?: StringFieldUpdateOperationsInput | string
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    shopId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: TransactionUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    currencyId: string
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    shopId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactionId?: string | null
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currencyId?: StringFieldUpdateOperationsInput | string
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    shopId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventLogCreateInput = {
    id?: string
    action: string
    targetType?: string | null
    targetId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    actor?: UserCreateNestedOneWithoutEventLogsAsActorInput
  }

  export type EventLogUncheckedCreateInput = {
    id?: string
    action: string
    targetType?: string | null
    targetId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    actorId?: string | null
  }

  export type EventLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actor?: UserUpdateOneWithoutEventLogsAsActorNestedInput
  }

  export type EventLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventLogCreateManyInput = {
    id?: string
    action: string
    targetType?: string | null
    targetId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    actorId?: string | null
  }

  export type EventLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OperatorInvitationCreateInput = {
    id?: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    operator: OperatorAccessCreateNestedOneWithoutInvitationsInput
    invitedBy: UserCreateNestedOneWithoutInvitationsSentInput
    User?: UserCreateNestedManyWithoutInvitationsReceivedInput
  }

  export type OperatorInvitationUncheckedCreateInput = {
    id?: string
    operatorId: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    invitedById: string
    User?: UserUncheckedCreateNestedManyWithoutInvitationsReceivedInput
  }

  export type OperatorInvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operator?: OperatorAccessUpdateOneRequiredWithoutInvitationsNestedInput
    invitedBy?: UserUpdateOneRequiredWithoutInvitationsSentNestedInput
    User?: UserUpdateManyWithoutInvitationsReceivedNestedInput
  }

  export type OperatorInvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invitedById?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutInvitationsReceivedNestedInput
  }

  export type OperatorInvitationCreateManyInput = {
    id?: string
    operatorId: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    invitedById: string
  }

  export type OperatorInvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OperatorInvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invitedById?: StringFieldUpdateOperationsInput | string
  }

  export type VipInfoCreateInput = {
    id?: string
    level?: number
    currentLevelXp?: number
    totalXp?: number
    nextLevelXpRequired: number
    cashbackPercentage?: number
    prioritySupport?: boolean
    specialBonusesAvailable?: number
    dailyBonusClaimedAt?: Date | string | null
    weeklyBonusClaimedAt?: Date | string | null
    monthlyBonusClaimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVipInfoInput
  }

  export type VipInfoUncheckedCreateInput = {
    id?: string
    userId: string
    level?: number
    currentLevelXp?: number
    totalXp?: number
    nextLevelXpRequired: number
    cashbackPercentage?: number
    prioritySupport?: boolean
    specialBonusesAvailable?: number
    dailyBonusClaimedAt?: Date | string | null
    weeklyBonusClaimedAt?: Date | string | null
    monthlyBonusClaimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VipInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    currentLevelXp?: FloatFieldUpdateOperationsInput | number
    totalXp?: FloatFieldUpdateOperationsInput | number
    nextLevelXpRequired?: FloatFieldUpdateOperationsInput | number
    cashbackPercentage?: FloatFieldUpdateOperationsInput | number
    prioritySupport?: BoolFieldUpdateOperationsInput | boolean
    specialBonusesAvailable?: IntFieldUpdateOperationsInput | number
    dailyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVipInfoNestedInput
  }

  export type VipInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    currentLevelXp?: FloatFieldUpdateOperationsInput | number
    totalXp?: FloatFieldUpdateOperationsInput | number
    nextLevelXpRequired?: FloatFieldUpdateOperationsInput | number
    cashbackPercentage?: FloatFieldUpdateOperationsInput | number
    prioritySupport?: BoolFieldUpdateOperationsInput | boolean
    specialBonusesAvailable?: IntFieldUpdateOperationsInput | number
    dailyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VipInfoCreateManyInput = {
    id?: string
    userId: string
    level?: number
    currentLevelXp?: number
    totalXp?: number
    nextLevelXpRequired: number
    cashbackPercentage?: number
    prioritySupport?: boolean
    specialBonusesAvailable?: number
    dailyBonusClaimedAt?: Date | string | null
    weeklyBonusClaimedAt?: Date | string | null
    monthlyBonusClaimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VipInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    currentLevelXp?: FloatFieldUpdateOperationsInput | number
    totalXp?: FloatFieldUpdateOperationsInput | number
    nextLevelXpRequired?: FloatFieldUpdateOperationsInput | number
    cashbackPercentage?: FloatFieldUpdateOperationsInput | number
    prioritySupport?: BoolFieldUpdateOperationsInput | boolean
    specialBonusesAvailable?: IntFieldUpdateOperationsInput | number
    dailyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VipInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    currentLevelXp?: FloatFieldUpdateOperationsInput | number
    totalXp?: FloatFieldUpdateOperationsInput | number
    nextLevelXpRequired?: FloatFieldUpdateOperationsInput | number
    cashbackPercentage?: FloatFieldUpdateOperationsInput | number
    prioritySupport?: BoolFieldUpdateOperationsInput | boolean
    specialBonusesAvailable?: IntFieldUpdateOperationsInput | number
    dailyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardCreateInput = {
    id?: string
    rewardType: $Enums.RewardType
    claimedAt?: Date | string | null
    description: string
    status?: $Enums.RewardStatus
    amount?: number | null
    currencyId?: string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: Date | string | null
    availableFrom?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    vipLevelRequirement?: number | null
    user: UserCreateNestedOneWithoutUserRewardsInput
  }

  export type UserRewardUncheckedCreateInput = {
    id?: string
    userId: string
    rewardType: $Enums.RewardType
    claimedAt?: Date | string | null
    description: string
    status?: $Enums.RewardStatus
    amount?: number | null
    currencyId?: string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: Date | string | null
    availableFrom?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    vipLevelRequirement?: number | null
  }

  export type UserRewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardType?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availableFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vipLevelRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutUserRewardsNestedInput
  }

  export type UserRewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rewardType?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availableFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vipLevelRequirement?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserRewardCreateManyInput = {
    id?: string
    userId: string
    rewardType: $Enums.RewardType
    claimedAt?: Date | string | null
    description: string
    status?: $Enums.RewardStatus
    amount?: number | null
    currencyId?: string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: Date | string | null
    availableFrom?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    vipLevelRequirement?: number | null
  }

  export type UserRewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardType?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availableFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vipLevelRequirement?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserRewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rewardType?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availableFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vipLevelRequirement?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VipTaskCreateInput = {
    id?: string
    taskType: $Enums.VipTaskType
    title?: string | null
    description: string
    xpReward?: number | null
    itemRewardId?: string | null
    bonusRewardAmount?: number | null
    bonusCurrencyId?: string | null
    targetValue?: number | null
    durationDays?: number | null
    isActive?: boolean
    requiredVipLevel?: number
    resetCycle?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutTaskInput
  }

  export type VipTaskUncheckedCreateInput = {
    id?: string
    taskType: $Enums.VipTaskType
    title?: string | null
    description: string
    xpReward?: number | null
    itemRewardId?: string | null
    bonusRewardAmount?: number | null
    bonusCurrencyId?: string | null
    targetValue?: number | null
    durationDays?: number | null
    isActive?: boolean
    requiredVipLevel?: number
    resetCycle?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutTaskInput
  }

  export type VipTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumVipTaskTypeFieldUpdateOperationsInput | $Enums.VipTaskType
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: NullableIntFieldUpdateOperationsInput | number | null
    itemRewardId?: NullableStringFieldUpdateOperationsInput | string | null
    bonusRewardAmount?: NullableIntFieldUpdateOperationsInput | number | null
    bonusCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    targetValue?: NullableIntFieldUpdateOperationsInput | number | null
    durationDays?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiredVipLevel?: IntFieldUpdateOperationsInput | number
    resetCycle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTaskProgress?: UserVipTaskProgressUpdateManyWithoutTaskNestedInput
  }

  export type VipTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumVipTaskTypeFieldUpdateOperationsInput | $Enums.VipTaskType
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: NullableIntFieldUpdateOperationsInput | number | null
    itemRewardId?: NullableStringFieldUpdateOperationsInput | string | null
    bonusRewardAmount?: NullableIntFieldUpdateOperationsInput | number | null
    bonusCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    targetValue?: NullableIntFieldUpdateOperationsInput | number | null
    durationDays?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiredVipLevel?: IntFieldUpdateOperationsInput | number
    resetCycle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type VipTaskCreateManyInput = {
    id?: string
    taskType: $Enums.VipTaskType
    title?: string | null
    description: string
    xpReward?: number | null
    itemRewardId?: string | null
    bonusRewardAmount?: number | null
    bonusCurrencyId?: string | null
    targetValue?: number | null
    durationDays?: number | null
    isActive?: boolean
    requiredVipLevel?: number
    resetCycle?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VipTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumVipTaskTypeFieldUpdateOperationsInput | $Enums.VipTaskType
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: NullableIntFieldUpdateOperationsInput | number | null
    itemRewardId?: NullableStringFieldUpdateOperationsInput | string | null
    bonusRewardAmount?: NullableIntFieldUpdateOperationsInput | number | null
    bonusCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    targetValue?: NullableIntFieldUpdateOperationsInput | number | null
    durationDays?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiredVipLevel?: IntFieldUpdateOperationsInput | number
    resetCycle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VipTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumVipTaskTypeFieldUpdateOperationsInput | $Enums.VipTaskType
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: NullableIntFieldUpdateOperationsInput | number | null
    itemRewardId?: NullableStringFieldUpdateOperationsInput | string | null
    bonusRewardAmount?: NullableIntFieldUpdateOperationsInput | number | null
    bonusCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    targetValue?: NullableIntFieldUpdateOperationsInput | number | null
    durationDays?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiredVipLevel?: IntFieldUpdateOperationsInput | number
    resetCycle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVipTaskProgressCreateInput = {
    id?: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserVipTaskProgressInput
    task: VipTaskCreateNestedOneWithoutUserTaskProgressInput
  }

  export type UserVipTaskProgressUncheckedCreateInput = {
    id?: string
    userId: string
    taskId: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserVipTaskProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserVipTaskProgressNestedInput
    task?: VipTaskUpdateOneRequiredWithoutUserTaskProgressNestedInput
  }

  export type UserVipTaskProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVipTaskProgressCreateManyInput = {
    id?: string
    userId: string
    taskId: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserVipTaskProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVipTaskProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RebateTransactionCreateInput = {
    id?: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRebateTransactionInput
    originalTransaction: TransactionCreateNestedOneWithoutRebateGeneratedInput
  }

  export type RebateTransactionUncheckedCreateInput = {
    id?: string
    userId: string
    transactionId: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RebateTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRebateTransactionNestedInput
    originalTransaction?: TransactionUpdateOneRequiredWithoutRebateGeneratedNestedInput
  }

  export type RebateTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RebateTransactionCreateManyInput = {
    id?: string
    userId: string
    transactionId: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RebateTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RebateTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type SettingsNullableScalarRelationFilter = {
    is?: SettingsWhereInput | null
    isNot?: SettingsWhereInput | null
  }

  export type WalletListRelationFilter = {
    every?: WalletWhereInput
    some?: WalletWhereInput
    none?: WalletWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type GameSessionListRelationFilter = {
    every?: GameSessionWhereInput
    some?: GameSessionWhereInput
    none?: GameSessionWhereInput
  }

  export type XpEventListRelationFilter = {
    every?: XpEventWhereInput
    some?: XpEventWhereInput
    none?: XpEventWhereInput
  }

  export type UserAchievementListRelationFilter = {
    every?: UserAchievementWhereInput
    some?: UserAchievementWhereInput
    none?: UserAchievementWhereInput
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type GameLaunchLinkListRelationFilter = {
    every?: GameLaunchLinkWhereInput
    some?: GameLaunchLinkWhereInput
    none?: GameLaunchLinkWhereInput
  }

  export type EventLogListRelationFilter = {
    every?: EventLogWhereInput
    some?: EventLogWhereInput
    none?: EventLogWhereInput
  }

  export type OperatorAccessListRelationFilter = {
    every?: OperatorAccessWhereInput
    some?: OperatorAccessWhereInput
    none?: OperatorAccessWhereInput
  }

  export type OperatorInvitationListRelationFilter = {
    every?: OperatorInvitationWhereInput
    some?: OperatorInvitationWhereInput
    none?: OperatorInvitationWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type VipInfoNullableScalarRelationFilter = {
    is?: VipInfoWhereInput | null
    isNot?: VipInfoWhereInput | null
  }

  export type RebateTransactionListRelationFilter = {
    every?: RebateTransactionWhereInput
    some?: RebateTransactionWhereInput
    none?: RebateTransactionWhereInput
  }

  export type CurrencyNullableScalarRelationFilter = {
    is?: CurrencyWhereInput | null
    isNot?: CurrencyWhereInput | null
  }

  export type UserRewardListRelationFilter = {
    every?: UserRewardWhereInput
    some?: UserRewardWhereInput
    none?: UserRewardWhereInput
  }

  export type UserVipTaskProgressListRelationFilter = {
    every?: UserVipTaskProgressWhereInput
    some?: UserVipTaskProgressWhereInput
    none?: UserVipTaskProgressWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WalletOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type XpEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameLaunchLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperatorAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperatorInvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RebateTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserVipTaskProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    displayUsername?: SortOrder
    phone?: SortOrder
    cashtag?: SortOrder
    phoneVerified?: SortOrder
    isVerified?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalXp?: SortOrder
    currentLevel?: SortOrder
    referralCode?: SortOrder
    commissionRate?: SortOrder
    twoFactorEnabled?: SortOrder
    isOnline?: SortOrder
    twoFactorSecret?: SortOrder
    image?: SortOrder
    twoFactorRecoveryCodes?: SortOrder
    lastLogin?: SortOrder
    lastIp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWalletId?: SortOrder
    referrerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    preferredCurrencyId?: SortOrder
    timezone?: SortOrder
    locale?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    totalXp?: SortOrder
    currentLevel?: SortOrder
    commissionRate?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    displayUsername?: SortOrder
    phone?: SortOrder
    cashtag?: SortOrder
    phoneVerified?: SortOrder
    isVerified?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalXp?: SortOrder
    currentLevel?: SortOrder
    referralCode?: SortOrder
    commissionRate?: SortOrder
    twoFactorEnabled?: SortOrder
    isOnline?: SortOrder
    twoFactorSecret?: SortOrder
    image?: SortOrder
    lastLogin?: SortOrder
    lastIp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWalletId?: SortOrder
    referrerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    preferredCurrencyId?: SortOrder
    timezone?: SortOrder
    locale?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    displayUsername?: SortOrder
    phone?: SortOrder
    cashtag?: SortOrder
    phoneVerified?: SortOrder
    isVerified?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalXp?: SortOrder
    currentLevel?: SortOrder
    referralCode?: SortOrder
    commissionRate?: SortOrder
    twoFactorEnabled?: SortOrder
    isOnline?: SortOrder
    twoFactorSecret?: SortOrder
    image?: SortOrder
    lastLogin?: SortOrder
    lastIp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activeWalletId?: SortOrder
    referrerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    preferredCurrencyId?: SortOrder
    timezone?: SortOrder
    locale?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    totalXp?: SortOrder
    currentLevel?: SortOrder
    commissionRate?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CurrencyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    type?: SortOrder
    precision?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    contractAddress?: SortOrder
    blockchain?: SortOrder
    withdrawalFeeFixed?: SortOrder
    withdrawalFeePercent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencyAvgOrderByAggregateInput = {
    precision?: SortOrder
    withdrawalFeeFixed?: SortOrder
    withdrawalFeePercent?: SortOrder
  }

  export type CurrencyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    type?: SortOrder
    precision?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    contractAddress?: SortOrder
    blockchain?: SortOrder
    withdrawalFeeFixed?: SortOrder
    withdrawalFeePercent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    type?: SortOrder
    precision?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    contractAddress?: SortOrder
    blockchain?: SortOrder
    withdrawalFeeFixed?: SortOrder
    withdrawalFeePercent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencySumOrderByAggregateInput = {
    precision?: SortOrder
    withdrawalFeeFixed?: SortOrder
    withdrawalFeePercent?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    name?: SortOrder
    activeGameId?: SortOrder
    ipAddress?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    lastActivityAt?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    refreshToken?: SortOrder
    active?: SortOrder
    token?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    name?: SortOrder
    activeGameId?: SortOrder
    ipAddress?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    lastActivityAt?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    refreshToken?: SortOrder
    active?: SortOrder
    token?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    name?: SortOrder
    activeGameId?: SortOrder
    ipAddress?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    lastActivityAt?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    refreshToken?: SortOrder
    active?: SortOrder
    token?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
  }

  export type GameSessionNullableScalarRelationFilter = {
    is?: GameSessionWhereInput | null
    isNot?: GameSessionWhereInput | null
  }

  export type OperatorAccessNullableScalarRelationFilter = {
    is?: OperatorAccessWhereInput | null
    isNot?: OperatorAccessWhereInput | null
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    totalXpFromOperator?: SortOrder
    activeCurrencyType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGameSessionid?: SortOrder
    userId?: SortOrder
    otherUserid?: SortOrder
    role?: SortOrder
    operatorAccessId?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    balance?: SortOrder
    totalXpFromOperator?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    totalXpFromOperator?: SortOrder
    activeCurrencyType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGameSessionid?: SortOrder
    userId?: SortOrder
    otherUserid?: SortOrder
    role?: SortOrder
    operatorAccessId?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    totalXpFromOperator?: SortOrder
    activeCurrencyType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentGameSessionid?: SortOrder
    userId?: SortOrder
    otherUserid?: SortOrder
    role?: SortOrder
    operatorAccessId?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    balance?: SortOrder
    totalXpFromOperator?: SortOrder
  }

  export type EnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SettingsCountOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    pushNotifications?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type SettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    pushNotifications?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type SettingsMinOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    pushNotifications?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CurrencyScalarRelationFilter = {
    is?: CurrencyWhereInput
    isNot?: CurrencyWhereInput
  }

  export type WalletUserIdCurrencyIdCompoundUniqueInput = {
    userId: string
    currencyId: string
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    isActive?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    currencyId?: SortOrder
    bonusBalance?: SortOrder
    lockedBalance?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    balance?: SortOrder
    bonusBalance?: SortOrder
    lockedBalance?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    isActive?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    currencyId?: SortOrder
    bonusBalance?: SortOrder
    lockedBalance?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    isActive?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    currencyId?: SortOrder
    bonusBalance?: SortOrder
    lockedBalance?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    balance?: SortOrder
    bonusBalance?: SortOrder
    lockedBalance?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumKeyModeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.KeyMode[] | ListEnumKeyModeFieldRefInput<$PrismaModel> | null
    has?: $Enums.KeyMode | EnumKeyModeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.KeyMode[] | ListEnumKeyModeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.KeyMode[] | ListEnumKeyModeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumPaymentMethodNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    has?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    hasSome?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperatorAccessCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    operator_secret?: SortOrder
    operator_access?: SortOrder
    callbackUrl?: SortOrder
    active?: SortOrder
    permissions?: SortOrder
    ips?: SortOrder
    description?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    acceptedPayments?: SortOrder
    ownedById?: SortOrder
  }

  export type OperatorAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    operator_secret?: SortOrder
    operator_access?: SortOrder
    callbackUrl?: SortOrder
    active?: SortOrder
    description?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    ownedById?: SortOrder
  }

  export type OperatorAccessMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    operator_secret?: SortOrder
    operator_access?: SortOrder
    callbackUrl?: SortOrder
    active?: SortOrder
    description?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    ownedById?: SortOrder
  }

  export type AchievementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    iconUrl?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blur?: SortOrder
  }

  export type AchievementAvgOrderByAggregateInput = {
    xpReward?: SortOrder
    blur?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    iconUrl?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blur?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    iconUrl?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blur?: SortOrder
  }

  export type AchievementSumOrderByAggregateInput = {
    xpReward?: SortOrder
    blur?: SortOrder
  }

  export type EnumGameProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.GameProvider | EnumGameProviderFieldRefInput<$PrismaModel>
    in?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumGameProviderFilter<$PrismaModel> | $Enums.GameProvider
  }

  export type EnumGameCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.GameCategory | EnumGameCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGameCategoryFilter<$PrismaModel> | $Enums.GameCategory
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    goldsvetData?: SortOrder
    description?: SortOrder
    provider?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    thumbnailUrl?: SortOrder
    bannerUrl?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    featured?: SortOrder
    operatorId?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    provider?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    thumbnailUrl?: SortOrder
    bannerUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    featured?: SortOrder
    operatorId?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    provider?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    thumbnailUrl?: SortOrder
    bannerUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    featured?: SortOrder
    operatorId?: SortOrder
  }

  export type EnumGameProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameProvider | EnumGameProviderFieldRefInput<$PrismaModel>
    in?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumGameProviderWithAggregatesFilter<$PrismaModel> | $Enums.GameProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameProviderFilter<$PrismaModel>
    _max?: NestedEnumGameProviderFilter<$PrismaModel>
  }

  export type EnumGameCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameCategory | EnumGameCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGameCategoryWithAggregatesFilter<$PrismaModel> | $Enums.GameCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameCategoryFilter<$PrismaModel>
    _max?: NestedEnumGameCategoryFilter<$PrismaModel>
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    tags?: SortOrder
    viewCount?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
  }

  export type GameSessionScalarRelationFilter = {
    is?: GameSessionWhereInput
    isNot?: GameSessionWhereInput
  }

  export type GameSpinCountOrderByAggregateInput = {
    id?: SortOrder
    spinData?: SortOrder
    createdAt?: SortOrder
    grossWinAmount?: SortOrder
    currencyId?: SortOrder
    spinNumber?: SortOrder
    gameSessionId?: SortOrder
    wagerAmount?: SortOrder
    sessionId?: SortOrder
    timeStamp?: SortOrder
  }

  export type GameSpinAvgOrderByAggregateInput = {
    grossWinAmount?: SortOrder
    spinNumber?: SortOrder
    wagerAmount?: SortOrder
  }

  export type GameSpinMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    grossWinAmount?: SortOrder
    currencyId?: SortOrder
    spinNumber?: SortOrder
    gameSessionId?: SortOrder
    wagerAmount?: SortOrder
    sessionId?: SortOrder
    timeStamp?: SortOrder
  }

  export type GameSpinMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    grossWinAmount?: SortOrder
    currencyId?: SortOrder
    spinNumber?: SortOrder
    gameSessionId?: SortOrder
    wagerAmount?: SortOrder
    sessionId?: SortOrder
    timeStamp?: SortOrder
  }

  export type GameSpinSumOrderByAggregateInput = {
    grossWinAmount?: SortOrder
    spinNumber?: SortOrder
    wagerAmount?: SortOrder
  }

  export type GameSpinListRelationFilter = {
    every?: GameSpinWhereInput
    some?: GameSpinWhereInput
    none?: GameSpinWhereInput
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type GameSpinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameSessionCountOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    sessionData?: SortOrder
    sessionId?: SortOrder
    currencyId?: SortOrder
    startedAt?: SortOrder
    endTime?: SortOrder
    startTime?: SortOrder
    ipAddress?: SortOrder
    startingBalance?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalWagered?: SortOrder
    totalWon?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    profileId?: SortOrder
  }

  export type GameSessionAvgOrderByAggregateInput = {
    startingBalance?: SortOrder
    totalWagered?: SortOrder
    totalWon?: SortOrder
  }

  export type GameSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    sessionId?: SortOrder
    currencyId?: SortOrder
    startedAt?: SortOrder
    endTime?: SortOrder
    startTime?: SortOrder
    ipAddress?: SortOrder
    startingBalance?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalWagered?: SortOrder
    totalWon?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    profileId?: SortOrder
  }

  export type GameSessionMinOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    sessionId?: SortOrder
    currencyId?: SortOrder
    startedAt?: SortOrder
    endTime?: SortOrder
    startTime?: SortOrder
    ipAddress?: SortOrder
    startingBalance?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalWagered?: SortOrder
    totalWon?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    profileId?: SortOrder
  }

  export type GameSessionSumOrderByAggregateInput = {
    startingBalance?: SortOrder
    totalWagered?: SortOrder
    totalWon?: SortOrder
  }

  export type AchievementScalarRelationFilter = {
    is?: AchievementWhereInput
    isNot?: AchievementWhereInput
  }

  export type UserAchievementUserIdAchievementIdCompoundUniqueInput = {
    userId: string
    achievementId: string
  }

  export type UserAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    metaData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type UserAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type UserAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    unlockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type XpEventCountOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type XpEventAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type XpEventMaxOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type XpEventMinOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    source?: SortOrder
    sourceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type XpEventSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    imageUrl?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    channel?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    channel?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    channel?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
  }

  export type EnumFriendshipStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FriendshipStatus | EnumFriendshipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFriendshipStatusFilter<$PrismaModel> | $Enums.FriendshipStatus
  }

  export type FriendshipUserId_friendIdCompoundUniqueInput = {
    requesterId: string
    receiverId: string
  }

  export type FriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
  }

  export type EnumFriendshipStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FriendshipStatus | EnumFriendshipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFriendshipStatusWithAggregatesFilter<$PrismaModel> | $Enums.FriendshipStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFriendshipStatusFilter<$PrismaModel>
    _max?: NestedEnumFriendshipStatusFilter<$PrismaModel>
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type EnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type WalletNullableScalarRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type ProductNullableScalarRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type RebateTransactionNullableScalarRelationFilter = {
    is?: RebateTransactionWhereInput | null
    isNot?: RebateTransactionWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    originatorUserId?: SortOrder
    processedAt?: SortOrder
    receiverUserId?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    netAmount?: SortOrder
    feeAmount?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    bonusBalanceBefore?: SortOrder
    bonusBalanceAfter?: SortOrder
    bonusAmount?: SortOrder
    wageringRequirement?: SortOrder
    wageringProgress?: SortOrder
    description?: SortOrder
    provider?: SortOrder
    providerTxId?: SortOrder
    relatedGameId?: SortOrder
    relatedRoundId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    netAmount?: SortOrder
    feeAmount?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    bonusBalanceBefore?: SortOrder
    bonusBalanceAfter?: SortOrder
    bonusAmount?: SortOrder
    wageringRequirement?: SortOrder
    wageringProgress?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    originatorUserId?: SortOrder
    processedAt?: SortOrder
    receiverUserId?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    netAmount?: SortOrder
    feeAmount?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    bonusBalanceBefore?: SortOrder
    bonusBalanceAfter?: SortOrder
    bonusAmount?: SortOrder
    wageringRequirement?: SortOrder
    wageringProgress?: SortOrder
    description?: SortOrder
    provider?: SortOrder
    providerTxId?: SortOrder
    relatedGameId?: SortOrder
    relatedRoundId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    originatorUserId?: SortOrder
    processedAt?: SortOrder
    receiverUserId?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    netAmount?: SortOrder
    feeAmount?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    bonusBalanceBefore?: SortOrder
    bonusBalanceAfter?: SortOrder
    bonusAmount?: SortOrder
    wageringRequirement?: SortOrder
    wageringProgress?: SortOrder
    description?: SortOrder
    provider?: SortOrder
    providerTxId?: SortOrder
    relatedGameId?: SortOrder
    relatedRoundId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    netAmount?: SortOrder
    feeAmount?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    bonusBalanceBefore?: SortOrder
    bonusBalanceAfter?: SortOrder
    bonusAmount?: SortOrder
    wageringRequirement?: SortOrder
    wageringProgress?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type EnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type OperatorAccessScalarRelationFilter = {
    is?: OperatorAccessWhereInput
    isNot?: OperatorAccessWhereInput
  }

  export type GameLaunchLinkCountOrderByAggregateInput = {
    id?: SortOrder
    token_internal?: SortOrder
    currency?: SortOrder
    player_operator_id?: SortOrder
    mode?: SortOrder
    meta?: SortOrder
    requestIp?: SortOrder
    userAgent?: SortOrder
    session_url?: SortOrder
    state?: SortOrder
    active?: SortOrder
    expiresAt?: SortOrder
    extra_meta?: SortOrder
    token_original?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    operatorId?: SortOrder
  }

  export type GameLaunchLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    token_internal?: SortOrder
    currency?: SortOrder
    player_operator_id?: SortOrder
    mode?: SortOrder
    requestIp?: SortOrder
    userAgent?: SortOrder
    session_url?: SortOrder
    state?: SortOrder
    active?: SortOrder
    expiresAt?: SortOrder
    token_original?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    operatorId?: SortOrder
  }

  export type GameLaunchLinkMinOrderByAggregateInput = {
    id?: SortOrder
    token_internal?: SortOrder
    currency?: SortOrder
    player_operator_id?: SortOrder
    mode?: SortOrder
    requestIp?: SortOrder
    userAgent?: SortOrder
    session_url?: SortOrder
    state?: SortOrder
    active?: SortOrder
    expiresAt?: SortOrder
    token_original?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    operatorId?: SortOrder
  }

  export type TransactionNullableScalarRelationFilter = {
    is?: TransactionWhereInput | null
    isNot?: TransactionWhereInput | null
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
    iconUrl?: SortOrder
    productType?: SortOrder
    bonusCode?: SortOrder
    bonusTotalInCredits?: SortOrder
    isActive?: SortOrder
    currencyId?: SortOrder
    priceInCents?: SortOrder
    amountToReceiveInCredits?: SortOrder
    bestValue?: SortOrder
    discountInCents?: SortOrder
    bonusSpins?: SortOrder
    isPromo?: SortOrder
    totalDiscountInCents?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transactionId?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    bonusTotalInCredits?: SortOrder
    priceInCents?: SortOrder
    amountToReceiveInCredits?: SortOrder
    bestValue?: SortOrder
    discountInCents?: SortOrder
    bonusSpins?: SortOrder
    totalDiscountInCents?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
    iconUrl?: SortOrder
    productType?: SortOrder
    bonusCode?: SortOrder
    bonusTotalInCredits?: SortOrder
    isActive?: SortOrder
    currencyId?: SortOrder
    priceInCents?: SortOrder
    amountToReceiveInCredits?: SortOrder
    bestValue?: SortOrder
    discountInCents?: SortOrder
    bonusSpins?: SortOrder
    isPromo?: SortOrder
    totalDiscountInCents?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transactionId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
    iconUrl?: SortOrder
    productType?: SortOrder
    bonusCode?: SortOrder
    bonusTotalInCredits?: SortOrder
    isActive?: SortOrder
    currencyId?: SortOrder
    priceInCents?: SortOrder
    amountToReceiveInCredits?: SortOrder
    bestValue?: SortOrder
    discountInCents?: SortOrder
    bonusSpins?: SortOrder
    isPromo?: SortOrder
    totalDiscountInCents?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transactionId?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    bonusTotalInCredits?: SortOrder
    priceInCents?: SortOrder
    amountToReceiveInCredits?: SortOrder
    bestValue?: SortOrder
    discountInCents?: SortOrder
    bonusSpins?: SortOrder
    totalDiscountInCents?: SortOrder
  }

  export type EventLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    actorId?: SortOrder
  }

  export type EventLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    actorId?: SortOrder
  }

  export type EventLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    actorId?: SortOrder
  }

  export type OperatorInvitationCountOrderByAggregateInput = {
    id?: SortOrder
    operatorId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    invitedById?: SortOrder
  }

  export type OperatorInvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    operatorId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    invitedById?: SortOrder
  }

  export type OperatorInvitationMinOrderByAggregateInput = {
    id?: SortOrder
    operatorId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    invitedById?: SortOrder
  }

  export type VipInfoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    currentLevelXp?: SortOrder
    totalXp?: SortOrder
    nextLevelXpRequired?: SortOrder
    cashbackPercentage?: SortOrder
    prioritySupport?: SortOrder
    specialBonusesAvailable?: SortOrder
    dailyBonusClaimedAt?: SortOrder
    weeklyBonusClaimedAt?: SortOrder
    monthlyBonusClaimedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VipInfoAvgOrderByAggregateInput = {
    level?: SortOrder
    currentLevelXp?: SortOrder
    totalXp?: SortOrder
    nextLevelXpRequired?: SortOrder
    cashbackPercentage?: SortOrder
    specialBonusesAvailable?: SortOrder
  }

  export type VipInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    currentLevelXp?: SortOrder
    totalXp?: SortOrder
    nextLevelXpRequired?: SortOrder
    cashbackPercentage?: SortOrder
    prioritySupport?: SortOrder
    specialBonusesAvailable?: SortOrder
    dailyBonusClaimedAt?: SortOrder
    weeklyBonusClaimedAt?: SortOrder
    monthlyBonusClaimedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VipInfoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    currentLevelXp?: SortOrder
    totalXp?: SortOrder
    nextLevelXpRequired?: SortOrder
    cashbackPercentage?: SortOrder
    prioritySupport?: SortOrder
    specialBonusesAvailable?: SortOrder
    dailyBonusClaimedAt?: SortOrder
    weeklyBonusClaimedAt?: SortOrder
    monthlyBonusClaimedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VipInfoSumOrderByAggregateInput = {
    level?: SortOrder
    currentLevelXp?: SortOrder
    totalXp?: SortOrder
    nextLevelXpRequired?: SortOrder
    cashbackPercentage?: SortOrder
    specialBonusesAvailable?: SortOrder
  }

  export type EnumRewardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeFilter<$PrismaModel> | $Enums.RewardType
  }

  export type EnumRewardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusFilter<$PrismaModel> | $Enums.RewardStatus
  }

  export type UserRewardCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rewardType?: SortOrder
    claimedAt?: SortOrder
    description?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currencyId?: SortOrder
    metaData?: SortOrder
    expiresAt?: SortOrder
    availableFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vipLevelRequirement?: SortOrder
  }

  export type UserRewardAvgOrderByAggregateInput = {
    amount?: SortOrder
    vipLevelRequirement?: SortOrder
  }

  export type UserRewardMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rewardType?: SortOrder
    claimedAt?: SortOrder
    description?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currencyId?: SortOrder
    expiresAt?: SortOrder
    availableFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vipLevelRequirement?: SortOrder
  }

  export type UserRewardMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rewardType?: SortOrder
    claimedAt?: SortOrder
    description?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    currencyId?: SortOrder
    expiresAt?: SortOrder
    availableFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vipLevelRequirement?: SortOrder
  }

  export type UserRewardSumOrderByAggregateInput = {
    amount?: SortOrder
    vipLevelRequirement?: SortOrder
  }

  export type EnumRewardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardTypeFilter<$PrismaModel>
  }

  export type EnumRewardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusWithAggregatesFilter<$PrismaModel> | $Enums.RewardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardStatusFilter<$PrismaModel>
    _max?: NestedEnumRewardStatusFilter<$PrismaModel>
  }

  export type EnumVipTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VipTaskType | EnumVipTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVipTaskTypeFilter<$PrismaModel> | $Enums.VipTaskType
  }

  export type VipTaskCountOrderByAggregateInput = {
    id?: SortOrder
    taskType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    itemRewardId?: SortOrder
    bonusRewardAmount?: SortOrder
    bonusCurrencyId?: SortOrder
    targetValue?: SortOrder
    durationDays?: SortOrder
    isActive?: SortOrder
    requiredVipLevel?: SortOrder
    resetCycle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VipTaskAvgOrderByAggregateInput = {
    xpReward?: SortOrder
    bonusRewardAmount?: SortOrder
    targetValue?: SortOrder
    durationDays?: SortOrder
    requiredVipLevel?: SortOrder
  }

  export type VipTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    taskType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    itemRewardId?: SortOrder
    bonusRewardAmount?: SortOrder
    bonusCurrencyId?: SortOrder
    targetValue?: SortOrder
    durationDays?: SortOrder
    isActive?: SortOrder
    requiredVipLevel?: SortOrder
    resetCycle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VipTaskMinOrderByAggregateInput = {
    id?: SortOrder
    taskType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    xpReward?: SortOrder
    itemRewardId?: SortOrder
    bonusRewardAmount?: SortOrder
    bonusCurrencyId?: SortOrder
    targetValue?: SortOrder
    durationDays?: SortOrder
    isActive?: SortOrder
    requiredVipLevel?: SortOrder
    resetCycle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VipTaskSumOrderByAggregateInput = {
    xpReward?: SortOrder
    bonusRewardAmount?: SortOrder
    targetValue?: SortOrder
    durationDays?: SortOrder
    requiredVipLevel?: SortOrder
  }

  export type EnumVipTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VipTaskType | EnumVipTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVipTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.VipTaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVipTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumVipTaskTypeFilter<$PrismaModel>
  }

  export type VipTaskScalarRelationFilter = {
    is?: VipTaskWhereInput
    isNot?: VipTaskWhereInput
  }

  export type UserVipTaskProgressUserIdTaskIdCompoundUniqueInput = {
    userId: string
    taskId: string
  }

  export type UserVipTaskProgressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    progress?: SortOrder
    isCompleted?: SortOrder
    rewardClaimedAt?: SortOrder
    lastProgressAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserVipTaskProgressAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type UserVipTaskProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    progress?: SortOrder
    isCompleted?: SortOrder
    rewardClaimedAt?: SortOrder
    lastProgressAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserVipTaskProgressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    progress?: SortOrder
    isCompleted?: SortOrder
    rewardClaimedAt?: SortOrder
    lastProgressAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserVipTaskProgressSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type TransactionScalarRelationFilter = {
    is?: TransactionWhereInput
    isNot?: TransactionWhereInput
  }

  export type RebateTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionId?: SortOrder
    rebateAmount?: SortOrder
    currencyId?: SortOrder
    vipLevel?: SortOrder
    rebatePercentage?: SortOrder
    status?: SortOrder
    paidOutAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RebateTransactionAvgOrderByAggregateInput = {
    rebateAmount?: SortOrder
    vipLevel?: SortOrder
    rebatePercentage?: SortOrder
  }

  export type RebateTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionId?: SortOrder
    rebateAmount?: SortOrder
    currencyId?: SortOrder
    vipLevel?: SortOrder
    rebatePercentage?: SortOrder
    status?: SortOrder
    paidOutAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RebateTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionId?: SortOrder
    rebateAmount?: SortOrder
    currencyId?: SortOrder
    vipLevel?: SortOrder
    rebatePercentage?: SortOrder
    status?: SortOrder
    paidOutAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RebateTransactionSumOrderByAggregateInput = {
    rebateAmount?: SortOrder
    vipLevel?: SortOrder
    rebatePercentage?: SortOrder
  }

  export type UserCreatetwoFactorRecoveryCodesInput = {
    set: string[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedManyWithoutOtherUserInput = {
    create?: XOR<ProfileCreateWithoutOtherUserInput, ProfileUncheckedCreateWithoutOtherUserInput> | ProfileCreateWithoutOtherUserInput[] | ProfileUncheckedCreateWithoutOtherUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOtherUserInput | ProfileCreateOrConnectWithoutOtherUserInput[]
    createMany?: ProfileCreateManyOtherUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type SettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    connect?: SettingsWhereUniqueInput
  }

  export type WalletCreateNestedManyWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput> | WalletCreateWithoutUserInput[] | WalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput | WalletCreateOrConnectWithoutUserInput[]
    createMany?: WalletCreateManyUserInputEnvelope
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type GameSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type XpEventCreateNestedManyWithoutUserInput = {
    create?: XOR<XpEventCreateWithoutUserInput, XpEventUncheckedCreateWithoutUserInput> | XpEventCreateWithoutUserInput[] | XpEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpEventCreateOrConnectWithoutUserInput | XpEventCreateOrConnectWithoutUserInput[]
    createMany?: XpEventCreateManyUserInputEnvelope
    connect?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
  }

  export type UserAchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type FriendshipCreateNestedManyWithoutRequesterInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type GameLaunchLinkCreateNestedManyWithoutUserInput = {
    create?: XOR<GameLaunchLinkCreateWithoutUserInput, GameLaunchLinkUncheckedCreateWithoutUserInput> | GameLaunchLinkCreateWithoutUserInput[] | GameLaunchLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutUserInput | GameLaunchLinkCreateOrConnectWithoutUserInput[]
    createMany?: GameLaunchLinkCreateManyUserInputEnvelope
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
  }

  export type EventLogCreateNestedManyWithoutActorInput = {
    create?: XOR<EventLogCreateWithoutActorInput, EventLogUncheckedCreateWithoutActorInput> | EventLogCreateWithoutActorInput[] | EventLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: EventLogCreateOrConnectWithoutActorInput | EventLogCreateOrConnectWithoutActorInput[]
    createMany?: EventLogCreateManyActorInputEnvelope
    connect?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
  }

  export type OperatorAccessCreateNestedManyWithoutOwnerInput = {
    create?: XOR<OperatorAccessCreateWithoutOwnerInput, OperatorAccessUncheckedCreateWithoutOwnerInput> | OperatorAccessCreateWithoutOwnerInput[] | OperatorAccessUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutOwnerInput | OperatorAccessCreateOrConnectWithoutOwnerInput[]
    createMany?: OperatorAccessCreateManyOwnerInputEnvelope
    connect?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
  }

  export type OperatorInvitationCreateNestedManyWithoutInvitedByInput = {
    create?: XOR<OperatorInvitationCreateWithoutInvitedByInput, OperatorInvitationUncheckedCreateWithoutInvitedByInput> | OperatorInvitationCreateWithoutInvitedByInput[] | OperatorInvitationUncheckedCreateWithoutInvitedByInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutInvitedByInput | OperatorInvitationCreateOrConnectWithoutInvitedByInput[]
    createMany?: OperatorInvitationCreateManyInvitedByInputEnvelope
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
  }

  export type OperatorInvitationCreateNestedManyWithoutUserInput = {
    create?: XOR<OperatorInvitationCreateWithoutUserInput, OperatorInvitationUncheckedCreateWithoutUserInput> | OperatorInvitationCreateWithoutUserInput[] | OperatorInvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutUserInput | OperatorInvitationCreateOrConnectWithoutUserInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutReferralsInput = {
    create?: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type VipInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<VipInfoCreateWithoutUserInput, VipInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: VipInfoCreateOrConnectWithoutUserInput
    connect?: VipInfoWhereUniqueInput
  }

  export type RebateTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<RebateTransactionCreateWithoutUserInput, RebateTransactionUncheckedCreateWithoutUserInput> | RebateTransactionCreateWithoutUserInput[] | RebateTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutUserInput | RebateTransactionCreateOrConnectWithoutUserInput[]
    createMany?: RebateTransactionCreateManyUserInputEnvelope
    connect?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
  }

  export type CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput = {
    create?: XOR<CurrencyCreateWithoutUsersPreferringThisCurrencyInput, CurrencyUncheckedCreateWithoutUsersPreferringThisCurrencyInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutUsersPreferringThisCurrencyInput
    connect?: CurrencyWhereUniqueInput
  }

  export type UserRewardCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
  }

  export type UserVipTaskProgressCreateNestedManyWithoutUserInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutUserInput, UserVipTaskProgressUncheckedCreateWithoutUserInput> | UserVipTaskProgressCreateWithoutUserInput[] | UserVipTaskProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutUserInput | UserVipTaskProgressCreateOrConnectWithoutUserInput[]
    createMany?: UserVipTaskProgressCreateManyUserInputEnvelope
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutSenderInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutOriginatorInput = {
    create?: XOR<NotificationCreateWithoutOriginatorInput, NotificationUncheckedCreateWithoutOriginatorInput> | NotificationCreateWithoutOriginatorInput[] | NotificationUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOriginatorInput | NotificationCreateOrConnectWithoutOriginatorInput[]
    createMany?: NotificationCreateManyOriginatorInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutOriginatorInput = {
    create?: XOR<TransactionCreateWithoutOriginatorInput, TransactionUncheckedCreateWithoutOriginatorInput> | TransactionCreateWithoutOriginatorInput[] | TransactionUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOriginatorInput | TransactionCreateOrConnectWithoutOriginatorInput[]
    createMany?: TransactionCreateManyOriginatorInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutReceiverInput = {
    create?: XOR<TransactionCreateWithoutReceiverInput, TransactionUncheckedCreateWithoutReceiverInput> | TransactionCreateWithoutReceiverInput[] | TransactionUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutReceiverInput | TransactionCreateOrConnectWithoutReceiverInput[]
    createMany?: TransactionCreateManyReceiverInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUncheckedCreateNestedManyWithoutOtherUserInput = {
    create?: XOR<ProfileCreateWithoutOtherUserInput, ProfileUncheckedCreateWithoutOtherUserInput> | ProfileCreateWithoutOtherUserInput[] | ProfileUncheckedCreateWithoutOtherUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOtherUserInput | ProfileCreateOrConnectWithoutOtherUserInput[]
    createMany?: ProfileCreateManyOtherUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type SettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    connect?: SettingsWhereUniqueInput
  }

  export type WalletUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput> | WalletCreateWithoutUserInput[] | WalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput | WalletCreateOrConnectWithoutUserInput[]
    createMany?: WalletCreateManyUserInputEnvelope
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type GameSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type XpEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<XpEventCreateWithoutUserInput, XpEventUncheckedCreateWithoutUserInput> | XpEventCreateWithoutUserInput[] | XpEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpEventCreateOrConnectWithoutUserInput | XpEventCreateOrConnectWithoutUserInput[]
    createMany?: XpEventCreateManyUserInputEnvelope
    connect?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type FriendshipUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GameLaunchLinkCreateWithoutUserInput, GameLaunchLinkUncheckedCreateWithoutUserInput> | GameLaunchLinkCreateWithoutUserInput[] | GameLaunchLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutUserInput | GameLaunchLinkCreateOrConnectWithoutUserInput[]
    createMany?: GameLaunchLinkCreateManyUserInputEnvelope
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
  }

  export type EventLogUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<EventLogCreateWithoutActorInput, EventLogUncheckedCreateWithoutActorInput> | EventLogCreateWithoutActorInput[] | EventLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: EventLogCreateOrConnectWithoutActorInput | EventLogCreateOrConnectWithoutActorInput[]
    createMany?: EventLogCreateManyActorInputEnvelope
    connect?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
  }

  export type OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<OperatorAccessCreateWithoutOwnerInput, OperatorAccessUncheckedCreateWithoutOwnerInput> | OperatorAccessCreateWithoutOwnerInput[] | OperatorAccessUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutOwnerInput | OperatorAccessCreateOrConnectWithoutOwnerInput[]
    createMany?: OperatorAccessCreateManyOwnerInputEnvelope
    connect?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
  }

  export type OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput = {
    create?: XOR<OperatorInvitationCreateWithoutInvitedByInput, OperatorInvitationUncheckedCreateWithoutInvitedByInput> | OperatorInvitationCreateWithoutInvitedByInput[] | OperatorInvitationUncheckedCreateWithoutInvitedByInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutInvitedByInput | OperatorInvitationCreateOrConnectWithoutInvitedByInput[]
    createMany?: OperatorInvitationCreateManyInvitedByInputEnvelope
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
  }

  export type OperatorInvitationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OperatorInvitationCreateWithoutUserInput, OperatorInvitationUncheckedCreateWithoutUserInput> | OperatorInvitationCreateWithoutUserInput[] | OperatorInvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutUserInput | OperatorInvitationCreateOrConnectWithoutUserInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type VipInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<VipInfoCreateWithoutUserInput, VipInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: VipInfoCreateOrConnectWithoutUserInput
    connect?: VipInfoWhereUniqueInput
  }

  export type RebateTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RebateTransactionCreateWithoutUserInput, RebateTransactionUncheckedCreateWithoutUserInput> | RebateTransactionCreateWithoutUserInput[] | RebateTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutUserInput | RebateTransactionCreateOrConnectWithoutUserInput[]
    createMany?: RebateTransactionCreateManyUserInputEnvelope
    connect?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
  }

  export type UserRewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
  }

  export type UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutUserInput, UserVipTaskProgressUncheckedCreateWithoutUserInput> | UserVipTaskProgressCreateWithoutUserInput[] | UserVipTaskProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutUserInput | UserVipTaskProgressCreateOrConnectWithoutUserInput[]
    createMany?: UserVipTaskProgressCreateManyUserInputEnvelope
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutOriginatorInput = {
    create?: XOR<NotificationCreateWithoutOriginatorInput, NotificationUncheckedCreateWithoutOriginatorInput> | NotificationCreateWithoutOriginatorInput[] | NotificationUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOriginatorInput | NotificationCreateOrConnectWithoutOriginatorInput[]
    createMany?: NotificationCreateManyOriginatorInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutOriginatorInput = {
    create?: XOR<TransactionCreateWithoutOriginatorInput, TransactionUncheckedCreateWithoutOriginatorInput> | TransactionCreateWithoutOriginatorInput[] | TransactionUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOriginatorInput | TransactionCreateOrConnectWithoutOriginatorInput[]
    createMany?: TransactionCreateManyOriginatorInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<TransactionCreateWithoutReceiverInput, TransactionUncheckedCreateWithoutReceiverInput> | TransactionCreateWithoutReceiverInput[] | TransactionUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutReceiverInput | TransactionCreateOrConnectWithoutReceiverInput[]
    createMany?: TransactionCreateManyReceiverInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdatetwoFactorRecoveryCodesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithoutOtherUserNestedInput = {
    create?: XOR<ProfileCreateWithoutOtherUserInput, ProfileUncheckedCreateWithoutOtherUserInput> | ProfileCreateWithoutOtherUserInput[] | ProfileUncheckedCreateWithoutOtherUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOtherUserInput | ProfileCreateOrConnectWithoutOtherUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutOtherUserInput | ProfileUpsertWithWhereUniqueWithoutOtherUserInput[]
    createMany?: ProfileCreateManyOtherUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutOtherUserInput | ProfileUpdateWithWhereUniqueWithoutOtherUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutOtherUserInput | ProfileUpdateManyWithWhereWithoutOtherUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type SettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    upsert?: SettingsUpsertWithoutUserInput
    disconnect?: SettingsWhereInput | boolean
    delete?: SettingsWhereInput | boolean
    connect?: SettingsWhereUniqueInput
    update?: XOR<XOR<SettingsUpdateToOneWithWhereWithoutUserInput, SettingsUpdateWithoutUserInput>, SettingsUncheckedUpdateWithoutUserInput>
  }

  export type WalletUpdateManyWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput> | WalletCreateWithoutUserInput[] | WalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput | WalletCreateOrConnectWithoutUserInput[]
    upsert?: WalletUpsertWithWhereUniqueWithoutUserInput | WalletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WalletCreateManyUserInputEnvelope
    set?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    disconnect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    delete?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    update?: WalletUpdateWithWhereUniqueWithoutUserInput | WalletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WalletUpdateManyWithWhereWithoutUserInput | WalletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WalletScalarWhereInput | WalletScalarWhereInput[]
  }

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type GameSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutUserInput | GameSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutUserInput | GameSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutUserInput | GameSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type XpEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<XpEventCreateWithoutUserInput, XpEventUncheckedCreateWithoutUserInput> | XpEventCreateWithoutUserInput[] | XpEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpEventCreateOrConnectWithoutUserInput | XpEventCreateOrConnectWithoutUserInput[]
    upsert?: XpEventUpsertWithWhereUniqueWithoutUserInput | XpEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: XpEventCreateManyUserInputEnvelope
    set?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    disconnect?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    delete?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    connect?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    update?: XpEventUpdateWithWhereUniqueWithoutUserInput | XpEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: XpEventUpdateManyWithWhereWithoutUserInput | XpEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: XpEventScalarWhereInput | XpEventScalarWhereInput[]
  }

  export type UserAchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutAuthorInput | ChatMessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutAuthorInput | ChatMessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutAuthorInput | ChatMessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type FriendshipUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutRequesterInput | FriendshipUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutRequesterInput | FriendshipUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutRequesterInput | FriendshipUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutReceiverInput | FriendshipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutReceiverInput | FriendshipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutReceiverInput | FriendshipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type GameLaunchLinkUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameLaunchLinkCreateWithoutUserInput, GameLaunchLinkUncheckedCreateWithoutUserInput> | GameLaunchLinkCreateWithoutUserInput[] | GameLaunchLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutUserInput | GameLaunchLinkCreateOrConnectWithoutUserInput[]
    upsert?: GameLaunchLinkUpsertWithWhereUniqueWithoutUserInput | GameLaunchLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameLaunchLinkCreateManyUserInputEnvelope
    set?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    disconnect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    delete?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    update?: GameLaunchLinkUpdateWithWhereUniqueWithoutUserInput | GameLaunchLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameLaunchLinkUpdateManyWithWhereWithoutUserInput | GameLaunchLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
  }

  export type EventLogUpdateManyWithoutActorNestedInput = {
    create?: XOR<EventLogCreateWithoutActorInput, EventLogUncheckedCreateWithoutActorInput> | EventLogCreateWithoutActorInput[] | EventLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: EventLogCreateOrConnectWithoutActorInput | EventLogCreateOrConnectWithoutActorInput[]
    upsert?: EventLogUpsertWithWhereUniqueWithoutActorInput | EventLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: EventLogCreateManyActorInputEnvelope
    set?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    disconnect?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    delete?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    connect?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    update?: EventLogUpdateWithWhereUniqueWithoutActorInput | EventLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: EventLogUpdateManyWithWhereWithoutActorInput | EventLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: EventLogScalarWhereInput | EventLogScalarWhereInput[]
  }

  export type OperatorAccessUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<OperatorAccessCreateWithoutOwnerInput, OperatorAccessUncheckedCreateWithoutOwnerInput> | OperatorAccessCreateWithoutOwnerInput[] | OperatorAccessUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutOwnerInput | OperatorAccessCreateOrConnectWithoutOwnerInput[]
    upsert?: OperatorAccessUpsertWithWhereUniqueWithoutOwnerInput | OperatorAccessUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: OperatorAccessCreateManyOwnerInputEnvelope
    set?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    disconnect?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    delete?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    connect?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    update?: OperatorAccessUpdateWithWhereUniqueWithoutOwnerInput | OperatorAccessUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: OperatorAccessUpdateManyWithWhereWithoutOwnerInput | OperatorAccessUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: OperatorAccessScalarWhereInput | OperatorAccessScalarWhereInput[]
  }

  export type OperatorInvitationUpdateManyWithoutInvitedByNestedInput = {
    create?: XOR<OperatorInvitationCreateWithoutInvitedByInput, OperatorInvitationUncheckedCreateWithoutInvitedByInput> | OperatorInvitationCreateWithoutInvitedByInput[] | OperatorInvitationUncheckedCreateWithoutInvitedByInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutInvitedByInput | OperatorInvitationCreateOrConnectWithoutInvitedByInput[]
    upsert?: OperatorInvitationUpsertWithWhereUniqueWithoutInvitedByInput | OperatorInvitationUpsertWithWhereUniqueWithoutInvitedByInput[]
    createMany?: OperatorInvitationCreateManyInvitedByInputEnvelope
    set?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    disconnect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    delete?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    update?: OperatorInvitationUpdateWithWhereUniqueWithoutInvitedByInput | OperatorInvitationUpdateWithWhereUniqueWithoutInvitedByInput[]
    updateMany?: OperatorInvitationUpdateManyWithWhereWithoutInvitedByInput | OperatorInvitationUpdateManyWithWhereWithoutInvitedByInput[]
    deleteMany?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
  }

  export type OperatorInvitationUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperatorInvitationCreateWithoutUserInput, OperatorInvitationUncheckedCreateWithoutUserInput> | OperatorInvitationCreateWithoutUserInput[] | OperatorInvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutUserInput | OperatorInvitationCreateOrConnectWithoutUserInput[]
    upsert?: OperatorInvitationUpsertWithWhereUniqueWithoutUserInput | OperatorInvitationUpsertWithWhereUniqueWithoutUserInput[]
    set?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    disconnect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    delete?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    update?: OperatorInvitationUpdateWithWhereUniqueWithoutUserInput | OperatorInvitationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperatorInvitationUpdateManyWithWhereWithoutUserInput | OperatorInvitationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
  }

  export type UserUpdateOneWithoutReferralsNestedInput = {
    create?: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsInput
    upsert?: UserUpsertWithoutReferralsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralsInput, UserUpdateWithoutReferralsInput>, UserUncheckedUpdateWithoutReferralsInput>
  }

  export type UserUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type VipInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<VipInfoCreateWithoutUserInput, VipInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: VipInfoCreateOrConnectWithoutUserInput
    upsert?: VipInfoUpsertWithoutUserInput
    disconnect?: VipInfoWhereInput | boolean
    delete?: VipInfoWhereInput | boolean
    connect?: VipInfoWhereUniqueInput
    update?: XOR<XOR<VipInfoUpdateToOneWithWhereWithoutUserInput, VipInfoUpdateWithoutUserInput>, VipInfoUncheckedUpdateWithoutUserInput>
  }

  export type RebateTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<RebateTransactionCreateWithoutUserInput, RebateTransactionUncheckedCreateWithoutUserInput> | RebateTransactionCreateWithoutUserInput[] | RebateTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutUserInput | RebateTransactionCreateOrConnectWithoutUserInput[]
    upsert?: RebateTransactionUpsertWithWhereUniqueWithoutUserInput | RebateTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RebateTransactionCreateManyUserInputEnvelope
    set?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    disconnect?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    delete?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    connect?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    update?: RebateTransactionUpdateWithWhereUniqueWithoutUserInput | RebateTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RebateTransactionUpdateManyWithWhereWithoutUserInput | RebateTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RebateTransactionScalarWhereInput | RebateTransactionScalarWhereInput[]
  }

  export type CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput = {
    create?: XOR<CurrencyCreateWithoutUsersPreferringThisCurrencyInput, CurrencyUncheckedCreateWithoutUsersPreferringThisCurrencyInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutUsersPreferringThisCurrencyInput
    upsert?: CurrencyUpsertWithoutUsersPreferringThisCurrencyInput
    disconnect?: CurrencyWhereInput | boolean
    delete?: CurrencyWhereInput | boolean
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutUsersPreferringThisCurrencyInput, CurrencyUpdateWithoutUsersPreferringThisCurrencyInput>, CurrencyUncheckedUpdateWithoutUsersPreferringThisCurrencyInput>
  }

  export type UserRewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    upsert?: UserRewardUpsertWithWhereUniqueWithoutUserInput | UserRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    set?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    disconnect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    delete?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    update?: UserRewardUpdateWithWhereUniqueWithoutUserInput | UserRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRewardUpdateManyWithWhereWithoutUserInput | UserRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
  }

  export type UserVipTaskProgressUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutUserInput, UserVipTaskProgressUncheckedCreateWithoutUserInput> | UserVipTaskProgressCreateWithoutUserInput[] | UserVipTaskProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutUserInput | UserVipTaskProgressCreateOrConnectWithoutUserInput[]
    upsert?: UserVipTaskProgressUpsertWithWhereUniqueWithoutUserInput | UserVipTaskProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserVipTaskProgressCreateManyUserInputEnvelope
    set?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    disconnect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    delete?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    update?: UserVipTaskProgressUpdateWithWhereUniqueWithoutUserInput | UserVipTaskProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserVipTaskProgressUpdateManyWithWhereWithoutUserInput | UserVipTaskProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserVipTaskProgressScalarWhereInput | UserVipTaskProgressScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutSenderNestedInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutSenderInput | NotificationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutSenderInput | NotificationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutSenderInput | NotificationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutOriginatorNestedInput = {
    create?: XOR<NotificationCreateWithoutOriginatorInput, NotificationUncheckedCreateWithoutOriginatorInput> | NotificationCreateWithoutOriginatorInput[] | NotificationUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOriginatorInput | NotificationCreateOrConnectWithoutOriginatorInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutOriginatorInput | NotificationUpsertWithWhereUniqueWithoutOriginatorInput[]
    createMany?: NotificationCreateManyOriginatorInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutOriginatorInput | NotificationUpdateWithWhereUniqueWithoutOriginatorInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutOriginatorInput | NotificationUpdateManyWithWhereWithoutOriginatorInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutOriginatorNestedInput = {
    create?: XOR<TransactionCreateWithoutOriginatorInput, TransactionUncheckedCreateWithoutOriginatorInput> | TransactionCreateWithoutOriginatorInput[] | TransactionUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOriginatorInput | TransactionCreateOrConnectWithoutOriginatorInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutOriginatorInput | TransactionUpsertWithWhereUniqueWithoutOriginatorInput[]
    createMany?: TransactionCreateManyOriginatorInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutOriginatorInput | TransactionUpdateWithWhereUniqueWithoutOriginatorInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutOriginatorInput | TransactionUpdateManyWithWhereWithoutOriginatorInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<TransactionCreateWithoutReceiverInput, TransactionUncheckedCreateWithoutReceiverInput> | TransactionCreateWithoutReceiverInput[] | TransactionUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutReceiverInput | TransactionCreateOrConnectWithoutReceiverInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutReceiverInput | TransactionUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: TransactionCreateManyReceiverInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutReceiverInput | TransactionUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutReceiverInput | TransactionUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUncheckedUpdateManyWithoutOtherUserNestedInput = {
    create?: XOR<ProfileCreateWithoutOtherUserInput, ProfileUncheckedCreateWithoutOtherUserInput> | ProfileCreateWithoutOtherUserInput[] | ProfileUncheckedCreateWithoutOtherUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOtherUserInput | ProfileCreateOrConnectWithoutOtherUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutOtherUserInput | ProfileUpsertWithWhereUniqueWithoutOtherUserInput[]
    createMany?: ProfileCreateManyOtherUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutOtherUserInput | ProfileUpdateWithWhereUniqueWithoutOtherUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutOtherUserInput | ProfileUpdateManyWithWhereWithoutOtherUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type SettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    upsert?: SettingsUpsertWithoutUserInput
    disconnect?: SettingsWhereInput | boolean
    delete?: SettingsWhereInput | boolean
    connect?: SettingsWhereUniqueInput
    update?: XOR<XOR<SettingsUpdateToOneWithWhereWithoutUserInput, SettingsUpdateWithoutUserInput>, SettingsUncheckedUpdateWithoutUserInput>
  }

  export type WalletUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput> | WalletCreateWithoutUserInput[] | WalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput | WalletCreateOrConnectWithoutUserInput[]
    upsert?: WalletUpsertWithWhereUniqueWithoutUserInput | WalletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WalletCreateManyUserInputEnvelope
    set?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    disconnect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    delete?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    update?: WalletUpdateWithWhereUniqueWithoutUserInput | WalletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WalletUpdateManyWithWhereWithoutUserInput | WalletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WalletScalarWhereInput | WalletScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type GameSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutUserInput | GameSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutUserInput | GameSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutUserInput | GameSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type XpEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<XpEventCreateWithoutUserInput, XpEventUncheckedCreateWithoutUserInput> | XpEventCreateWithoutUserInput[] | XpEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpEventCreateOrConnectWithoutUserInput | XpEventCreateOrConnectWithoutUserInput[]
    upsert?: XpEventUpsertWithWhereUniqueWithoutUserInput | XpEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: XpEventCreateManyUserInputEnvelope
    set?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    disconnect?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    delete?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    connect?: XpEventWhereUniqueInput | XpEventWhereUniqueInput[]
    update?: XpEventUpdateWithWhereUniqueWithoutUserInput | XpEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: XpEventUpdateManyWithWhereWithoutUserInput | XpEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: XpEventScalarWhereInput | XpEventScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutAuthorInput | ChatMessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutAuthorInput | ChatMessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutAuthorInput | ChatMessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type FriendshipUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutRequesterInput | FriendshipUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutRequesterInput | FriendshipUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutRequesterInput | FriendshipUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutReceiverInput | FriendshipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutReceiverInput | FriendshipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutReceiverInput | FriendshipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameLaunchLinkCreateWithoutUserInput, GameLaunchLinkUncheckedCreateWithoutUserInput> | GameLaunchLinkCreateWithoutUserInput[] | GameLaunchLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutUserInput | GameLaunchLinkCreateOrConnectWithoutUserInput[]
    upsert?: GameLaunchLinkUpsertWithWhereUniqueWithoutUserInput | GameLaunchLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameLaunchLinkCreateManyUserInputEnvelope
    set?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    disconnect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    delete?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    update?: GameLaunchLinkUpdateWithWhereUniqueWithoutUserInput | GameLaunchLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameLaunchLinkUpdateManyWithWhereWithoutUserInput | GameLaunchLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
  }

  export type EventLogUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<EventLogCreateWithoutActorInput, EventLogUncheckedCreateWithoutActorInput> | EventLogCreateWithoutActorInput[] | EventLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: EventLogCreateOrConnectWithoutActorInput | EventLogCreateOrConnectWithoutActorInput[]
    upsert?: EventLogUpsertWithWhereUniqueWithoutActorInput | EventLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: EventLogCreateManyActorInputEnvelope
    set?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    disconnect?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    delete?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    connect?: EventLogWhereUniqueInput | EventLogWhereUniqueInput[]
    update?: EventLogUpdateWithWhereUniqueWithoutActorInput | EventLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: EventLogUpdateManyWithWhereWithoutActorInput | EventLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: EventLogScalarWhereInput | EventLogScalarWhereInput[]
  }

  export type OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<OperatorAccessCreateWithoutOwnerInput, OperatorAccessUncheckedCreateWithoutOwnerInput> | OperatorAccessCreateWithoutOwnerInput[] | OperatorAccessUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutOwnerInput | OperatorAccessCreateOrConnectWithoutOwnerInput[]
    upsert?: OperatorAccessUpsertWithWhereUniqueWithoutOwnerInput | OperatorAccessUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: OperatorAccessCreateManyOwnerInputEnvelope
    set?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    disconnect?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    delete?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    connect?: OperatorAccessWhereUniqueInput | OperatorAccessWhereUniqueInput[]
    update?: OperatorAccessUpdateWithWhereUniqueWithoutOwnerInput | OperatorAccessUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: OperatorAccessUpdateManyWithWhereWithoutOwnerInput | OperatorAccessUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: OperatorAccessScalarWhereInput | OperatorAccessScalarWhereInput[]
  }

  export type OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput = {
    create?: XOR<OperatorInvitationCreateWithoutInvitedByInput, OperatorInvitationUncheckedCreateWithoutInvitedByInput> | OperatorInvitationCreateWithoutInvitedByInput[] | OperatorInvitationUncheckedCreateWithoutInvitedByInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutInvitedByInput | OperatorInvitationCreateOrConnectWithoutInvitedByInput[]
    upsert?: OperatorInvitationUpsertWithWhereUniqueWithoutInvitedByInput | OperatorInvitationUpsertWithWhereUniqueWithoutInvitedByInput[]
    createMany?: OperatorInvitationCreateManyInvitedByInputEnvelope
    set?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    disconnect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    delete?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    update?: OperatorInvitationUpdateWithWhereUniqueWithoutInvitedByInput | OperatorInvitationUpdateWithWhereUniqueWithoutInvitedByInput[]
    updateMany?: OperatorInvitationUpdateManyWithWhereWithoutInvitedByInput | OperatorInvitationUpdateManyWithWhereWithoutInvitedByInput[]
    deleteMany?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
  }

  export type OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperatorInvitationCreateWithoutUserInput, OperatorInvitationUncheckedCreateWithoutUserInput> | OperatorInvitationCreateWithoutUserInput[] | OperatorInvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutUserInput | OperatorInvitationCreateOrConnectWithoutUserInput[]
    upsert?: OperatorInvitationUpsertWithWhereUniqueWithoutUserInput | OperatorInvitationUpsertWithWhereUniqueWithoutUserInput[]
    set?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    disconnect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    delete?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    update?: OperatorInvitationUpdateWithWhereUniqueWithoutUserInput | OperatorInvitationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperatorInvitationUpdateManyWithWhereWithoutUserInput | OperatorInvitationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type VipInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<VipInfoCreateWithoutUserInput, VipInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: VipInfoCreateOrConnectWithoutUserInput
    upsert?: VipInfoUpsertWithoutUserInput
    disconnect?: VipInfoWhereInput | boolean
    delete?: VipInfoWhereInput | boolean
    connect?: VipInfoWhereUniqueInput
    update?: XOR<XOR<VipInfoUpdateToOneWithWhereWithoutUserInput, VipInfoUpdateWithoutUserInput>, VipInfoUncheckedUpdateWithoutUserInput>
  }

  export type RebateTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RebateTransactionCreateWithoutUserInput, RebateTransactionUncheckedCreateWithoutUserInput> | RebateTransactionCreateWithoutUserInput[] | RebateTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutUserInput | RebateTransactionCreateOrConnectWithoutUserInput[]
    upsert?: RebateTransactionUpsertWithWhereUniqueWithoutUserInput | RebateTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RebateTransactionCreateManyUserInputEnvelope
    set?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    disconnect?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    delete?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    connect?: RebateTransactionWhereUniqueInput | RebateTransactionWhereUniqueInput[]
    update?: RebateTransactionUpdateWithWhereUniqueWithoutUserInput | RebateTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RebateTransactionUpdateManyWithWhereWithoutUserInput | RebateTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RebateTransactionScalarWhereInput | RebateTransactionScalarWhereInput[]
  }

  export type UserRewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    upsert?: UserRewardUpsertWithWhereUniqueWithoutUserInput | UserRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    set?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    disconnect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    delete?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    update?: UserRewardUpdateWithWhereUniqueWithoutUserInput | UserRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRewardUpdateManyWithWhereWithoutUserInput | UserRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
  }

  export type UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutUserInput, UserVipTaskProgressUncheckedCreateWithoutUserInput> | UserVipTaskProgressCreateWithoutUserInput[] | UserVipTaskProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutUserInput | UserVipTaskProgressCreateOrConnectWithoutUserInput[]
    upsert?: UserVipTaskProgressUpsertWithWhereUniqueWithoutUserInput | UserVipTaskProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserVipTaskProgressCreateManyUserInputEnvelope
    set?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    disconnect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    delete?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    update?: UserVipTaskProgressUpdateWithWhereUniqueWithoutUserInput | UserVipTaskProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserVipTaskProgressUpdateManyWithWhereWithoutUserInput | UserVipTaskProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserVipTaskProgressScalarWhereInput | UserVipTaskProgressScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutSenderInput | NotificationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutSenderInput | NotificationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutSenderInput | NotificationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutOriginatorNestedInput = {
    create?: XOR<NotificationCreateWithoutOriginatorInput, NotificationUncheckedCreateWithoutOriginatorInput> | NotificationCreateWithoutOriginatorInput[] | NotificationUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutOriginatorInput | NotificationCreateOrConnectWithoutOriginatorInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutOriginatorInput | NotificationUpsertWithWhereUniqueWithoutOriginatorInput[]
    createMany?: NotificationCreateManyOriginatorInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutOriginatorInput | NotificationUpdateWithWhereUniqueWithoutOriginatorInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutOriginatorInput | NotificationUpdateManyWithWhereWithoutOriginatorInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutOriginatorNestedInput = {
    create?: XOR<TransactionCreateWithoutOriginatorInput, TransactionUncheckedCreateWithoutOriginatorInput> | TransactionCreateWithoutOriginatorInput[] | TransactionUncheckedCreateWithoutOriginatorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOriginatorInput | TransactionCreateOrConnectWithoutOriginatorInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutOriginatorInput | TransactionUpsertWithWhereUniqueWithoutOriginatorInput[]
    createMany?: TransactionCreateManyOriginatorInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutOriginatorInput | TransactionUpdateWithWhereUniqueWithoutOriginatorInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutOriginatorInput | TransactionUpdateManyWithWhereWithoutOriginatorInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<TransactionCreateWithoutReceiverInput, TransactionUncheckedCreateWithoutReceiverInput> | TransactionCreateWithoutReceiverInput[] | TransactionUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutReceiverInput | TransactionCreateOrConnectWithoutReceiverInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutReceiverInput | TransactionUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: TransactionCreateManyReceiverInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutReceiverInput | TransactionUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutReceiverInput | TransactionUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutPreferredCurrencyInput = {
    create?: XOR<UserCreateWithoutPreferredCurrencyInput, UserUncheckedCreateWithoutPreferredCurrencyInput> | UserCreateWithoutPreferredCurrencyInput[] | UserUncheckedCreateWithoutPreferredCurrencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredCurrencyInput | UserCreateOrConnectWithoutPreferredCurrencyInput[]
    createMany?: UserCreateManyPreferredCurrencyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type WalletCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<WalletCreateWithoutCurrencyInput, WalletUncheckedCreateWithoutCurrencyInput> | WalletCreateWithoutCurrencyInput[] | WalletUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutCurrencyInput | WalletCreateOrConnectWithoutCurrencyInput[]
    createMany?: WalletCreateManyCurrencyInputEnvelope
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<TransactionCreateWithoutCurrencyInput, TransactionUncheckedCreateWithoutCurrencyInput> | TransactionCreateWithoutCurrencyInput[] | TransactionUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCurrencyInput | TransactionCreateOrConnectWithoutCurrencyInput[]
    createMany?: TransactionCreateManyCurrencyInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<ProductCreateWithoutCurrencyInput, ProductUncheckedCreateWithoutCurrencyInput> | ProductCreateWithoutCurrencyInput[] | ProductUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCurrencyInput | ProductCreateOrConnectWithoutCurrencyInput[]
    createMany?: ProductCreateManyCurrencyInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPreferredCurrencyInput = {
    create?: XOR<UserCreateWithoutPreferredCurrencyInput, UserUncheckedCreateWithoutPreferredCurrencyInput> | UserCreateWithoutPreferredCurrencyInput[] | UserUncheckedCreateWithoutPreferredCurrencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredCurrencyInput | UserCreateOrConnectWithoutPreferredCurrencyInput[]
    createMany?: UserCreateManyPreferredCurrencyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type WalletUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<WalletCreateWithoutCurrencyInput, WalletUncheckedCreateWithoutCurrencyInput> | WalletCreateWithoutCurrencyInput[] | WalletUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutCurrencyInput | WalletCreateOrConnectWithoutCurrencyInput[]
    createMany?: WalletCreateManyCurrencyInputEnvelope
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<TransactionCreateWithoutCurrencyInput, TransactionUncheckedCreateWithoutCurrencyInput> | TransactionCreateWithoutCurrencyInput[] | TransactionUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCurrencyInput | TransactionCreateOrConnectWithoutCurrencyInput[]
    createMany?: TransactionCreateManyCurrencyInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<ProductCreateWithoutCurrencyInput, ProductUncheckedCreateWithoutCurrencyInput> | ProductCreateWithoutCurrencyInput[] | ProductUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCurrencyInput | ProductCreateOrConnectWithoutCurrencyInput[]
    createMany?: ProductCreateManyCurrencyInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutPreferredCurrencyNestedInput = {
    create?: XOR<UserCreateWithoutPreferredCurrencyInput, UserUncheckedCreateWithoutPreferredCurrencyInput> | UserCreateWithoutPreferredCurrencyInput[] | UserUncheckedCreateWithoutPreferredCurrencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredCurrencyInput | UserCreateOrConnectWithoutPreferredCurrencyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPreferredCurrencyInput | UserUpsertWithWhereUniqueWithoutPreferredCurrencyInput[]
    createMany?: UserCreateManyPreferredCurrencyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPreferredCurrencyInput | UserUpdateWithWhereUniqueWithoutPreferredCurrencyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPreferredCurrencyInput | UserUpdateManyWithWhereWithoutPreferredCurrencyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WalletUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<WalletCreateWithoutCurrencyInput, WalletUncheckedCreateWithoutCurrencyInput> | WalletCreateWithoutCurrencyInput[] | WalletUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutCurrencyInput | WalletCreateOrConnectWithoutCurrencyInput[]
    upsert?: WalletUpsertWithWhereUniqueWithoutCurrencyInput | WalletUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: WalletCreateManyCurrencyInputEnvelope
    set?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    disconnect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    delete?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    update?: WalletUpdateWithWhereUniqueWithoutCurrencyInput | WalletUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: WalletUpdateManyWithWhereWithoutCurrencyInput | WalletUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: WalletScalarWhereInput | WalletScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<TransactionCreateWithoutCurrencyInput, TransactionUncheckedCreateWithoutCurrencyInput> | TransactionCreateWithoutCurrencyInput[] | TransactionUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCurrencyInput | TransactionCreateOrConnectWithoutCurrencyInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCurrencyInput | TransactionUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: TransactionCreateManyCurrencyInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCurrencyInput | TransactionUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCurrencyInput | TransactionUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<ProductCreateWithoutCurrencyInput, ProductUncheckedCreateWithoutCurrencyInput> | ProductCreateWithoutCurrencyInput[] | ProductUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCurrencyInput | ProductCreateOrConnectWithoutCurrencyInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCurrencyInput | ProductUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: ProductCreateManyCurrencyInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCurrencyInput | ProductUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCurrencyInput | ProductUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPreferredCurrencyNestedInput = {
    create?: XOR<UserCreateWithoutPreferredCurrencyInput, UserUncheckedCreateWithoutPreferredCurrencyInput> | UserCreateWithoutPreferredCurrencyInput[] | UserUncheckedCreateWithoutPreferredCurrencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPreferredCurrencyInput | UserCreateOrConnectWithoutPreferredCurrencyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPreferredCurrencyInput | UserUpsertWithWhereUniqueWithoutPreferredCurrencyInput[]
    createMany?: UserCreateManyPreferredCurrencyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPreferredCurrencyInput | UserUpdateWithWhereUniqueWithoutPreferredCurrencyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPreferredCurrencyInput | UserUpdateManyWithWhereWithoutPreferredCurrencyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WalletUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<WalletCreateWithoutCurrencyInput, WalletUncheckedCreateWithoutCurrencyInput> | WalletCreateWithoutCurrencyInput[] | WalletUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: WalletCreateOrConnectWithoutCurrencyInput | WalletCreateOrConnectWithoutCurrencyInput[]
    upsert?: WalletUpsertWithWhereUniqueWithoutCurrencyInput | WalletUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: WalletCreateManyCurrencyInputEnvelope
    set?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    disconnect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    delete?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    connect?: WalletWhereUniqueInput | WalletWhereUniqueInput[]
    update?: WalletUpdateWithWhereUniqueWithoutCurrencyInput | WalletUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: WalletUpdateManyWithWhereWithoutCurrencyInput | WalletUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: WalletScalarWhereInput | WalletScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<TransactionCreateWithoutCurrencyInput, TransactionUncheckedCreateWithoutCurrencyInput> | TransactionCreateWithoutCurrencyInput[] | TransactionUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCurrencyInput | TransactionCreateOrConnectWithoutCurrencyInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCurrencyInput | TransactionUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: TransactionCreateManyCurrencyInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCurrencyInput | TransactionUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCurrencyInput | TransactionUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<ProductCreateWithoutCurrencyInput, ProductUncheckedCreateWithoutCurrencyInput> | ProductCreateWithoutCurrencyInput[] | ProductUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCurrencyInput | ProductCreateOrConnectWithoutCurrencyInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCurrencyInput | ProductUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: ProductCreateManyCurrencyInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCurrencyInput | ProductUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCurrencyInput | ProductUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionInput, UserUpdateWithoutSessionInput>, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    upsert?: UserUpsertWithoutAccountInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountInput, UserUpdateWithoutAccountInput>, UserUncheckedUpdateWithoutAccountInput>
  }

  export type GameSessionCreateNestedOneWithoutProfileInput = {
    create?: XOR<GameSessionCreateWithoutProfileInput, GameSessionUncheckedCreateWithoutProfileInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutProfileInput
    connect?: GameSessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOtherProfilesInput = {
    create?: XOR<UserCreateWithoutOtherProfilesInput, UserUncheckedCreateWithoutOtherProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtherProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type OperatorAccessCreateNestedOneWithoutProfilesInput = {
    create?: XOR<OperatorAccessCreateWithoutProfilesInput, OperatorAccessUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutProfilesInput
    connect?: OperatorAccessWhereUniqueInput
  }

  export type NullableEnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role | null
  }

  export type GameSessionUpdateOneWithoutProfileNestedInput = {
    create?: XOR<GameSessionCreateWithoutProfileInput, GameSessionUncheckedCreateWithoutProfileInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutProfileInput
    upsert?: GameSessionUpsertWithoutProfileInput
    disconnect?: GameSessionWhereInput | boolean
    delete?: GameSessionWhereInput | boolean
    connect?: GameSessionWhereUniqueInput
    update?: XOR<XOR<GameSessionUpdateToOneWithWhereWithoutProfileInput, GameSessionUpdateWithoutProfileInput>, GameSessionUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateOneWithoutOtherProfilesNestedInput = {
    create?: XOR<UserCreateWithoutOtherProfilesInput, UserUncheckedCreateWithoutOtherProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtherProfilesInput
    upsert?: UserUpsertWithoutOtherProfilesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOtherProfilesInput, UserUpdateWithoutOtherProfilesInput>, UserUncheckedUpdateWithoutOtherProfilesInput>
  }

  export type OperatorAccessUpdateOneWithoutProfilesNestedInput = {
    create?: XOR<OperatorAccessCreateWithoutProfilesInput, OperatorAccessUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutProfilesInput
    upsert?: OperatorAccessUpsertWithoutProfilesInput
    disconnect?: OperatorAccessWhereInput | boolean
    delete?: OperatorAccessWhereInput | boolean
    connect?: OperatorAccessWhereUniqueInput
    update?: XOR<XOR<OperatorAccessUpdateToOneWithWhereWithoutProfilesInput, OperatorAccessUpdateWithoutProfilesInput>, OperatorAccessUncheckedUpdateWithoutProfilesInput>
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSettingsInput, UserUpdateWithoutSettingsInput>, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserCreateNestedOneWithoutWalletsInput = {
    create?: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletsInput
    connect?: UserWhereUniqueInput
  }

  export type CurrencyCreateNestedOneWithoutWalletsInput = {
    create?: XOR<CurrencyCreateWithoutWalletsInput, CurrencyUncheckedCreateWithoutWalletsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutWalletsInput
    connect?: CurrencyWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutWalletInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutWalletInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutWalletsNestedInput = {
    create?: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletsInput
    upsert?: UserUpsertWithoutWalletsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWalletsInput, UserUpdateWithoutWalletsInput>, UserUncheckedUpdateWithoutWalletsInput>
  }

  export type CurrencyUpdateOneRequiredWithoutWalletsNestedInput = {
    create?: XOR<CurrencyCreateWithoutWalletsInput, CurrencyUncheckedCreateWithoutWalletsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutWalletsInput
    upsert?: CurrencyUpsertWithoutWalletsInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutWalletsInput, CurrencyUpdateWithoutWalletsInput>, CurrencyUncheckedUpdateWithoutWalletsInput>
  }

  export type TransactionUpdateManyWithoutWalletNestedInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutWalletInput | TransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutWalletInput | TransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutWalletInput | TransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutWalletNestedInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutWalletInput | TransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutWalletInput | TransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutWalletInput | TransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type OperatorAccessCreatepermissionsInput = {
    set: $Enums.KeyMode[]
  }

  export type OperatorAccessCreateipsInput = {
    set: string[]
  }

  export type OperatorAccessCreateacceptedPaymentsInput = {
    set: $Enums.PaymentMethod[]
  }

  export type OperatorInvitationCreateNestedManyWithoutOperatorInput = {
    create?: XOR<OperatorInvitationCreateWithoutOperatorInput, OperatorInvitationUncheckedCreateWithoutOperatorInput> | OperatorInvitationCreateWithoutOperatorInput[] | OperatorInvitationUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutOperatorInput | OperatorInvitationCreateOrConnectWithoutOperatorInput[]
    createMany?: OperatorInvitationCreateManyOperatorInputEnvelope
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedOperatorsInput = {
    create?: XOR<UserCreateWithoutCreatedOperatorsInput, UserUncheckedCreateWithoutCreatedOperatorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedOperatorsInput
    connect?: UserWhereUniqueInput
  }

  export type GameLaunchLinkCreateNestedManyWithoutOperatorInput = {
    create?: XOR<GameLaunchLinkCreateWithoutOperatorInput, GameLaunchLinkUncheckedCreateWithoutOperatorInput> | GameLaunchLinkCreateWithoutOperatorInput[] | GameLaunchLinkUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutOperatorInput | GameLaunchLinkCreateOrConnectWithoutOperatorInput[]
    createMany?: GameLaunchLinkCreateManyOperatorInputEnvelope
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutOperatorInput = {
    create?: XOR<ProductCreateWithoutOperatorInput, ProductUncheckedCreateWithoutOperatorInput> | ProductCreateWithoutOperatorInput[] | ProductUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOperatorInput | ProductCreateOrConnectWithoutOperatorInput[]
    createMany?: ProductCreateManyOperatorInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutOperatorInput = {
    create?: XOR<GameCreateWithoutOperatorInput, GameUncheckedCreateWithoutOperatorInput> | GameCreateWithoutOperatorInput[] | GameUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameCreateOrConnectWithoutOperatorInput | GameCreateOrConnectWithoutOperatorInput[]
    createMany?: GameCreateManyOperatorInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutOperatorInput = {
    create?: XOR<ProfileCreateWithoutOperatorInput, ProfileUncheckedCreateWithoutOperatorInput> | ProfileCreateWithoutOperatorInput[] | ProfileUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOperatorInput | ProfileCreateOrConnectWithoutOperatorInput[]
    createMany?: ProfileCreateManyOperatorInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type OperatorInvitationUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<OperatorInvitationCreateWithoutOperatorInput, OperatorInvitationUncheckedCreateWithoutOperatorInput> | OperatorInvitationCreateWithoutOperatorInput[] | OperatorInvitationUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutOperatorInput | OperatorInvitationCreateOrConnectWithoutOperatorInput[]
    createMany?: OperatorInvitationCreateManyOperatorInputEnvelope
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
  }

  export type GameLaunchLinkUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<GameLaunchLinkCreateWithoutOperatorInput, GameLaunchLinkUncheckedCreateWithoutOperatorInput> | GameLaunchLinkCreateWithoutOperatorInput[] | GameLaunchLinkUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutOperatorInput | GameLaunchLinkCreateOrConnectWithoutOperatorInput[]
    createMany?: GameLaunchLinkCreateManyOperatorInputEnvelope
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<ProductCreateWithoutOperatorInput, ProductUncheckedCreateWithoutOperatorInput> | ProductCreateWithoutOperatorInput[] | ProductUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOperatorInput | ProductCreateOrConnectWithoutOperatorInput[]
    createMany?: ProductCreateManyOperatorInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<GameCreateWithoutOperatorInput, GameUncheckedCreateWithoutOperatorInput> | GameCreateWithoutOperatorInput[] | GameUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameCreateOrConnectWithoutOperatorInput | GameCreateOrConnectWithoutOperatorInput[]
    createMany?: GameCreateManyOperatorInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<ProfileCreateWithoutOperatorInput, ProfileUncheckedCreateWithoutOperatorInput> | ProfileCreateWithoutOperatorInput[] | ProfileUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOperatorInput | ProfileCreateOrConnectWithoutOperatorInput[]
    createMany?: ProfileCreateManyOperatorInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type OperatorAccessUpdatepermissionsInput = {
    set?: $Enums.KeyMode[]
    push?: $Enums.KeyMode | $Enums.KeyMode[]
  }

  export type OperatorAccessUpdateipsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OperatorAccessUpdateacceptedPaymentsInput = {
    set?: $Enums.PaymentMethod[]
    push?: $Enums.PaymentMethod | $Enums.PaymentMethod[]
  }

  export type OperatorInvitationUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<OperatorInvitationCreateWithoutOperatorInput, OperatorInvitationUncheckedCreateWithoutOperatorInput> | OperatorInvitationCreateWithoutOperatorInput[] | OperatorInvitationUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutOperatorInput | OperatorInvitationCreateOrConnectWithoutOperatorInput[]
    upsert?: OperatorInvitationUpsertWithWhereUniqueWithoutOperatorInput | OperatorInvitationUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: OperatorInvitationCreateManyOperatorInputEnvelope
    set?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    disconnect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    delete?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    update?: OperatorInvitationUpdateWithWhereUniqueWithoutOperatorInput | OperatorInvitationUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: OperatorInvitationUpdateManyWithWhereWithoutOperatorInput | OperatorInvitationUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatedOperatorsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedOperatorsInput, UserUncheckedCreateWithoutCreatedOperatorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedOperatorsInput
    upsert?: UserUpsertWithoutCreatedOperatorsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedOperatorsInput, UserUpdateWithoutCreatedOperatorsInput>, UserUncheckedUpdateWithoutCreatedOperatorsInput>
  }

  export type GameLaunchLinkUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<GameLaunchLinkCreateWithoutOperatorInput, GameLaunchLinkUncheckedCreateWithoutOperatorInput> | GameLaunchLinkCreateWithoutOperatorInput[] | GameLaunchLinkUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutOperatorInput | GameLaunchLinkCreateOrConnectWithoutOperatorInput[]
    upsert?: GameLaunchLinkUpsertWithWhereUniqueWithoutOperatorInput | GameLaunchLinkUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: GameLaunchLinkCreateManyOperatorInputEnvelope
    set?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    disconnect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    delete?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    update?: GameLaunchLinkUpdateWithWhereUniqueWithoutOperatorInput | GameLaunchLinkUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: GameLaunchLinkUpdateManyWithWhereWithoutOperatorInput | GameLaunchLinkUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<ProductCreateWithoutOperatorInput, ProductUncheckedCreateWithoutOperatorInput> | ProductCreateWithoutOperatorInput[] | ProductUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOperatorInput | ProductCreateOrConnectWithoutOperatorInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutOperatorInput | ProductUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: ProductCreateManyOperatorInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutOperatorInput | ProductUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutOperatorInput | ProductUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type GameUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<GameCreateWithoutOperatorInput, GameUncheckedCreateWithoutOperatorInput> | GameCreateWithoutOperatorInput[] | GameUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameCreateOrConnectWithoutOperatorInput | GameCreateOrConnectWithoutOperatorInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutOperatorInput | GameUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: GameCreateManyOperatorInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutOperatorInput | GameUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: GameUpdateManyWithWhereWithoutOperatorInput | GameUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<ProfileCreateWithoutOperatorInput, ProfileUncheckedCreateWithoutOperatorInput> | ProfileCreateWithoutOperatorInput[] | ProfileUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOperatorInput | ProfileCreateOrConnectWithoutOperatorInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutOperatorInput | ProfileUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: ProfileCreateManyOperatorInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutOperatorInput | ProfileUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutOperatorInput | ProfileUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type OperatorInvitationUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<OperatorInvitationCreateWithoutOperatorInput, OperatorInvitationUncheckedCreateWithoutOperatorInput> | OperatorInvitationCreateWithoutOperatorInput[] | OperatorInvitationUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: OperatorInvitationCreateOrConnectWithoutOperatorInput | OperatorInvitationCreateOrConnectWithoutOperatorInput[]
    upsert?: OperatorInvitationUpsertWithWhereUniqueWithoutOperatorInput | OperatorInvitationUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: OperatorInvitationCreateManyOperatorInputEnvelope
    set?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    disconnect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    delete?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    connect?: OperatorInvitationWhereUniqueInput | OperatorInvitationWhereUniqueInput[]
    update?: OperatorInvitationUpdateWithWhereUniqueWithoutOperatorInput | OperatorInvitationUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: OperatorInvitationUpdateManyWithWhereWithoutOperatorInput | OperatorInvitationUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
  }

  export type GameLaunchLinkUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<GameLaunchLinkCreateWithoutOperatorInput, GameLaunchLinkUncheckedCreateWithoutOperatorInput> | GameLaunchLinkCreateWithoutOperatorInput[] | GameLaunchLinkUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutOperatorInput | GameLaunchLinkCreateOrConnectWithoutOperatorInput[]
    upsert?: GameLaunchLinkUpsertWithWhereUniqueWithoutOperatorInput | GameLaunchLinkUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: GameLaunchLinkCreateManyOperatorInputEnvelope
    set?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    disconnect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    delete?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    update?: GameLaunchLinkUpdateWithWhereUniqueWithoutOperatorInput | GameLaunchLinkUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: GameLaunchLinkUpdateManyWithWhereWithoutOperatorInput | GameLaunchLinkUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<ProductCreateWithoutOperatorInput, ProductUncheckedCreateWithoutOperatorInput> | ProductCreateWithoutOperatorInput[] | ProductUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOperatorInput | ProductCreateOrConnectWithoutOperatorInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutOperatorInput | ProductUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: ProductCreateManyOperatorInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutOperatorInput | ProductUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutOperatorInput | ProductUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<GameCreateWithoutOperatorInput, GameUncheckedCreateWithoutOperatorInput> | GameCreateWithoutOperatorInput[] | GameUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: GameCreateOrConnectWithoutOperatorInput | GameCreateOrConnectWithoutOperatorInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutOperatorInput | GameUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: GameCreateManyOperatorInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutOperatorInput | GameUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: GameUpdateManyWithWhereWithoutOperatorInput | GameUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<ProfileCreateWithoutOperatorInput, ProfileUncheckedCreateWithoutOperatorInput> | ProfileCreateWithoutOperatorInput[] | ProfileUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutOperatorInput | ProfileCreateOrConnectWithoutOperatorInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutOperatorInput | ProfileUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: ProfileCreateManyOperatorInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutOperatorInput | ProfileUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutOperatorInput | ProfileUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type UserAchievementCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserAchievementUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type GameCreatetagsInput = {
    set: string[]
  }

  export type GameSessionCreateNestedManyWithoutGameInput = {
    create?: XOR<GameSessionCreateWithoutGameInput, GameSessionUncheckedCreateWithoutGameInput> | GameSessionCreateWithoutGameInput[] | GameSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutGameInput | GameSessionCreateOrConnectWithoutGameInput[]
    createMany?: GameSessionCreateManyGameInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type GameLaunchLinkCreateNestedManyWithoutGameInput = {
    create?: XOR<GameLaunchLinkCreateWithoutGameInput, GameLaunchLinkUncheckedCreateWithoutGameInput> | GameLaunchLinkCreateWithoutGameInput[] | GameLaunchLinkUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutGameInput | GameLaunchLinkCreateOrConnectWithoutGameInput[]
    createMany?: GameLaunchLinkCreateManyGameInputEnvelope
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
  }

  export type OperatorAccessCreateNestedOneWithoutGamesInput = {
    create?: XOR<OperatorAccessCreateWithoutGamesInput, OperatorAccessUncheckedCreateWithoutGamesInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutGamesInput
    connect?: OperatorAccessWhereUniqueInput
  }

  export type GameSessionUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameSessionCreateWithoutGameInput, GameSessionUncheckedCreateWithoutGameInput> | GameSessionCreateWithoutGameInput[] | GameSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutGameInput | GameSessionCreateOrConnectWithoutGameInput[]
    createMany?: GameSessionCreateManyGameInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameLaunchLinkCreateWithoutGameInput, GameLaunchLinkUncheckedCreateWithoutGameInput> | GameLaunchLinkCreateWithoutGameInput[] | GameLaunchLinkUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutGameInput | GameLaunchLinkCreateOrConnectWithoutGameInput[]
    createMany?: GameLaunchLinkCreateManyGameInputEnvelope
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
  }

  export type EnumGameProviderFieldUpdateOperationsInput = {
    set?: $Enums.GameProvider
  }

  export type EnumGameCategoryFieldUpdateOperationsInput = {
    set?: $Enums.GameCategory
  }

  export type GameUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GameSessionUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameSessionCreateWithoutGameInput, GameSessionUncheckedCreateWithoutGameInput> | GameSessionCreateWithoutGameInput[] | GameSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutGameInput | GameSessionCreateOrConnectWithoutGameInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutGameInput | GameSessionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameSessionCreateManyGameInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutGameInput | GameSessionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutGameInput | GameSessionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type GameLaunchLinkUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameLaunchLinkCreateWithoutGameInput, GameLaunchLinkUncheckedCreateWithoutGameInput> | GameLaunchLinkCreateWithoutGameInput[] | GameLaunchLinkUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutGameInput | GameLaunchLinkCreateOrConnectWithoutGameInput[]
    upsert?: GameLaunchLinkUpsertWithWhereUniqueWithoutGameInput | GameLaunchLinkUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameLaunchLinkCreateManyGameInputEnvelope
    set?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    disconnect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    delete?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    update?: GameLaunchLinkUpdateWithWhereUniqueWithoutGameInput | GameLaunchLinkUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameLaunchLinkUpdateManyWithWhereWithoutGameInput | GameLaunchLinkUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
  }

  export type OperatorAccessUpdateOneWithoutGamesNestedInput = {
    create?: XOR<OperatorAccessCreateWithoutGamesInput, OperatorAccessUncheckedCreateWithoutGamesInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutGamesInput
    upsert?: OperatorAccessUpsertWithoutGamesInput
    disconnect?: OperatorAccessWhereInput | boolean
    delete?: OperatorAccessWhereInput | boolean
    connect?: OperatorAccessWhereUniqueInput
    update?: XOR<XOR<OperatorAccessUpdateToOneWithWhereWithoutGamesInput, OperatorAccessUpdateWithoutGamesInput>, OperatorAccessUncheckedUpdateWithoutGamesInput>
  }

  export type GameSessionUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameSessionCreateWithoutGameInput, GameSessionUncheckedCreateWithoutGameInput> | GameSessionCreateWithoutGameInput[] | GameSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutGameInput | GameSessionCreateOrConnectWithoutGameInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutGameInput | GameSessionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameSessionCreateManyGameInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutGameInput | GameSessionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutGameInput | GameSessionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameLaunchLinkCreateWithoutGameInput, GameLaunchLinkUncheckedCreateWithoutGameInput> | GameLaunchLinkCreateWithoutGameInput[] | GameLaunchLinkUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameLaunchLinkCreateOrConnectWithoutGameInput | GameLaunchLinkCreateOrConnectWithoutGameInput[]
    upsert?: GameLaunchLinkUpsertWithWhereUniqueWithoutGameInput | GameLaunchLinkUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameLaunchLinkCreateManyGameInputEnvelope
    set?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    disconnect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    delete?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    connect?: GameLaunchLinkWhereUniqueInput | GameLaunchLinkWhereUniqueInput[]
    update?: GameLaunchLinkUpdateWithWhereUniqueWithoutGameInput | GameLaunchLinkUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameLaunchLinkUpdateManyWithWhereWithoutGameInput | GameLaunchLinkUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
  }

  export type PostCreatetagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type PostUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    upsert?: PostUpsertWithoutCommentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutCommentsInput, PostUpdateWithoutCommentsInput>, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type GameSessionCreateNestedOneWithoutSpinsInput = {
    create?: XOR<GameSessionCreateWithoutSpinsInput, GameSessionUncheckedCreateWithoutSpinsInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutSpinsInput
    connect?: GameSessionWhereUniqueInput
  }

  export type GameSessionUpdateOneRequiredWithoutSpinsNestedInput = {
    create?: XOR<GameSessionCreateWithoutSpinsInput, GameSessionUncheckedCreateWithoutSpinsInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutSpinsInput
    upsert?: GameSessionUpsertWithoutSpinsInput
    connect?: GameSessionWhereUniqueInput
    update?: XOR<XOR<GameSessionUpdateToOneWithWhereWithoutSpinsInput, GameSessionUpdateWithoutSpinsInput>, GameSessionUncheckedUpdateWithoutSpinsInput>
  }

  export type GameSpinCreateNestedManyWithoutGameSessionInput = {
    create?: XOR<GameSpinCreateWithoutGameSessionInput, GameSpinUncheckedCreateWithoutGameSessionInput> | GameSpinCreateWithoutGameSessionInput[] | GameSpinUncheckedCreateWithoutGameSessionInput[]
    connectOrCreate?: GameSpinCreateOrConnectWithoutGameSessionInput | GameSpinCreateOrConnectWithoutGameSessionInput[]
    createMany?: GameSpinCreateManyGameSessionInputEnvelope
    connect?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutGameSessionsInput = {
    create?: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutGameSessionsInput = {
    create?: XOR<GameCreateWithoutGameSessionsInput, GameUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameSessionsInput
    connect?: GameWhereUniqueInput
  }

  export type ProfileCreateNestedManyWithoutCurrentGameSessionInput = {
    create?: XOR<ProfileCreateWithoutCurrentGameSessionInput, ProfileUncheckedCreateWithoutCurrentGameSessionInput> | ProfileCreateWithoutCurrentGameSessionInput[] | ProfileUncheckedCreateWithoutCurrentGameSessionInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCurrentGameSessionInput | ProfileCreateOrConnectWithoutCurrentGameSessionInput[]
    createMany?: ProfileCreateManyCurrentGameSessionInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type GameSpinUncheckedCreateNestedManyWithoutGameSessionInput = {
    create?: XOR<GameSpinCreateWithoutGameSessionInput, GameSpinUncheckedCreateWithoutGameSessionInput> | GameSpinCreateWithoutGameSessionInput[] | GameSpinUncheckedCreateWithoutGameSessionInput[]
    connectOrCreate?: GameSpinCreateOrConnectWithoutGameSessionInput | GameSpinCreateOrConnectWithoutGameSessionInput[]
    createMany?: GameSpinCreateManyGameSessionInputEnvelope
    connect?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput = {
    create?: XOR<ProfileCreateWithoutCurrentGameSessionInput, ProfileUncheckedCreateWithoutCurrentGameSessionInput> | ProfileCreateWithoutCurrentGameSessionInput[] | ProfileUncheckedCreateWithoutCurrentGameSessionInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCurrentGameSessionInput | ProfileCreateOrConnectWithoutCurrentGameSessionInput[]
    createMany?: ProfileCreateManyCurrentGameSessionInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type GameSpinUpdateManyWithoutGameSessionNestedInput = {
    create?: XOR<GameSpinCreateWithoutGameSessionInput, GameSpinUncheckedCreateWithoutGameSessionInput> | GameSpinCreateWithoutGameSessionInput[] | GameSpinUncheckedCreateWithoutGameSessionInput[]
    connectOrCreate?: GameSpinCreateOrConnectWithoutGameSessionInput | GameSpinCreateOrConnectWithoutGameSessionInput[]
    upsert?: GameSpinUpsertWithWhereUniqueWithoutGameSessionInput | GameSpinUpsertWithWhereUniqueWithoutGameSessionInput[]
    createMany?: GameSpinCreateManyGameSessionInputEnvelope
    set?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    disconnect?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    delete?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    connect?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    update?: GameSpinUpdateWithWhereUniqueWithoutGameSessionInput | GameSpinUpdateWithWhereUniqueWithoutGameSessionInput[]
    updateMany?: GameSpinUpdateManyWithWhereWithoutGameSessionInput | GameSpinUpdateManyWithWhereWithoutGameSessionInput[]
    deleteMany?: GameSpinScalarWhereInput | GameSpinScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutGameSessionsNestedInput = {
    create?: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameSessionsInput
    upsert?: UserUpsertWithoutGameSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGameSessionsInput, UserUpdateWithoutGameSessionsInput>, UserUncheckedUpdateWithoutGameSessionsInput>
  }

  export type GameUpdateOneRequiredWithoutGameSessionsNestedInput = {
    create?: XOR<GameCreateWithoutGameSessionsInput, GameUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameSessionsInput
    upsert?: GameUpsertWithoutGameSessionsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameSessionsInput, GameUpdateWithoutGameSessionsInput>, GameUncheckedUpdateWithoutGameSessionsInput>
  }

  export type ProfileUpdateManyWithoutCurrentGameSessionNestedInput = {
    create?: XOR<ProfileCreateWithoutCurrentGameSessionInput, ProfileUncheckedCreateWithoutCurrentGameSessionInput> | ProfileCreateWithoutCurrentGameSessionInput[] | ProfileUncheckedCreateWithoutCurrentGameSessionInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCurrentGameSessionInput | ProfileCreateOrConnectWithoutCurrentGameSessionInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCurrentGameSessionInput | ProfileUpsertWithWhereUniqueWithoutCurrentGameSessionInput[]
    createMany?: ProfileCreateManyCurrentGameSessionInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCurrentGameSessionInput | ProfileUpdateWithWhereUniqueWithoutCurrentGameSessionInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCurrentGameSessionInput | ProfileUpdateManyWithWhereWithoutCurrentGameSessionInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput = {
    create?: XOR<GameSpinCreateWithoutGameSessionInput, GameSpinUncheckedCreateWithoutGameSessionInput> | GameSpinCreateWithoutGameSessionInput[] | GameSpinUncheckedCreateWithoutGameSessionInput[]
    connectOrCreate?: GameSpinCreateOrConnectWithoutGameSessionInput | GameSpinCreateOrConnectWithoutGameSessionInput[]
    upsert?: GameSpinUpsertWithWhereUniqueWithoutGameSessionInput | GameSpinUpsertWithWhereUniqueWithoutGameSessionInput[]
    createMany?: GameSpinCreateManyGameSessionInputEnvelope
    set?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    disconnect?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    delete?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    connect?: GameSpinWhereUniqueInput | GameSpinWhereUniqueInput[]
    update?: GameSpinUpdateWithWhereUniqueWithoutGameSessionInput | GameSpinUpdateWithWhereUniqueWithoutGameSessionInput[]
    updateMany?: GameSpinUpdateManyWithWhereWithoutGameSessionInput | GameSpinUpdateManyWithWhereWithoutGameSessionInput[]
    deleteMany?: GameSpinScalarWhereInput | GameSpinScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput = {
    create?: XOR<ProfileCreateWithoutCurrentGameSessionInput, ProfileUncheckedCreateWithoutCurrentGameSessionInput> | ProfileCreateWithoutCurrentGameSessionInput[] | ProfileUncheckedCreateWithoutCurrentGameSessionInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCurrentGameSessionInput | ProfileCreateOrConnectWithoutCurrentGameSessionInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCurrentGameSessionInput | ProfileUpsertWithWhereUniqueWithoutCurrentGameSessionInput[]
    createMany?: ProfileCreateManyCurrentGameSessionInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCurrentGameSessionInput | ProfileUpdateWithWhereUniqueWithoutCurrentGameSessionInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCurrentGameSessionInput | ProfileUpdateManyWithWhereWithoutCurrentGameSessionInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserAchievementsInput = {
    create?: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAchievementsInput
    connect?: UserWhereUniqueInput
  }

  export type AchievementCreateNestedOneWithoutUserAchievementsInput = {
    create?: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUserAchievementsInput
    connect?: AchievementWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserAchievementsNestedInput = {
    create?: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAchievementsInput
    upsert?: UserUpsertWithoutUserAchievementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserAchievementsInput, UserUpdateWithoutUserAchievementsInput>, UserUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput = {
    create?: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUserAchievementsInput
    upsert?: AchievementUpsertWithoutUserAchievementsInput
    connect?: AchievementWhereUniqueInput
    update?: XOR<XOR<AchievementUpdateToOneWithWhereWithoutUserAchievementsInput, AchievementUpdateWithoutUserAchievementsInput>, AchievementUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type UserCreateNestedOneWithoutXpEventsInput = {
    create?: XOR<UserCreateWithoutXpEventsInput, UserUncheckedCreateWithoutXpEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXpEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutXpEventsNestedInput = {
    create?: XOR<UserCreateWithoutXpEventsInput, UserUncheckedCreateWithoutXpEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXpEventsInput
    upsert?: UserUpsertWithoutXpEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutXpEventsInput, UserUpdateWithoutXpEventsInput>, UserUncheckedUpdateWithoutXpEventsInput>
  }

  export type UserCreateNestedOneWithoutSentNotificationsInput = {
    create?: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedNotificationsInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutSentNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNotificationsInput
    upsert?: UserUpsertWithoutSentNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentNotificationsInput, UserUpdateWithoutSentNotificationsInput>, UserUncheckedUpdateWithoutSentNotificationsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationsInput
    upsert?: UserUpsertWithoutReceivedNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedNotificationsInput, UserUpdateWithoutReceivedNotificationsInput>, UserUncheckedUpdateWithoutReceivedNotificationsInput>
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserCreateNestedOneWithoutFriendshipsSentInput = {
    create?: XOR<UserCreateWithoutFriendshipsSentInput, UserUncheckedCreateWithoutFriendshipsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendshipsSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFriendshipsReceivedInput = {
    create?: XOR<UserCreateWithoutFriendshipsReceivedInput, UserUncheckedCreateWithoutFriendshipsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendshipsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type EnumFriendshipStatusFieldUpdateOperationsInput = {
    set?: $Enums.FriendshipStatus
  }

  export type UserUpdateOneRequiredWithoutFriendshipsSentNestedInput = {
    create?: XOR<UserCreateWithoutFriendshipsSentInput, UserUncheckedCreateWithoutFriendshipsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendshipsSentInput
    upsert?: UserUpsertWithoutFriendshipsSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFriendshipsSentInput, UserUpdateWithoutFriendshipsSentInput>, UserUncheckedUpdateWithoutFriendshipsSentInput>
  }

  export type UserUpdateOneRequiredWithoutFriendshipsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutFriendshipsReceivedInput, UserUncheckedCreateWithoutFriendshipsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendshipsReceivedInput
    upsert?: UserUpsertWithoutFriendshipsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFriendshipsReceivedInput, UserUpdateWithoutFriendshipsReceivedInput>, UserUncheckedUpdateWithoutFriendshipsReceivedInput>
  }

  export type UserCreateNestedOneWithoutOriginatedTransactionsInput = {
    create?: XOR<UserCreateWithoutOriginatedTransactionsInput, UserUncheckedCreateWithoutOriginatedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOriginatedTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedTransactionsInput = {
    create?: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type WalletCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutTransactionsInput
    connect?: WalletWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ProductCreateWithoutTransactionsInput, ProductUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTransactionsInput
    connect?: ProductWhereUniqueInput
  }

  export type CurrencyCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CurrencyCreateWithoutTransactionsInput, CurrencyUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutTransactionsInput
    connect?: CurrencyWhereUniqueInput
  }

  export type RebateTransactionCreateNestedOneWithoutOriginalTransactionInput = {
    create?: XOR<RebateTransactionCreateWithoutOriginalTransactionInput, RebateTransactionUncheckedCreateWithoutOriginalTransactionInput>
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutOriginalTransactionInput
    connect?: RebateTransactionWhereUniqueInput
  }

  export type ProductCreateNestedManyWithoutTransactionInput = {
    create?: XOR<ProductCreateWithoutTransactionInput, ProductUncheckedCreateWithoutTransactionInput> | ProductCreateWithoutTransactionInput[] | ProductUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutTransactionInput | ProductCreateOrConnectWithoutTransactionInput[]
    createMany?: ProductCreateManyTransactionInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput = {
    create?: XOR<RebateTransactionCreateWithoutOriginalTransactionInput, RebateTransactionUncheckedCreateWithoutOriginalTransactionInput>
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutOriginalTransactionInput
    connect?: RebateTransactionWhereUniqueInput
  }

  export type ProductUncheckedCreateNestedManyWithoutTransactionInput = {
    create?: XOR<ProductCreateWithoutTransactionInput, ProductUncheckedCreateWithoutTransactionInput> | ProductCreateWithoutTransactionInput[] | ProductUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutTransactionInput | ProductCreateOrConnectWithoutTransactionInput[]
    createMany?: ProductCreateManyTransactionInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type EnumTransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransactionStatus
  }

  export type UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutOriginatedTransactionsInput, UserUncheckedCreateWithoutOriginatedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOriginatedTransactionsInput
    upsert?: UserUpsertWithoutOriginatedTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOriginatedTransactionsInput, UserUpdateWithoutOriginatedTransactionsInput>, UserUncheckedUpdateWithoutOriginatedTransactionsInput>
  }

  export type UserUpdateOneWithoutReceivedTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransactionsInput
    upsert?: UserUpsertWithoutReceivedTransactionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedTransactionsInput, UserUpdateWithoutReceivedTransactionsInput>, UserUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type WalletUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutTransactionsInput
    upsert?: WalletUpsertWithoutTransactionsInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutTransactionsInput, WalletUpdateWithoutTransactionsInput>, WalletUncheckedUpdateWithoutTransactionsInput>
  }

  export type ProductUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<ProductCreateWithoutTransactionsInput, ProductUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTransactionsInput
    upsert?: ProductUpsertWithoutTransactionsInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutTransactionsInput, ProductUpdateWithoutTransactionsInput>, ProductUncheckedUpdateWithoutTransactionsInput>
  }

  export type CurrencyUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<CurrencyCreateWithoutTransactionsInput, CurrencyUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutTransactionsInput
    upsert?: CurrencyUpsertWithoutTransactionsInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutTransactionsInput, CurrencyUpdateWithoutTransactionsInput>, CurrencyUncheckedUpdateWithoutTransactionsInput>
  }

  export type RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput = {
    create?: XOR<RebateTransactionCreateWithoutOriginalTransactionInput, RebateTransactionUncheckedCreateWithoutOriginalTransactionInput>
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutOriginalTransactionInput
    upsert?: RebateTransactionUpsertWithoutOriginalTransactionInput
    disconnect?: RebateTransactionWhereInput | boolean
    delete?: RebateTransactionWhereInput | boolean
    connect?: RebateTransactionWhereUniqueInput
    update?: XOR<XOR<RebateTransactionUpdateToOneWithWhereWithoutOriginalTransactionInput, RebateTransactionUpdateWithoutOriginalTransactionInput>, RebateTransactionUncheckedUpdateWithoutOriginalTransactionInput>
  }

  export type ProductUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<ProductCreateWithoutTransactionInput, ProductUncheckedCreateWithoutTransactionInput> | ProductCreateWithoutTransactionInput[] | ProductUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutTransactionInput | ProductCreateOrConnectWithoutTransactionInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutTransactionInput | ProductUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: ProductCreateManyTransactionInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutTransactionInput | ProductUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutTransactionInput | ProductUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput = {
    create?: XOR<RebateTransactionCreateWithoutOriginalTransactionInput, RebateTransactionUncheckedCreateWithoutOriginalTransactionInput>
    connectOrCreate?: RebateTransactionCreateOrConnectWithoutOriginalTransactionInput
    upsert?: RebateTransactionUpsertWithoutOriginalTransactionInput
    disconnect?: RebateTransactionWhereInput | boolean
    delete?: RebateTransactionWhereInput | boolean
    connect?: RebateTransactionWhereUniqueInput
    update?: XOR<XOR<RebateTransactionUpdateToOneWithWhereWithoutOriginalTransactionInput, RebateTransactionUpdateWithoutOriginalTransactionInput>, RebateTransactionUncheckedUpdateWithoutOriginalTransactionInput>
  }

  export type ProductUncheckedUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<ProductCreateWithoutTransactionInput, ProductUncheckedCreateWithoutTransactionInput> | ProductCreateWithoutTransactionInput[] | ProductUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutTransactionInput | ProductCreateOrConnectWithoutTransactionInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutTransactionInput | ProductUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: ProductCreateManyTransactionInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutTransactionInput | ProductUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutTransactionInput | ProductUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutGameLaunchLinksInput = {
    create?: XOR<UserCreateWithoutGameLaunchLinksInput, UserUncheckedCreateWithoutGameLaunchLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameLaunchLinksInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutGameLaunchLinksInput = {
    create?: XOR<GameCreateWithoutGameLaunchLinksInput, GameUncheckedCreateWithoutGameLaunchLinksInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameLaunchLinksInput
    connect?: GameWhereUniqueInput
  }

  export type OperatorAccessCreateNestedOneWithoutGameLaunchLinksInput = {
    create?: XOR<OperatorAccessCreateWithoutGameLaunchLinksInput, OperatorAccessUncheckedCreateWithoutGameLaunchLinksInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutGameLaunchLinksInput
    connect?: OperatorAccessWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGameLaunchLinksNestedInput = {
    create?: XOR<UserCreateWithoutGameLaunchLinksInput, UserUncheckedCreateWithoutGameLaunchLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameLaunchLinksInput
    upsert?: UserUpsertWithoutGameLaunchLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGameLaunchLinksInput, UserUpdateWithoutGameLaunchLinksInput>, UserUncheckedUpdateWithoutGameLaunchLinksInput>
  }

  export type GameUpdateOneRequiredWithoutGameLaunchLinksNestedInput = {
    create?: XOR<GameCreateWithoutGameLaunchLinksInput, GameUncheckedCreateWithoutGameLaunchLinksInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameLaunchLinksInput
    upsert?: GameUpsertWithoutGameLaunchLinksInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameLaunchLinksInput, GameUpdateWithoutGameLaunchLinksInput>, GameUncheckedUpdateWithoutGameLaunchLinksInput>
  }

  export type OperatorAccessUpdateOneRequiredWithoutGameLaunchLinksNestedInput = {
    create?: XOR<OperatorAccessCreateWithoutGameLaunchLinksInput, OperatorAccessUncheckedCreateWithoutGameLaunchLinksInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutGameLaunchLinksInput
    upsert?: OperatorAccessUpsertWithoutGameLaunchLinksInput
    connect?: OperatorAccessWhereUniqueInput
    update?: XOR<XOR<OperatorAccessUpdateToOneWithWhereWithoutGameLaunchLinksInput, OperatorAccessUpdateWithoutGameLaunchLinksInput>, OperatorAccessUncheckedUpdateWithoutGameLaunchLinksInput>
  }

  export type CurrencyCreateNestedOneWithoutProductsInput = {
    create?: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutProductsInput
    connect?: CurrencyWhereUniqueInput
  }

  export type OperatorAccessCreateNestedOneWithoutProductsInput = {
    create?: XOR<OperatorAccessCreateWithoutProductsInput, OperatorAccessUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutProductsInput
    connect?: OperatorAccessWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutProductInput = {
    create?: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput> | TransactionCreateWithoutProductInput[] | TransactionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProductInput | TransactionCreateOrConnectWithoutProductInput[]
    createMany?: TransactionCreateManyProductInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedOneWithoutProductInput = {
    create?: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutProductInput
    connect?: TransactionWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput> | TransactionCreateWithoutProductInput[] | TransactionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProductInput | TransactionCreateOrConnectWithoutProductInput[]
    createMany?: TransactionCreateManyProductInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CurrencyUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutProductsInput
    upsert?: CurrencyUpsertWithoutProductsInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutProductsInput, CurrencyUpdateWithoutProductsInput>, CurrencyUncheckedUpdateWithoutProductsInput>
  }

  export type OperatorAccessUpdateOneWithoutProductsNestedInput = {
    create?: XOR<OperatorAccessCreateWithoutProductsInput, OperatorAccessUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutProductsInput
    upsert?: OperatorAccessUpsertWithoutProductsInput
    disconnect?: OperatorAccessWhereInput | boolean
    delete?: OperatorAccessWhereInput | boolean
    connect?: OperatorAccessWhereUniqueInput
    update?: XOR<XOR<OperatorAccessUpdateToOneWithWhereWithoutProductsInput, OperatorAccessUpdateWithoutProductsInput>, OperatorAccessUncheckedUpdateWithoutProductsInput>
  }

  export type TransactionUpdateManyWithoutProductNestedInput = {
    create?: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput> | TransactionCreateWithoutProductInput[] | TransactionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProductInput | TransactionCreateOrConnectWithoutProductInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutProductInput | TransactionUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: TransactionCreateManyProductInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutProductInput | TransactionUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutProductInput | TransactionUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateOneWithoutProductNestedInput = {
    create?: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutProductInput
    upsert?: TransactionUpsertWithoutProductInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutProductInput, TransactionUpdateWithoutProductInput>, TransactionUncheckedUpdateWithoutProductInput>
  }

  export type TransactionUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput> | TransactionCreateWithoutProductInput[] | TransactionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProductInput | TransactionCreateOrConnectWithoutProductInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutProductInput | TransactionUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: TransactionCreateManyProductInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutProductInput | TransactionUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutProductInput | TransactionUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEventLogsAsActorInput = {
    create?: XOR<UserCreateWithoutEventLogsAsActorInput, UserUncheckedCreateWithoutEventLogsAsActorInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventLogsAsActorInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutEventLogsAsActorNestedInput = {
    create?: XOR<UserCreateWithoutEventLogsAsActorInput, UserUncheckedCreateWithoutEventLogsAsActorInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventLogsAsActorInput
    upsert?: UserUpsertWithoutEventLogsAsActorInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventLogsAsActorInput, UserUpdateWithoutEventLogsAsActorInput>, UserUncheckedUpdateWithoutEventLogsAsActorInput>
  }

  export type OperatorAccessCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<OperatorAccessCreateWithoutInvitationsInput, OperatorAccessUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutInvitationsInput
    connect?: OperatorAccessWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvitationsSentInput = {
    create?: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutInvitationsReceivedInput = {
    create?: XOR<UserCreateWithoutInvitationsReceivedInput, UserUncheckedCreateWithoutInvitationsReceivedInput> | UserCreateWithoutInvitationsReceivedInput[] | UserUncheckedCreateWithoutInvitationsReceivedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsReceivedInput | UserCreateOrConnectWithoutInvitationsReceivedInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutInvitationsReceivedInput = {
    create?: XOR<UserCreateWithoutInvitationsReceivedInput, UserUncheckedCreateWithoutInvitationsReceivedInput> | UserCreateWithoutInvitationsReceivedInput[] | UserUncheckedCreateWithoutInvitationsReceivedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsReceivedInput | UserCreateOrConnectWithoutInvitationsReceivedInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OperatorAccessUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<OperatorAccessCreateWithoutInvitationsInput, OperatorAccessUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OperatorAccessCreateOrConnectWithoutInvitationsInput
    upsert?: OperatorAccessUpsertWithoutInvitationsInput
    connect?: OperatorAccessWhereUniqueInput
    update?: XOR<XOR<OperatorAccessUpdateToOneWithWhereWithoutInvitationsInput, OperatorAccessUpdateWithoutInvitationsInput>, OperatorAccessUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateOneRequiredWithoutInvitationsSentNestedInput = {
    create?: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsSentInput
    upsert?: UserUpsertWithoutInvitationsSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitationsSentInput, UserUpdateWithoutInvitationsSentInput>, UserUncheckedUpdateWithoutInvitationsSentInput>
  }

  export type UserUpdateManyWithoutInvitationsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutInvitationsReceivedInput, UserUncheckedCreateWithoutInvitationsReceivedInput> | UserCreateWithoutInvitationsReceivedInput[] | UserUncheckedCreateWithoutInvitationsReceivedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsReceivedInput | UserCreateOrConnectWithoutInvitationsReceivedInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInvitationsReceivedInput | UserUpsertWithWhereUniqueWithoutInvitationsReceivedInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInvitationsReceivedInput | UserUpdateWithWhereUniqueWithoutInvitationsReceivedInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInvitationsReceivedInput | UserUpdateManyWithWhereWithoutInvitationsReceivedInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutInvitationsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutInvitationsReceivedInput, UserUncheckedCreateWithoutInvitationsReceivedInput> | UserCreateWithoutInvitationsReceivedInput[] | UserUncheckedCreateWithoutInvitationsReceivedInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsReceivedInput | UserCreateOrConnectWithoutInvitationsReceivedInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInvitationsReceivedInput | UserUpsertWithWhereUniqueWithoutInvitationsReceivedInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInvitationsReceivedInput | UserUpdateWithWhereUniqueWithoutInvitationsReceivedInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInvitationsReceivedInput | UserUpdateManyWithWhereWithoutInvitationsReceivedInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutVipInfoInput = {
    create?: XOR<UserCreateWithoutVipInfoInput, UserUncheckedCreateWithoutVipInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutVipInfoInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVipInfoNestedInput = {
    create?: XOR<UserCreateWithoutVipInfoInput, UserUncheckedCreateWithoutVipInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutVipInfoInput
    upsert?: UserUpsertWithoutVipInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVipInfoInput, UserUpdateWithoutVipInfoInput>, UserUncheckedUpdateWithoutVipInfoInput>
  }

  export type UserCreateNestedOneWithoutUserRewardsInput = {
    create?: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRewardsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRewardTypeFieldUpdateOperationsInput = {
    set?: $Enums.RewardType
  }

  export type EnumRewardStatusFieldUpdateOperationsInput = {
    set?: $Enums.RewardStatus
  }

  export type UserUpdateOneRequiredWithoutUserRewardsNestedInput = {
    create?: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRewardsInput
    upsert?: UserUpsertWithoutUserRewardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRewardsInput, UserUpdateWithoutUserRewardsInput>, UserUncheckedUpdateWithoutUserRewardsInput>
  }

  export type UserVipTaskProgressCreateNestedManyWithoutTaskInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutTaskInput, UserVipTaskProgressUncheckedCreateWithoutTaskInput> | UserVipTaskProgressCreateWithoutTaskInput[] | UserVipTaskProgressUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutTaskInput | UserVipTaskProgressCreateOrConnectWithoutTaskInput[]
    createMany?: UserVipTaskProgressCreateManyTaskInputEnvelope
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
  }

  export type UserVipTaskProgressUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutTaskInput, UserVipTaskProgressUncheckedCreateWithoutTaskInput> | UserVipTaskProgressCreateWithoutTaskInput[] | UserVipTaskProgressUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutTaskInput | UserVipTaskProgressCreateOrConnectWithoutTaskInput[]
    createMany?: UserVipTaskProgressCreateManyTaskInputEnvelope
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
  }

  export type EnumVipTaskTypeFieldUpdateOperationsInput = {
    set?: $Enums.VipTaskType
  }

  export type UserVipTaskProgressUpdateManyWithoutTaskNestedInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutTaskInput, UserVipTaskProgressUncheckedCreateWithoutTaskInput> | UserVipTaskProgressCreateWithoutTaskInput[] | UserVipTaskProgressUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutTaskInput | UserVipTaskProgressCreateOrConnectWithoutTaskInput[]
    upsert?: UserVipTaskProgressUpsertWithWhereUniqueWithoutTaskInput | UserVipTaskProgressUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: UserVipTaskProgressCreateManyTaskInputEnvelope
    set?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    disconnect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    delete?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    update?: UserVipTaskProgressUpdateWithWhereUniqueWithoutTaskInput | UserVipTaskProgressUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: UserVipTaskProgressUpdateManyWithWhereWithoutTaskInput | UserVipTaskProgressUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: UserVipTaskProgressScalarWhereInput | UserVipTaskProgressScalarWhereInput[]
  }

  export type UserVipTaskProgressUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<UserVipTaskProgressCreateWithoutTaskInput, UserVipTaskProgressUncheckedCreateWithoutTaskInput> | UserVipTaskProgressCreateWithoutTaskInput[] | UserVipTaskProgressUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: UserVipTaskProgressCreateOrConnectWithoutTaskInput | UserVipTaskProgressCreateOrConnectWithoutTaskInput[]
    upsert?: UserVipTaskProgressUpsertWithWhereUniqueWithoutTaskInput | UserVipTaskProgressUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: UserVipTaskProgressCreateManyTaskInputEnvelope
    set?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    disconnect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    delete?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    connect?: UserVipTaskProgressWhereUniqueInput | UserVipTaskProgressWhereUniqueInput[]
    update?: UserVipTaskProgressUpdateWithWhereUniqueWithoutTaskInput | UserVipTaskProgressUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: UserVipTaskProgressUpdateManyWithWhereWithoutTaskInput | UserVipTaskProgressUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: UserVipTaskProgressScalarWhereInput | UserVipTaskProgressScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserVipTaskProgressInput = {
    create?: XOR<UserCreateWithoutUserVipTaskProgressInput, UserUncheckedCreateWithoutUserVipTaskProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserVipTaskProgressInput
    connect?: UserWhereUniqueInput
  }

  export type VipTaskCreateNestedOneWithoutUserTaskProgressInput = {
    create?: XOR<VipTaskCreateWithoutUserTaskProgressInput, VipTaskUncheckedCreateWithoutUserTaskProgressInput>
    connectOrCreate?: VipTaskCreateOrConnectWithoutUserTaskProgressInput
    connect?: VipTaskWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserVipTaskProgressNestedInput = {
    create?: XOR<UserCreateWithoutUserVipTaskProgressInput, UserUncheckedCreateWithoutUserVipTaskProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserVipTaskProgressInput
    upsert?: UserUpsertWithoutUserVipTaskProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserVipTaskProgressInput, UserUpdateWithoutUserVipTaskProgressInput>, UserUncheckedUpdateWithoutUserVipTaskProgressInput>
  }

  export type VipTaskUpdateOneRequiredWithoutUserTaskProgressNestedInput = {
    create?: XOR<VipTaskCreateWithoutUserTaskProgressInput, VipTaskUncheckedCreateWithoutUserTaskProgressInput>
    connectOrCreate?: VipTaskCreateOrConnectWithoutUserTaskProgressInput
    upsert?: VipTaskUpsertWithoutUserTaskProgressInput
    connect?: VipTaskWhereUniqueInput
    update?: XOR<XOR<VipTaskUpdateToOneWithWhereWithoutUserTaskProgressInput, VipTaskUpdateWithoutUserTaskProgressInput>, VipTaskUncheckedUpdateWithoutUserTaskProgressInput>
  }

  export type UserCreateNestedOneWithoutRebateTransactionInput = {
    create?: XOR<UserCreateWithoutRebateTransactionInput, UserUncheckedCreateWithoutRebateTransactionInput>
    connectOrCreate?: UserCreateOrConnectWithoutRebateTransactionInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutRebateGeneratedInput = {
    create?: XOR<TransactionCreateWithoutRebateGeneratedInput, TransactionUncheckedCreateWithoutRebateGeneratedInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutRebateGeneratedInput
    connect?: TransactionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRebateTransactionNestedInput = {
    create?: XOR<UserCreateWithoutRebateTransactionInput, UserUncheckedCreateWithoutRebateTransactionInput>
    connectOrCreate?: UserCreateOrConnectWithoutRebateTransactionInput
    upsert?: UserUpsertWithoutRebateTransactionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRebateTransactionInput, UserUpdateWithoutRebateTransactionInput>, UserUncheckedUpdateWithoutRebateTransactionInput>
  }

  export type TransactionUpdateOneRequiredWithoutRebateGeneratedNestedInput = {
    create?: XOR<TransactionCreateWithoutRebateGeneratedInput, TransactionUncheckedCreateWithoutRebateGeneratedInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutRebateGeneratedInput
    upsert?: TransactionUpsertWithoutRebateGeneratedInput
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutRebateGeneratedInput, TransactionUpdateWithoutRebateGeneratedInput>, TransactionUncheckedUpdateWithoutRebateGeneratedInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
  }

  export type NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumGameProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.GameProvider | EnumGameProviderFieldRefInput<$PrismaModel>
    in?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumGameProviderFilter<$PrismaModel> | $Enums.GameProvider
  }

  export type NestedEnumGameCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.GameCategory | EnumGameCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGameCategoryFilter<$PrismaModel> | $Enums.GameCategory
  }

  export type NestedEnumGameProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameProvider | EnumGameProviderFieldRefInput<$PrismaModel>
    in?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameProvider[] | ListEnumGameProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumGameProviderWithAggregatesFilter<$PrismaModel> | $Enums.GameProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameProviderFilter<$PrismaModel>
    _max?: NestedEnumGameProviderFilter<$PrismaModel>
  }

  export type NestedEnumGameCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameCategory | EnumGameCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameCategory[] | ListEnumGameCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumGameCategoryWithAggregatesFilter<$PrismaModel> | $Enums.GameCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameCategoryFilter<$PrismaModel>
    _max?: NestedEnumGameCategoryFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumFriendshipStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FriendshipStatus | EnumFriendshipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFriendshipStatusFilter<$PrismaModel> | $Enums.FriendshipStatus
  }

  export type NestedEnumFriendshipStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FriendshipStatus | EnumFriendshipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FriendshipStatus[] | ListEnumFriendshipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFriendshipStatusWithAggregatesFilter<$PrismaModel> | $Enums.FriendshipStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFriendshipStatusFilter<$PrismaModel>
    _max?: NestedEnumFriendshipStatusFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type NestedEnumRewardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeFilter<$PrismaModel> | $Enums.RewardType
  }

  export type NestedEnumRewardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusFilter<$PrismaModel> | $Enums.RewardStatus
  }

  export type NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardTypeFilter<$PrismaModel>
  }

  export type NestedEnumRewardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusWithAggregatesFilter<$PrismaModel> | $Enums.RewardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardStatusFilter<$PrismaModel>
    _max?: NestedEnumRewardStatusFilter<$PrismaModel>
  }

  export type NestedEnumVipTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VipTaskType | EnumVipTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVipTaskTypeFilter<$PrismaModel> | $Enums.VipTaskType
  }

  export type NestedEnumVipTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VipTaskType | EnumVipTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VipTaskType[] | ListEnumVipTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVipTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.VipTaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVipTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumVipTaskTypeFilter<$PrismaModel>
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.Role | null
    currentGameSession?: GameSessionCreateNestedOneWithoutProfileInput
    otherUser?: UserCreateNestedOneWithoutOtherProfilesInput
    operator?: OperatorAccessCreateNestedOneWithoutProfilesInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGameSessionid?: string | null
    otherUserid?: string | null
    role?: $Enums.Role | null
    operatorAccessId?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateWithoutOtherUserInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.Role | null
    currentGameSession?: GameSessionCreateNestedOneWithoutProfileInput
    user: UserCreateNestedOneWithoutProfileInput
    operator?: OperatorAccessCreateNestedOneWithoutProfilesInput
  }

  export type ProfileUncheckedCreateWithoutOtherUserInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGameSessionid?: string | null
    userId: string
    role?: $Enums.Role | null
    operatorAccessId?: string | null
  }

  export type ProfileCreateOrConnectWithoutOtherUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutOtherUserInput, ProfileUncheckedCreateWithoutOtherUserInput>
  }

  export type ProfileCreateManyOtherUserInputEnvelope = {
    data: ProfileCreateManyOtherUserInput | ProfileCreateManyOtherUserInput[]
    skipDuplicates?: boolean
  }

  export type SettingsCreateWithoutUserInput = {
    id?: string
    theme?: string | null
    language?: string | null
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUncheckedCreateWithoutUserInput = {
    id?: string
    theme?: string | null
    language?: string | null
    emailNotifications?: boolean
    smsNotifications?: boolean
    pushNotifications?: boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsCreateOrConnectWithoutUserInput = {
    where: SettingsWhereUniqueInput
    create: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
  }

  export type WalletCreateWithoutUserInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bonusBalance?: number
    lockedBalance?: number
    currency: CurrencyCreateNestedOneWithoutWalletsInput
    transactions?: TransactionCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutUserInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currencyId: string
    bonusBalance?: number
    lockedBalance?: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutUserInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type WalletCreateManyUserInputEnvelope = {
    data: WalletCreateManyUserInput | WalletCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: PostCreateManyAuthorInput | PostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    post: PostCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type GameSessionCreateWithoutUserInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    profileId?: string | null
    spins?: GameSpinCreateNestedManyWithoutGameSessionInput
    game: GameCreateNestedOneWithoutGameSessionsInput
    Profile?: ProfileCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionUncheckedCreateWithoutUserInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    gameId: string
    profileId?: string | null
    spins?: GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
    Profile?: ProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionCreateOrConnectWithoutUserInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput>
  }

  export type GameSessionCreateManyUserInputEnvelope = {
    data: GameSessionCreateManyUserInput | GameSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type XpEventCreateWithoutUserInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type XpEventUncheckedCreateWithoutUserInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type XpEventCreateOrConnectWithoutUserInput = {
    where: XpEventWhereUniqueInput
    create: XOR<XpEventCreateWithoutUserInput, XpEventUncheckedCreateWithoutUserInput>
  }

  export type XpEventCreateManyUserInputEnvelope = {
    data: XpEventCreateManyUserInput | XpEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementCreateWithoutUserInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    achievement: AchievementCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutUserInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    achievementId: string
  }

  export type UserAchievementCreateOrConnectWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementCreateManyUserInputEnvelope = {
    data: UserAchievementCreateManyUserInput | UserAchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageCreateWithoutAuthorInput = {
    id?: string
    channel: string
    content: string
    mediaUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatMessageUncheckedCreateWithoutAuthorInput = {
    id?: string
    channel: string
    content: string
    mediaUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutAuthorInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput>
  }

  export type ChatMessageCreateManyAuthorInputEnvelope = {
    data: ChatMessageCreateManyAuthorInput | ChatMessageCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutRequesterInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver: UserCreateNestedOneWithoutFriendshipsReceivedInput
  }

  export type FriendshipUncheckedCreateWithoutRequesterInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    receiverId: string
  }

  export type FriendshipCreateOrConnectWithoutRequesterInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput>
  }

  export type FriendshipCreateManyRequesterInputEnvelope = {
    data: FriendshipCreateManyRequesterInput | FriendshipCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutReceiverInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutFriendshipsSentInput
  }

  export type FriendshipUncheckedCreateWithoutReceiverInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
  }

  export type FriendshipCreateOrConnectWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput>
  }

  export type FriendshipCreateManyReceiverInputEnvelope = {
    data: FriendshipCreateManyReceiverInput | FriendshipCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type GameLaunchLinkCreateWithoutUserInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutGameLaunchLinksInput
    operator: OperatorAccessCreateNestedOneWithoutGameLaunchLinksInput
  }

  export type GameLaunchLinkUncheckedCreateWithoutUserInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId: string
    operatorId: string
  }

  export type GameLaunchLinkCreateOrConnectWithoutUserInput = {
    where: GameLaunchLinkWhereUniqueInput
    create: XOR<GameLaunchLinkCreateWithoutUserInput, GameLaunchLinkUncheckedCreateWithoutUserInput>
  }

  export type GameLaunchLinkCreateManyUserInputEnvelope = {
    data: GameLaunchLinkCreateManyUserInput | GameLaunchLinkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventLogCreateWithoutActorInput = {
    id?: string
    action: string
    targetType?: string | null
    targetId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventLogUncheckedCreateWithoutActorInput = {
    id?: string
    action: string
    targetType?: string | null
    targetId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventLogCreateOrConnectWithoutActorInput = {
    where: EventLogWhereUniqueInput
    create: XOR<EventLogCreateWithoutActorInput, EventLogUncheckedCreateWithoutActorInput>
  }

  export type EventLogCreateManyActorInputEnvelope = {
    data: EventLogCreateManyActorInput | EventLogCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type OperatorAccessCreateWithoutOwnerInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationCreateNestedManyWithoutOperatorInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutOperatorInput
    products?: ProductCreateNestedManyWithoutOperatorInput
    games?: GameCreateNestedManyWithoutOperatorInput
    profiles?: ProfileCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUncheckedCreateNestedManyWithoutOperatorInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutOperatorInput
    products?: ProductUncheckedCreateNestedManyWithoutOperatorInput
    games?: GameUncheckedCreateNestedManyWithoutOperatorInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessCreateOrConnectWithoutOwnerInput = {
    where: OperatorAccessWhereUniqueInput
    create: XOR<OperatorAccessCreateWithoutOwnerInput, OperatorAccessUncheckedCreateWithoutOwnerInput>
  }

  export type OperatorAccessCreateManyOwnerInputEnvelope = {
    data: OperatorAccessCreateManyOwnerInput | OperatorAccessCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type OperatorInvitationCreateWithoutInvitedByInput = {
    id?: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    operator: OperatorAccessCreateNestedOneWithoutInvitationsInput
    User?: UserCreateNestedManyWithoutInvitationsReceivedInput
  }

  export type OperatorInvitationUncheckedCreateWithoutInvitedByInput = {
    id?: string
    operatorId: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    User?: UserUncheckedCreateNestedManyWithoutInvitationsReceivedInput
  }

  export type OperatorInvitationCreateOrConnectWithoutInvitedByInput = {
    where: OperatorInvitationWhereUniqueInput
    create: XOR<OperatorInvitationCreateWithoutInvitedByInput, OperatorInvitationUncheckedCreateWithoutInvitedByInput>
  }

  export type OperatorInvitationCreateManyInvitedByInputEnvelope = {
    data: OperatorInvitationCreateManyInvitedByInput | OperatorInvitationCreateManyInvitedByInput[]
    skipDuplicates?: boolean
  }

  export type OperatorInvitationCreateWithoutUserInput = {
    id?: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    operator: OperatorAccessCreateNestedOneWithoutInvitationsInput
    invitedBy: UserCreateNestedOneWithoutInvitationsSentInput
  }

  export type OperatorInvitationUncheckedCreateWithoutUserInput = {
    id?: string
    operatorId: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    invitedById: string
  }

  export type OperatorInvitationCreateOrConnectWithoutUserInput = {
    where: OperatorInvitationWhereUniqueInput
    create: XOR<OperatorInvitationCreateWithoutUserInput, OperatorInvitationUncheckedCreateWithoutUserInput>
  }

  export type UserCreateWithoutReferralsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutReferralsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutReferralsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
  }

  export type UserCreateWithoutReferrerInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutReferrerInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutReferrerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserCreateManyReferrerInputEnvelope = {
    data: UserCreateManyReferrerInput | UserCreateManyReferrerInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    username?: string | null
    name?: string | null
    activeGameId?: string | null
    ipAddress?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    lastActivityAt?: Date | string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    refreshToken?: string | null
    active?: boolean
    token: string
    updatedAt?: Date | string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    username?: string | null
    name?: string | null
    activeGameId?: string | null
    ipAddress?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    lastActivityAt?: Date | string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    refreshToken?: string | null
    active?: boolean
    token: string
    updatedAt?: Date | string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VipInfoCreateWithoutUserInput = {
    id?: string
    level?: number
    currentLevelXp?: number
    totalXp?: number
    nextLevelXpRequired: number
    cashbackPercentage?: number
    prioritySupport?: boolean
    specialBonusesAvailable?: number
    dailyBonusClaimedAt?: Date | string | null
    weeklyBonusClaimedAt?: Date | string | null
    monthlyBonusClaimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VipInfoUncheckedCreateWithoutUserInput = {
    id?: string
    level?: number
    currentLevelXp?: number
    totalXp?: number
    nextLevelXpRequired: number
    cashbackPercentage?: number
    prioritySupport?: boolean
    specialBonusesAvailable?: number
    dailyBonusClaimedAt?: Date | string | null
    weeklyBonusClaimedAt?: Date | string | null
    monthlyBonusClaimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VipInfoCreateOrConnectWithoutUserInput = {
    where: VipInfoWhereUniqueInput
    create: XOR<VipInfoCreateWithoutUserInput, VipInfoUncheckedCreateWithoutUserInput>
  }

  export type RebateTransactionCreateWithoutUserInput = {
    id?: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    originalTransaction: TransactionCreateNestedOneWithoutRebateGeneratedInput
  }

  export type RebateTransactionUncheckedCreateWithoutUserInput = {
    id?: string
    transactionId: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RebateTransactionCreateOrConnectWithoutUserInput = {
    where: RebateTransactionWhereUniqueInput
    create: XOR<RebateTransactionCreateWithoutUserInput, RebateTransactionUncheckedCreateWithoutUserInput>
  }

  export type RebateTransactionCreateManyUserInputEnvelope = {
    data: RebateTransactionCreateManyUserInput | RebateTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CurrencyCreateWithoutUsersPreferringThisCurrencyInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wallets?: WalletCreateNestedManyWithoutCurrencyInput
    transactions?: TransactionCreateNestedManyWithoutCurrencyInput
    products?: ProductCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutUsersPreferringThisCurrencyInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wallets?: WalletUncheckedCreateNestedManyWithoutCurrencyInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCurrencyInput
    products?: ProductUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutUsersPreferringThisCurrencyInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutUsersPreferringThisCurrencyInput, CurrencyUncheckedCreateWithoutUsersPreferringThisCurrencyInput>
  }

  export type UserRewardCreateWithoutUserInput = {
    id?: string
    rewardType: $Enums.RewardType
    claimedAt?: Date | string | null
    description: string
    status?: $Enums.RewardStatus
    amount?: number | null
    currencyId?: string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: Date | string | null
    availableFrom?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    vipLevelRequirement?: number | null
  }

  export type UserRewardUncheckedCreateWithoutUserInput = {
    id?: string
    rewardType: $Enums.RewardType
    claimedAt?: Date | string | null
    description: string
    status?: $Enums.RewardStatus
    amount?: number | null
    currencyId?: string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: Date | string | null
    availableFrom?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    vipLevelRequirement?: number | null
  }

  export type UserRewardCreateOrConnectWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    create: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput>
  }

  export type UserRewardCreateManyUserInputEnvelope = {
    data: UserRewardCreateManyUserInput | UserRewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserVipTaskProgressCreateWithoutUserInput = {
    id?: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    task: VipTaskCreateNestedOneWithoutUserTaskProgressInput
  }

  export type UserVipTaskProgressUncheckedCreateWithoutUserInput = {
    id?: string
    taskId: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserVipTaskProgressCreateOrConnectWithoutUserInput = {
    where: UserVipTaskProgressWhereUniqueInput
    create: XOR<UserVipTaskProgressCreateWithoutUserInput, UserVipTaskProgressUncheckedCreateWithoutUserInput>
  }

  export type UserVipTaskProgressCreateManyUserInputEnvelope = {
    data: UserVipTaskProgressCreateManyUserInput | UserVipTaskProgressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutSenderInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutReceivedNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutSenderInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutSenderInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
  }

  export type NotificationCreateManySenderInputEnvelope = {
    data: NotificationCreateManySenderInput | NotificationCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutOriginatorInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    sender: UserCreateNestedOneWithoutSentNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutOriginatorInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutOriginatorInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutOriginatorInput, NotificationUncheckedCreateWithoutOriginatorInput>
  }

  export type NotificationCreateManyOriginatorInputEnvelope = {
    data: NotificationCreateManyOriginatorInput | NotificationCreateManyOriginatorInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutOriginatorInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver?: UserCreateNestedOneWithoutReceivedTransactionsInput
    wallet?: WalletCreateNestedOneWithoutTransactionsInput
    product?: ProductCreateNestedOneWithoutTransactionsInput
    currency: CurrencyCreateNestedOneWithoutTransactionsInput
    rebateGenerated?: RebateTransactionCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutOriginatorInput = {
    id?: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    rebateGenerated?: RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutOriginatorInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutOriginatorInput, TransactionUncheckedCreateWithoutOriginatorInput>
  }

  export type TransactionCreateManyOriginatorInputEnvelope = {
    data: TransactionCreateManyOriginatorInput | TransactionCreateManyOriginatorInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutReceiverInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutOriginatedTransactionsInput
    wallet?: WalletCreateNestedOneWithoutTransactionsInput
    product?: ProductCreateNestedOneWithoutTransactionsInput
    currency: CurrencyCreateNestedOneWithoutTransactionsInput
    rebateGenerated?: RebateTransactionCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutReceiverInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    rebateGenerated?: RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutReceiverInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutReceiverInput, TransactionUncheckedCreateWithoutReceiverInput>
  }

  export type TransactionCreateManyReceiverInputEnvelope = {
    data: TransactionCreateManyReceiverInput | TransactionCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    currentGameSession?: GameSessionUpdateOneWithoutProfileNestedInput
    otherUser?: UserUpdateOneWithoutOtherProfilesNestedInput
    operator?: OperatorAccessUpdateOneWithoutProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGameSessionid?: NullableStringFieldUpdateOperationsInput | string | null
    otherUserid?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    operatorAccessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUpsertWithWhereUniqueWithoutOtherUserInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutOtherUserInput, ProfileUncheckedUpdateWithoutOtherUserInput>
    create: XOR<ProfileCreateWithoutOtherUserInput, ProfileUncheckedCreateWithoutOtherUserInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutOtherUserInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutOtherUserInput, ProfileUncheckedUpdateWithoutOtherUserInput>
  }

  export type ProfileUpdateManyWithWhereWithoutOtherUserInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutOtherUserInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: StringFilter<"Profile"> | string
    balance?: IntFilter<"Profile"> | number
    totalXpFromOperator?: IntFilter<"Profile"> | number
    activeCurrencyType?: StringFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    currentGameSessionid?: StringNullableFilter<"Profile"> | string | null
    userId?: StringFilter<"Profile"> | string
    otherUserid?: StringNullableFilter<"Profile"> | string | null
    role?: EnumRoleNullableFilter<"Profile"> | $Enums.Role | null
    operatorAccessId?: StringNullableFilter<"Profile"> | string | null
  }

  export type SettingsUpsertWithoutUserInput = {
    update: XOR<SettingsUpdateWithoutUserInput, SettingsUncheckedUpdateWithoutUserInput>
    create: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    where?: SettingsWhereInput
  }

  export type SettingsUpdateToOneWithWhereWithoutUserInput = {
    where?: SettingsWhereInput
    data: XOR<SettingsUpdateWithoutUserInput, SettingsUncheckedUpdateWithoutUserInput>
  }

  export type SettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletUpsertWithWhereUniqueWithoutUserInput = {
    where: WalletWhereUniqueInput
    update: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type WalletUpdateWithWhereUniqueWithoutUserInput = {
    where: WalletWhereUniqueInput
    data: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
  }

  export type WalletUpdateManyWithWhereWithoutUserInput = {
    where: WalletScalarWhereInput
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyWithoutUserInput>
  }

  export type WalletScalarWhereInput = {
    AND?: WalletScalarWhereInput | WalletScalarWhereInput[]
    OR?: WalletScalarWhereInput[]
    NOT?: WalletScalarWhereInput | WalletScalarWhereInput[]
    id?: StringFilter<"Wallet"> | string
    balance?: FloatFilter<"Wallet"> | number
    isActive?: BoolFilter<"Wallet"> | boolean
    address?: StringNullableFilter<"Wallet"> | string | null
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    userId?: StringFilter<"Wallet"> | string
    currencyId?: StringFilter<"Wallet"> | string
    bonusBalance?: IntFilter<"Wallet"> | number
    lockedBalance?: IntFilter<"Wallet"> | number
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    published?: BoolFilter<"Post"> | boolean
    tags?: StringNullableListFilter<"Post">
    viewCount?: IntFilter<"Post"> | number
    meta?: JsonNullableFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    authorId?: StringFilter<"Post"> | string
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    postId?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
  }

  export type GameSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: GameSessionWhereUniqueInput
    update: XOR<GameSessionUpdateWithoutUserInput, GameSessionUncheckedUpdateWithoutUserInput>
    create: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput>
  }

  export type GameSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: GameSessionWhereUniqueInput
    data: XOR<GameSessionUpdateWithoutUserInput, GameSessionUncheckedUpdateWithoutUserInput>
  }

  export type GameSessionUpdateManyWithWhereWithoutUserInput = {
    where: GameSessionScalarWhereInput
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type GameSessionScalarWhereInput = {
    AND?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    OR?: GameSessionScalarWhereInput[]
    NOT?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    id?: StringFilter<"GameSession"> | string
    isActive?: BoolFilter<"GameSession"> | boolean
    sessionData?: JsonNullableFilter<"GameSession">
    sessionId?: StringNullableFilter<"GameSession"> | string | null
    currencyId?: StringNullableFilter<"GameSession"> | string | null
    startedAt?: DateTimeFilter<"GameSession"> | Date | string
    endTime?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    startTime?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    ipAddress?: StringNullableFilter<"GameSession"> | string | null
    startingBalance?: IntNullableFilter<"GameSession"> | number | null
    userAgent?: StringNullableFilter<"GameSession"> | string | null
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    updatedAt?: DateTimeFilter<"GameSession"> | Date | string
    totalWagered?: IntFilter<"GameSession"> | number
    totalWon?: IntFilter<"GameSession"> | number
    userId?: StringFilter<"GameSession"> | string
    gameId?: StringFilter<"GameSession"> | string
    profileId?: StringNullableFilter<"GameSession"> | string | null
  }

  export type XpEventUpsertWithWhereUniqueWithoutUserInput = {
    where: XpEventWhereUniqueInput
    update: XOR<XpEventUpdateWithoutUserInput, XpEventUncheckedUpdateWithoutUserInput>
    create: XOR<XpEventCreateWithoutUserInput, XpEventUncheckedCreateWithoutUserInput>
  }

  export type XpEventUpdateWithWhereUniqueWithoutUserInput = {
    where: XpEventWhereUniqueInput
    data: XOR<XpEventUpdateWithoutUserInput, XpEventUncheckedUpdateWithoutUserInput>
  }

  export type XpEventUpdateManyWithWhereWithoutUserInput = {
    where: XpEventScalarWhereInput
    data: XOR<XpEventUpdateManyMutationInput, XpEventUncheckedUpdateManyWithoutUserInput>
  }

  export type XpEventScalarWhereInput = {
    AND?: XpEventScalarWhereInput | XpEventScalarWhereInput[]
    OR?: XpEventScalarWhereInput[]
    NOT?: XpEventScalarWhereInput | XpEventScalarWhereInput[]
    id?: StringFilter<"XpEvent"> | string
    points?: IntFilter<"XpEvent"> | number
    source?: StringFilter<"XpEvent"> | string
    sourceId?: StringNullableFilter<"XpEvent"> | string | null
    meta?: JsonNullableFilter<"XpEvent">
    createdAt?: DateTimeFilter<"XpEvent"> | Date | string
    updatedAt?: DateTimeFilter<"XpEvent"> | Date | string
    userId?: StringFilter<"XpEvent"> | string
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutUserInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAchievementScalarWhereInput = {
    AND?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    OR?: UserAchievementScalarWhereInput[]
    NOT?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    metaData?: JsonNullableFilter<"UserAchievement">
    createdAt?: DateTimeFilter<"UserAchievement"> | Date | string
    updatedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutAuthorInput, ChatMessageUncheckedUpdateWithoutAuthorInput>
    create: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutAuthorInput, ChatMessageUncheckedUpdateWithoutAuthorInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutAuthorInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    channel?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    mediaUrl?: StringNullableFilter<"ChatMessage"> | string | null
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    authorId?: StringFilter<"ChatMessage"> | string
  }

  export type FriendshipUpsertWithWhereUniqueWithoutRequesterInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutRequesterInput, FriendshipUncheckedUpdateWithoutRequesterInput>
    create: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutRequesterInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutRequesterInput, FriendshipUncheckedUpdateWithoutRequesterInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutRequesterInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutRequesterInput>
  }

  export type FriendshipScalarWhereInput = {
    AND?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    OR?: FriendshipScalarWhereInput[]
    NOT?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    id?: StringFilter<"Friendship"> | string
    status?: EnumFriendshipStatusFilter<"Friendship"> | $Enums.FriendshipStatus
    createdAt?: DateTimeFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeFilter<"Friendship"> | Date | string
    requesterId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
  }

  export type FriendshipUpsertWithWhereUniqueWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutReceiverInput, FriendshipUncheckedUpdateWithoutReceiverInput>
    create: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutReceiverInput, FriendshipUncheckedUpdateWithoutReceiverInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutReceiverInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutReceiverInput>
  }

  export type GameLaunchLinkUpsertWithWhereUniqueWithoutUserInput = {
    where: GameLaunchLinkWhereUniqueInput
    update: XOR<GameLaunchLinkUpdateWithoutUserInput, GameLaunchLinkUncheckedUpdateWithoutUserInput>
    create: XOR<GameLaunchLinkCreateWithoutUserInput, GameLaunchLinkUncheckedCreateWithoutUserInput>
  }

  export type GameLaunchLinkUpdateWithWhereUniqueWithoutUserInput = {
    where: GameLaunchLinkWhereUniqueInput
    data: XOR<GameLaunchLinkUpdateWithoutUserInput, GameLaunchLinkUncheckedUpdateWithoutUserInput>
  }

  export type GameLaunchLinkUpdateManyWithWhereWithoutUserInput = {
    where: GameLaunchLinkScalarWhereInput
    data: XOR<GameLaunchLinkUpdateManyMutationInput, GameLaunchLinkUncheckedUpdateManyWithoutUserInput>
  }

  export type GameLaunchLinkScalarWhereInput = {
    AND?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
    OR?: GameLaunchLinkScalarWhereInput[]
    NOT?: GameLaunchLinkScalarWhereInput | GameLaunchLinkScalarWhereInput[]
    id?: StringFilter<"GameLaunchLink"> | string
    token_internal?: StringFilter<"GameLaunchLink"> | string
    currency?: StringFilter<"GameLaunchLink"> | string
    player_operator_id?: StringNullableFilter<"GameLaunchLink"> | string | null
    mode?: StringFilter<"GameLaunchLink"> | string
    meta?: JsonNullableFilter<"GameLaunchLink">
    requestIp?: StringNullableFilter<"GameLaunchLink"> | string | null
    userAgent?: StringNullableFilter<"GameLaunchLink"> | string | null
    session_url?: StringNullableFilter<"GameLaunchLink"> | string | null
    state?: StringFilter<"GameLaunchLink"> | string
    active?: BoolFilter<"GameLaunchLink"> | boolean
    expiresAt?: DateTimeNullableFilter<"GameLaunchLink"> | Date | string | null
    extra_meta?: JsonNullableFilter<"GameLaunchLink">
    token_original?: StringNullableFilter<"GameLaunchLink"> | string | null
    createdAt?: DateTimeFilter<"GameLaunchLink"> | Date | string
    updatedAt?: DateTimeFilter<"GameLaunchLink"> | Date | string
    userId?: StringFilter<"GameLaunchLink"> | string
    gameId?: StringFilter<"GameLaunchLink"> | string
    operatorId?: StringFilter<"GameLaunchLink"> | string
  }

  export type EventLogUpsertWithWhereUniqueWithoutActorInput = {
    where: EventLogWhereUniqueInput
    update: XOR<EventLogUpdateWithoutActorInput, EventLogUncheckedUpdateWithoutActorInput>
    create: XOR<EventLogCreateWithoutActorInput, EventLogUncheckedCreateWithoutActorInput>
  }

  export type EventLogUpdateWithWhereUniqueWithoutActorInput = {
    where: EventLogWhereUniqueInput
    data: XOR<EventLogUpdateWithoutActorInput, EventLogUncheckedUpdateWithoutActorInput>
  }

  export type EventLogUpdateManyWithWhereWithoutActorInput = {
    where: EventLogScalarWhereInput
    data: XOR<EventLogUpdateManyMutationInput, EventLogUncheckedUpdateManyWithoutActorInput>
  }

  export type EventLogScalarWhereInput = {
    AND?: EventLogScalarWhereInput | EventLogScalarWhereInput[]
    OR?: EventLogScalarWhereInput[]
    NOT?: EventLogScalarWhereInput | EventLogScalarWhereInput[]
    id?: StringFilter<"EventLog"> | string
    action?: StringFilter<"EventLog"> | string
    targetType?: StringNullableFilter<"EventLog"> | string | null
    targetId?: StringNullableFilter<"EventLog"> | string | null
    data?: JsonNullableFilter<"EventLog">
    ipAddress?: StringNullableFilter<"EventLog"> | string | null
    userAgent?: StringNullableFilter<"EventLog"> | string | null
    timestamp?: DateTimeFilter<"EventLog"> | Date | string
    createdAt?: DateTimeFilter<"EventLog"> | Date | string
    updatedAt?: DateTimeFilter<"EventLog"> | Date | string
    actorId?: StringNullableFilter<"EventLog"> | string | null
  }

  export type OperatorAccessUpsertWithWhereUniqueWithoutOwnerInput = {
    where: OperatorAccessWhereUniqueInput
    update: XOR<OperatorAccessUpdateWithoutOwnerInput, OperatorAccessUncheckedUpdateWithoutOwnerInput>
    create: XOR<OperatorAccessCreateWithoutOwnerInput, OperatorAccessUncheckedCreateWithoutOwnerInput>
  }

  export type OperatorAccessUpdateWithWhereUniqueWithoutOwnerInput = {
    where: OperatorAccessWhereUniqueInput
    data: XOR<OperatorAccessUpdateWithoutOwnerInput, OperatorAccessUncheckedUpdateWithoutOwnerInput>
  }

  export type OperatorAccessUpdateManyWithWhereWithoutOwnerInput = {
    where: OperatorAccessScalarWhereInput
    data: XOR<OperatorAccessUpdateManyMutationInput, OperatorAccessUncheckedUpdateManyWithoutOwnerInput>
  }

  export type OperatorAccessScalarWhereInput = {
    AND?: OperatorAccessScalarWhereInput | OperatorAccessScalarWhereInput[]
    OR?: OperatorAccessScalarWhereInput[]
    NOT?: OperatorAccessScalarWhereInput | OperatorAccessScalarWhereInput[]
    id?: StringFilter<"OperatorAccess"> | string
    name?: StringFilter<"OperatorAccess"> | string
    operator_secret?: StringFilter<"OperatorAccess"> | string
    operator_access?: StringFilter<"OperatorAccess"> | string
    callbackUrl?: StringFilter<"OperatorAccess"> | string
    active?: BoolFilter<"OperatorAccess"> | boolean
    permissions?: EnumKeyModeNullableListFilter<"OperatorAccess">
    ips?: StringNullableListFilter<"OperatorAccess">
    description?: StringNullableFilter<"OperatorAccess"> | string | null
    lastUsedAt?: DateTimeNullableFilter<"OperatorAccess"> | Date | string | null
    createdAt?: DateTimeFilter<"OperatorAccess"> | Date | string
    updatedAt?: DateTimeFilter<"OperatorAccess"> | Date | string
    ownerId?: StringNullableFilter<"OperatorAccess"> | string | null
    acceptedPayments?: EnumPaymentMethodNullableListFilter<"OperatorAccess">
    ownedById?: StringNullableFilter<"OperatorAccess"> | string | null
  }

  export type OperatorInvitationUpsertWithWhereUniqueWithoutInvitedByInput = {
    where: OperatorInvitationWhereUniqueInput
    update: XOR<OperatorInvitationUpdateWithoutInvitedByInput, OperatorInvitationUncheckedUpdateWithoutInvitedByInput>
    create: XOR<OperatorInvitationCreateWithoutInvitedByInput, OperatorInvitationUncheckedCreateWithoutInvitedByInput>
  }

  export type OperatorInvitationUpdateWithWhereUniqueWithoutInvitedByInput = {
    where: OperatorInvitationWhereUniqueInput
    data: XOR<OperatorInvitationUpdateWithoutInvitedByInput, OperatorInvitationUncheckedUpdateWithoutInvitedByInput>
  }

  export type OperatorInvitationUpdateManyWithWhereWithoutInvitedByInput = {
    where: OperatorInvitationScalarWhereInput
    data: XOR<OperatorInvitationUpdateManyMutationInput, OperatorInvitationUncheckedUpdateManyWithoutInvitedByInput>
  }

  export type OperatorInvitationScalarWhereInput = {
    AND?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
    OR?: OperatorInvitationScalarWhereInput[]
    NOT?: OperatorInvitationScalarWhereInput | OperatorInvitationScalarWhereInput[]
    id?: StringFilter<"OperatorInvitation"> | string
    operatorId?: StringFilter<"OperatorInvitation"> | string
    email?: StringFilter<"OperatorInvitation"> | string
    role?: EnumRoleFilter<"OperatorInvitation"> | $Enums.Role
    token?: StringFilter<"OperatorInvitation"> | string
    expiresAt?: DateTimeFilter<"OperatorInvitation"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"OperatorInvitation"> | Date | string | null
    invitedById?: StringFilter<"OperatorInvitation"> | string
  }

  export type OperatorInvitationUpsertWithWhereUniqueWithoutUserInput = {
    where: OperatorInvitationWhereUniqueInput
    update: XOR<OperatorInvitationUpdateWithoutUserInput, OperatorInvitationUncheckedUpdateWithoutUserInput>
    create: XOR<OperatorInvitationCreateWithoutUserInput, OperatorInvitationUncheckedCreateWithoutUserInput>
  }

  export type OperatorInvitationUpdateWithWhereUniqueWithoutUserInput = {
    where: OperatorInvitationWhereUniqueInput
    data: XOR<OperatorInvitationUpdateWithoutUserInput, OperatorInvitationUncheckedUpdateWithoutUserInput>
  }

  export type OperatorInvitationUpdateManyWithWhereWithoutUserInput = {
    where: OperatorInvitationScalarWhereInput
    data: XOR<OperatorInvitationUpdateManyMutationInput, OperatorInvitationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserUpsertWithoutReferralsInput = {
    update: XOR<UserUpdateWithoutReferralsInput, UserUncheckedUpdateWithoutReferralsInput>
    create: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralsInput, UserUncheckedUpdateWithoutReferralsInput>
  }

  export type UserUpdateWithoutReferralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
  }

  export type UserUpdateManyWithWhereWithoutReferrerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReferrerInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    displayUsername?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    cashtag?: StringNullableFilter<"User"> | string | null
    phoneVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    isVerified?: BoolFilter<"User"> | boolean
    passwordHash?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    totalXp?: IntFilter<"User"> | number
    currentLevel?: IntFilter<"User"> | number
    referralCode?: StringNullableFilter<"User"> | string | null
    commissionRate?: FloatNullableFilter<"User"> | number | null
    twoFactorEnabled?: BoolNullableFilter<"User"> | boolean | null
    isOnline?: BoolNullableFilter<"User"> | boolean | null
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    twoFactorRecoveryCodes?: StringNullableListFilter<"User">
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastIp?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    activeWalletId?: StringNullableFilter<"User"> | string | null
    referrerId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableFilter<"User"> | $Enums.Gender | null
    preferredCurrencyId?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    locale?: StringNullableFilter<"User"> | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    username?: StringNullableFilter<"Session"> | string | null
    name?: StringNullableFilter<"Session"> | string | null
    activeGameId?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    startTime?: DateTimeFilter<"Session"> | Date | string
    endTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    lastActivityAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    refreshToken?: StringNullableFilter<"Session"> | string | null
    active?: BoolFilter<"Session"> | boolean
    token?: StringFilter<"Session"> | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
  }

  export type VipInfoUpsertWithoutUserInput = {
    update: XOR<VipInfoUpdateWithoutUserInput, VipInfoUncheckedUpdateWithoutUserInput>
    create: XOR<VipInfoCreateWithoutUserInput, VipInfoUncheckedCreateWithoutUserInput>
    where?: VipInfoWhereInput
  }

  export type VipInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: VipInfoWhereInput
    data: XOR<VipInfoUpdateWithoutUserInput, VipInfoUncheckedUpdateWithoutUserInput>
  }

  export type VipInfoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    currentLevelXp?: FloatFieldUpdateOperationsInput | number
    totalXp?: FloatFieldUpdateOperationsInput | number
    nextLevelXpRequired?: FloatFieldUpdateOperationsInput | number
    cashbackPercentage?: FloatFieldUpdateOperationsInput | number
    prioritySupport?: BoolFieldUpdateOperationsInput | boolean
    specialBonusesAvailable?: IntFieldUpdateOperationsInput | number
    dailyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VipInfoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    currentLevelXp?: FloatFieldUpdateOperationsInput | number
    totalXp?: FloatFieldUpdateOperationsInput | number
    nextLevelXpRequired?: FloatFieldUpdateOperationsInput | number
    cashbackPercentage?: FloatFieldUpdateOperationsInput | number
    prioritySupport?: BoolFieldUpdateOperationsInput | boolean
    specialBonusesAvailable?: IntFieldUpdateOperationsInput | number
    dailyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyBonusClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RebateTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: RebateTransactionWhereUniqueInput
    update: XOR<RebateTransactionUpdateWithoutUserInput, RebateTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<RebateTransactionCreateWithoutUserInput, RebateTransactionUncheckedCreateWithoutUserInput>
  }

  export type RebateTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: RebateTransactionWhereUniqueInput
    data: XOR<RebateTransactionUpdateWithoutUserInput, RebateTransactionUncheckedUpdateWithoutUserInput>
  }

  export type RebateTransactionUpdateManyWithWhereWithoutUserInput = {
    where: RebateTransactionScalarWhereInput
    data: XOR<RebateTransactionUpdateManyMutationInput, RebateTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type RebateTransactionScalarWhereInput = {
    AND?: RebateTransactionScalarWhereInput | RebateTransactionScalarWhereInput[]
    OR?: RebateTransactionScalarWhereInput[]
    NOT?: RebateTransactionScalarWhereInput | RebateTransactionScalarWhereInput[]
    id?: StringFilter<"RebateTransaction"> | string
    userId?: StringFilter<"RebateTransaction"> | string
    transactionId?: StringFilter<"RebateTransaction"> | string
    rebateAmount?: FloatFilter<"RebateTransaction"> | number
    currencyId?: StringFilter<"RebateTransaction"> | string
    vipLevel?: IntFilter<"RebateTransaction"> | number
    rebatePercentage?: FloatFilter<"RebateTransaction"> | number
    status?: EnumRewardStatusFilter<"RebateTransaction"> | $Enums.RewardStatus
    paidOutAt?: DateTimeNullableFilter<"RebateTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"RebateTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"RebateTransaction"> | Date | string
  }

  export type CurrencyUpsertWithoutUsersPreferringThisCurrencyInput = {
    update: XOR<CurrencyUpdateWithoutUsersPreferringThisCurrencyInput, CurrencyUncheckedUpdateWithoutUsersPreferringThisCurrencyInput>
    create: XOR<CurrencyCreateWithoutUsersPreferringThisCurrencyInput, CurrencyUncheckedCreateWithoutUsersPreferringThisCurrencyInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutUsersPreferringThisCurrencyInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutUsersPreferringThisCurrencyInput, CurrencyUncheckedUpdateWithoutUsersPreferringThisCurrencyInput>
  }

  export type CurrencyUpdateWithoutUsersPreferringThisCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallets?: WalletUpdateManyWithoutCurrencyNestedInput
    transactions?: TransactionUpdateManyWithoutCurrencyNestedInput
    products?: ProductUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutUsersPreferringThisCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallets?: WalletUncheckedUpdateManyWithoutCurrencyNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCurrencyNestedInput
    products?: ProductUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type UserRewardUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    update: XOR<UserRewardUpdateWithoutUserInput, UserRewardUncheckedUpdateWithoutUserInput>
    create: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput>
  }

  export type UserRewardUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    data: XOR<UserRewardUpdateWithoutUserInput, UserRewardUncheckedUpdateWithoutUserInput>
  }

  export type UserRewardUpdateManyWithWhereWithoutUserInput = {
    where: UserRewardScalarWhereInput
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRewardScalarWhereInput = {
    AND?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
    OR?: UserRewardScalarWhereInput[]
    NOT?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
    id?: StringFilter<"UserReward"> | string
    userId?: StringFilter<"UserReward"> | string
    rewardType?: EnumRewardTypeFilter<"UserReward"> | $Enums.RewardType
    claimedAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    description?: StringFilter<"UserReward"> | string
    status?: EnumRewardStatusFilter<"UserReward"> | $Enums.RewardStatus
    amount?: FloatNullableFilter<"UserReward"> | number | null
    currencyId?: StringNullableFilter<"UserReward"> | string | null
    metaData?: JsonNullableFilter<"UserReward">
    expiresAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    availableFrom?: DateTimeFilter<"UserReward"> | Date | string
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    vipLevelRequirement?: IntNullableFilter<"UserReward"> | number | null
  }

  export type UserVipTaskProgressUpsertWithWhereUniqueWithoutUserInput = {
    where: UserVipTaskProgressWhereUniqueInput
    update: XOR<UserVipTaskProgressUpdateWithoutUserInput, UserVipTaskProgressUncheckedUpdateWithoutUserInput>
    create: XOR<UserVipTaskProgressCreateWithoutUserInput, UserVipTaskProgressUncheckedCreateWithoutUserInput>
  }

  export type UserVipTaskProgressUpdateWithWhereUniqueWithoutUserInput = {
    where: UserVipTaskProgressWhereUniqueInput
    data: XOR<UserVipTaskProgressUpdateWithoutUserInput, UserVipTaskProgressUncheckedUpdateWithoutUserInput>
  }

  export type UserVipTaskProgressUpdateManyWithWhereWithoutUserInput = {
    where: UserVipTaskProgressScalarWhereInput
    data: XOR<UserVipTaskProgressUpdateManyMutationInput, UserVipTaskProgressUncheckedUpdateManyWithoutUserInput>
  }

  export type UserVipTaskProgressScalarWhereInput = {
    AND?: UserVipTaskProgressScalarWhereInput | UserVipTaskProgressScalarWhereInput[]
    OR?: UserVipTaskProgressScalarWhereInput[]
    NOT?: UserVipTaskProgressScalarWhereInput | UserVipTaskProgressScalarWhereInput[]
    id?: StringFilter<"UserVipTaskProgress"> | string
    userId?: StringFilter<"UserVipTaskProgress"> | string
    taskId?: StringFilter<"UserVipTaskProgress"> | string
    progress?: FloatFilter<"UserVipTaskProgress"> | number
    isCompleted?: BoolFilter<"UserVipTaskProgress"> | boolean
    rewardClaimedAt?: DateTimeNullableFilter<"UserVipTaskProgress"> | Date | string | null
    lastProgressAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    createdAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
    updatedAt?: DateTimeFilter<"UserVipTaskProgress"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutSenderInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutSenderInput, NotificationUncheckedUpdateWithoutSenderInput>
    create: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutSenderInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutSenderInput, NotificationUncheckedUpdateWithoutSenderInput>
  }

  export type NotificationUpdateManyWithWhereWithoutSenderInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutSenderInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    imageUrl?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutOriginatorInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutOriginatorInput, NotificationUncheckedUpdateWithoutOriginatorInput>
    create: XOR<NotificationCreateWithoutOriginatorInput, NotificationUncheckedCreateWithoutOriginatorInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutOriginatorInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutOriginatorInput, NotificationUncheckedUpdateWithoutOriginatorInput>
  }

  export type NotificationUpdateManyWithWhereWithoutOriginatorInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutOriginatorInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutOriginatorInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutOriginatorInput, TransactionUncheckedUpdateWithoutOriginatorInput>
    create: XOR<TransactionCreateWithoutOriginatorInput, TransactionUncheckedCreateWithoutOriginatorInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutOriginatorInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutOriginatorInput, TransactionUncheckedUpdateWithoutOriginatorInput>
  }

  export type TransactionUpdateManyWithWhereWithoutOriginatorInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutOriginatorInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    originatorUserId?: StringFilter<"Transaction"> | string
    processedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    receiverUserId?: StringNullableFilter<"Transaction"> | string | null
    walletId?: StringNullableFilter<"Transaction"> | string | null
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    amount?: IntFilter<"Transaction"> | number
    netAmount?: IntNullableFilter<"Transaction"> | number | null
    feeAmount?: IntNullableFilter<"Transaction"> | number | null
    productId?: StringNullableFilter<"Transaction"> | string | null
    currencyId?: StringFilter<"Transaction"> | string
    balanceBefore?: IntNullableFilter<"Transaction"> | number | null
    balanceAfter?: IntNullableFilter<"Transaction"> | number | null
    bonusBalanceBefore?: IntNullableFilter<"Transaction"> | number | null
    bonusBalanceAfter?: IntNullableFilter<"Transaction"> | number | null
    bonusAmount?: IntNullableFilter<"Transaction"> | number | null
    wageringRequirement?: IntNullableFilter<"Transaction"> | number | null
    wageringProgress?: IntNullableFilter<"Transaction"> | number | null
    description?: StringNullableFilter<"Transaction"> | string | null
    provider?: StringNullableFilter<"Transaction"> | string | null
    providerTxId?: StringNullableFilter<"Transaction"> | string | null
    relatedGameId?: StringNullableFilter<"Transaction"> | string | null
    relatedRoundId?: StringNullableFilter<"Transaction"> | string | null
    metadata?: JsonNullableFilter<"Transaction">
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutReceiverInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutReceiverInput, TransactionUncheckedUpdateWithoutReceiverInput>
    create: XOR<TransactionCreateWithoutReceiverInput, TransactionUncheckedCreateWithoutReceiverInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutReceiverInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutReceiverInput, TransactionUncheckedUpdateWithoutReceiverInput>
  }

  export type TransactionUpdateManyWithWhereWithoutReceiverInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutReceiverInput>
  }

  export type UserCreateWithoutPreferredCurrencyInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutPreferredCurrencyInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutPreferredCurrencyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferredCurrencyInput, UserUncheckedCreateWithoutPreferredCurrencyInput>
  }

  export type UserCreateManyPreferredCurrencyInputEnvelope = {
    data: UserCreateManyPreferredCurrencyInput | UserCreateManyPreferredCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type WalletCreateWithoutCurrencyInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bonusBalance?: number
    lockedBalance?: number
    user: UserCreateNestedOneWithoutWalletsInput
    transactions?: TransactionCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutCurrencyInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    bonusBalance?: number
    lockedBalance?: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutCurrencyInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutCurrencyInput, WalletUncheckedCreateWithoutCurrencyInput>
  }

  export type WalletCreateManyCurrencyInputEnvelope = {
    data: WalletCreateManyCurrencyInput | WalletCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutCurrencyInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutOriginatedTransactionsInput
    receiver?: UserCreateNestedOneWithoutReceivedTransactionsInput
    wallet?: WalletCreateNestedOneWithoutTransactionsInput
    product?: ProductCreateNestedOneWithoutTransactionsInput
    rebateGenerated?: RebateTransactionCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutCurrencyInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    rebateGenerated?: RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutCurrencyInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCurrencyInput, TransactionUncheckedCreateWithoutCurrencyInput>
  }

  export type TransactionCreateManyCurrencyInputEnvelope = {
    data: TransactionCreateManyCurrencyInput | TransactionCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutCurrencyInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    operator?: OperatorAccessCreateNestedOneWithoutProductsInput
    transactions?: TransactionCreateNestedManyWithoutProductInput
    Transaction?: TransactionCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCurrencyInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    shopId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactionId?: string | null
    transactions?: TransactionUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCurrencyInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCurrencyInput, ProductUncheckedCreateWithoutCurrencyInput>
  }

  export type ProductCreateManyCurrencyInputEnvelope = {
    data: ProductCreateManyCurrencyInput | ProductCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutPreferredCurrencyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPreferredCurrencyInput, UserUncheckedUpdateWithoutPreferredCurrencyInput>
    create: XOR<UserCreateWithoutPreferredCurrencyInput, UserUncheckedCreateWithoutPreferredCurrencyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPreferredCurrencyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPreferredCurrencyInput, UserUncheckedUpdateWithoutPreferredCurrencyInput>
  }

  export type UserUpdateManyWithWhereWithoutPreferredCurrencyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPreferredCurrencyInput>
  }

  export type WalletUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: WalletWhereUniqueInput
    update: XOR<WalletUpdateWithoutCurrencyInput, WalletUncheckedUpdateWithoutCurrencyInput>
    create: XOR<WalletCreateWithoutCurrencyInput, WalletUncheckedCreateWithoutCurrencyInput>
  }

  export type WalletUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: WalletWhereUniqueInput
    data: XOR<WalletUpdateWithoutCurrencyInput, WalletUncheckedUpdateWithoutCurrencyInput>
  }

  export type WalletUpdateManyWithWhereWithoutCurrencyInput = {
    where: WalletScalarWhereInput
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCurrencyInput, TransactionUncheckedUpdateWithoutCurrencyInput>
    create: XOR<TransactionCreateWithoutCurrencyInput, TransactionUncheckedCreateWithoutCurrencyInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCurrencyInput, TransactionUncheckedUpdateWithoutCurrencyInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCurrencyInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCurrencyInput, ProductUncheckedUpdateWithoutCurrencyInput>
    create: XOR<ProductCreateWithoutCurrencyInput, ProductUncheckedCreateWithoutCurrencyInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCurrencyInput, ProductUncheckedUpdateWithoutCurrencyInput>
  }

  export type ProductUpdateManyWithWhereWithoutCurrencyInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    title?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    url?: StringFilter<"Product"> | string
    iconUrl?: StringNullableFilter<"Product"> | string | null
    productType?: StringFilter<"Product"> | string
    bonusCode?: StringNullableFilter<"Product"> | string | null
    bonusTotalInCredits?: IntFilter<"Product"> | number
    isActive?: BoolNullableFilter<"Product"> | boolean | null
    currencyId?: StringFilter<"Product"> | string
    priceInCents?: IntFilter<"Product"> | number
    amountToReceiveInCredits?: IntFilter<"Product"> | number
    bestValue?: IntFilter<"Product"> | number
    discountInCents?: IntFilter<"Product"> | number
    bonusSpins?: IntFilter<"Product"> | number
    isPromo?: BoolNullableFilter<"Product"> | boolean | null
    totalDiscountInCents?: IntFilter<"Product"> | number
    shopId?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    transactionId?: StringNullableFilter<"Product"> | string | null
  }

  export type UserCreateWithoutSessionInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutAccountInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpsertWithoutAccountInput = {
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type GameSessionCreateWithoutProfileInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    profileId?: string | null
    spins?: GameSpinCreateNestedManyWithoutGameSessionInput
    user: UserCreateNestedOneWithoutGameSessionsInput
    game: GameCreateNestedOneWithoutGameSessionsInput
  }

  export type GameSessionUncheckedCreateWithoutProfileInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    userId: string
    gameId: string
    profileId?: string | null
    spins?: GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
  }

  export type GameSessionCreateOrConnectWithoutProfileInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutProfileInput, GameSessionUncheckedCreateWithoutProfileInput>
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserCreateWithoutOtherProfilesInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutOtherProfilesInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutOtherProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtherProfilesInput, UserUncheckedCreateWithoutOtherProfilesInput>
  }

  export type OperatorAccessCreateWithoutProfilesInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationCreateNestedManyWithoutOperatorInput
    owner?: UserCreateNestedOneWithoutCreatedOperatorsInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutOperatorInput
    products?: ProductCreateNestedManyWithoutOperatorInput
    games?: GameCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUncheckedCreateWithoutProfilesInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: string | null
    invitations?: OperatorInvitationUncheckedCreateNestedManyWithoutOperatorInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutOperatorInput
    products?: ProductUncheckedCreateNestedManyWithoutOperatorInput
    games?: GameUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessCreateOrConnectWithoutProfilesInput = {
    where: OperatorAccessWhereUniqueInput
    create: XOR<OperatorAccessCreateWithoutProfilesInput, OperatorAccessUncheckedCreateWithoutProfilesInput>
  }

  export type GameSessionUpsertWithoutProfileInput = {
    update: XOR<GameSessionUpdateWithoutProfileInput, GameSessionUncheckedUpdateWithoutProfileInput>
    create: XOR<GameSessionCreateWithoutProfileInput, GameSessionUncheckedCreateWithoutProfileInput>
    where?: GameSessionWhereInput
  }

  export type GameSessionUpdateToOneWithWhereWithoutProfileInput = {
    where?: GameSessionWhereInput
    data: XOR<GameSessionUpdateWithoutProfileInput, GameSessionUncheckedUpdateWithoutProfileInput>
  }

  export type GameSessionUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUpdateManyWithoutGameSessionNestedInput
    user?: UserUpdateOneRequiredWithoutGameSessionsNestedInput
    game?: GameUpdateOneRequiredWithoutGameSessionsNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutOtherProfilesInput = {
    update: XOR<UserUpdateWithoutOtherProfilesInput, UserUncheckedUpdateWithoutOtherProfilesInput>
    create: XOR<UserCreateWithoutOtherProfilesInput, UserUncheckedCreateWithoutOtherProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOtherProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOtherProfilesInput, UserUncheckedUpdateWithoutOtherProfilesInput>
  }

  export type UserUpdateWithoutOtherProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutOtherProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type OperatorAccessUpsertWithoutProfilesInput = {
    update: XOR<OperatorAccessUpdateWithoutProfilesInput, OperatorAccessUncheckedUpdateWithoutProfilesInput>
    create: XOR<OperatorAccessCreateWithoutProfilesInput, OperatorAccessUncheckedCreateWithoutProfilesInput>
    where?: OperatorAccessWhereInput
  }

  export type OperatorAccessUpdateToOneWithWhereWithoutProfilesInput = {
    where?: OperatorAccessWhereInput
    data: XOR<OperatorAccessUpdateWithoutProfilesInput, OperatorAccessUncheckedUpdateWithoutProfilesInput>
  }

  export type OperatorAccessUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUpdateManyWithoutOperatorNestedInput
    owner?: UserUpdateOneWithoutCreatedOperatorsNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutOperatorNestedInput
    products?: ProductUpdateManyWithoutOperatorNestedInput
    games?: GameUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: NullableStringFieldUpdateOperationsInput | string | null
    invitations?: OperatorInvitationUncheckedUpdateManyWithoutOperatorNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutOperatorNestedInput
    products?: ProductUncheckedUpdateManyWithoutOperatorNestedInput
    games?: GameUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type UserCreateWithoutSettingsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutWalletsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutWalletsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutWalletsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
  }

  export type CurrencyCreateWithoutWalletsInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserCreateNestedManyWithoutPreferredCurrencyInput
    transactions?: TransactionCreateNestedManyWithoutCurrencyInput
    products?: ProductCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutWalletsInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserUncheckedCreateNestedManyWithoutPreferredCurrencyInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCurrencyInput
    products?: ProductUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutWalletsInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutWalletsInput, CurrencyUncheckedCreateWithoutWalletsInput>
  }

  export type TransactionCreateWithoutWalletInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutOriginatedTransactionsInput
    receiver?: UserCreateNestedOneWithoutReceivedTransactionsInput
    product?: ProductCreateNestedOneWithoutTransactionsInput
    currency: CurrencyCreateNestedOneWithoutTransactionsInput
    rebateGenerated?: RebateTransactionCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutWalletInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    rebateGenerated?: RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutWalletInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput>
  }

  export type TransactionCreateManyWalletInputEnvelope = {
    data: TransactionCreateManyWalletInput | TransactionCreateManyWalletInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWalletsInput = {
    update: XOR<UserUpdateWithoutWalletsInput, UserUncheckedUpdateWithoutWalletsInput>
    create: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWalletsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWalletsInput, UserUncheckedUpdateWithoutWalletsInput>
  }

  export type UserUpdateWithoutWalletsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutWalletsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type CurrencyUpsertWithoutWalletsInput = {
    update: XOR<CurrencyUpdateWithoutWalletsInput, CurrencyUncheckedUpdateWithoutWalletsInput>
    create: XOR<CurrencyCreateWithoutWalletsInput, CurrencyUncheckedCreateWithoutWalletsInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutWalletsInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutWalletsInput, CurrencyUncheckedUpdateWithoutWalletsInput>
  }

  export type CurrencyUpdateWithoutWalletsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUpdateManyWithoutPreferredCurrencyNestedInput
    transactions?: TransactionUpdateManyWithoutCurrencyNestedInput
    products?: ProductUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutWalletsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUncheckedUpdateManyWithoutPreferredCurrencyNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCurrencyNestedInput
    products?: ProductUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutWalletInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutWalletInput, TransactionUncheckedUpdateWithoutWalletInput>
    create: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutWalletInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutWalletInput, TransactionUncheckedUpdateWithoutWalletInput>
  }

  export type TransactionUpdateManyWithWhereWithoutWalletInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutWalletInput>
  }

  export type OperatorInvitationCreateWithoutOperatorInput = {
    id?: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    invitedBy: UserCreateNestedOneWithoutInvitationsSentInput
    User?: UserCreateNestedManyWithoutInvitationsReceivedInput
  }

  export type OperatorInvitationUncheckedCreateWithoutOperatorInput = {
    id?: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    invitedById: string
    User?: UserUncheckedCreateNestedManyWithoutInvitationsReceivedInput
  }

  export type OperatorInvitationCreateOrConnectWithoutOperatorInput = {
    where: OperatorInvitationWhereUniqueInput
    create: XOR<OperatorInvitationCreateWithoutOperatorInput, OperatorInvitationUncheckedCreateWithoutOperatorInput>
  }

  export type OperatorInvitationCreateManyOperatorInputEnvelope = {
    data: OperatorInvitationCreateManyOperatorInput | OperatorInvitationCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedOperatorsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutCreatedOperatorsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutCreatedOperatorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedOperatorsInput, UserUncheckedCreateWithoutCreatedOperatorsInput>
  }

  export type GameLaunchLinkCreateWithoutOperatorInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGameLaunchLinksInput
    game: GameCreateNestedOneWithoutGameLaunchLinksInput
  }

  export type GameLaunchLinkUncheckedCreateWithoutOperatorInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    gameId: string
  }

  export type GameLaunchLinkCreateOrConnectWithoutOperatorInput = {
    where: GameLaunchLinkWhereUniqueInput
    create: XOR<GameLaunchLinkCreateWithoutOperatorInput, GameLaunchLinkUncheckedCreateWithoutOperatorInput>
  }

  export type GameLaunchLinkCreateManyOperatorInputEnvelope = {
    data: GameLaunchLinkCreateManyOperatorInput | GameLaunchLinkCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutOperatorInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    currency: CurrencyCreateNestedOneWithoutProductsInput
    transactions?: TransactionCreateNestedManyWithoutProductInput
    Transaction?: TransactionCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOperatorInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    currencyId: string
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactionId?: string | null
    transactions?: TransactionUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOperatorInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOperatorInput, ProductUncheckedCreateWithoutOperatorInput>
  }

  export type ProductCreateManyOperatorInputEnvelope = {
    data: ProductCreateManyOperatorInput | ProductCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutOperatorInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    gameSessions?: GameSessionCreateNestedManyWithoutGameInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutOperatorInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutGameInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutOperatorInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutOperatorInput, GameUncheckedCreateWithoutOperatorInput>
  }

  export type GameCreateManyOperatorInputEnvelope = {
    data: GameCreateManyOperatorInput | GameCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutOperatorInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.Role | null
    currentGameSession?: GameSessionCreateNestedOneWithoutProfileInput
    user: UserCreateNestedOneWithoutProfileInput
    otherUser?: UserCreateNestedOneWithoutOtherProfilesInput
  }

  export type ProfileUncheckedCreateWithoutOperatorInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGameSessionid?: string | null
    userId: string
    otherUserid?: string | null
    role?: $Enums.Role | null
  }

  export type ProfileCreateOrConnectWithoutOperatorInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutOperatorInput, ProfileUncheckedCreateWithoutOperatorInput>
  }

  export type ProfileCreateManyOperatorInputEnvelope = {
    data: ProfileCreateManyOperatorInput | ProfileCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type OperatorInvitationUpsertWithWhereUniqueWithoutOperatorInput = {
    where: OperatorInvitationWhereUniqueInput
    update: XOR<OperatorInvitationUpdateWithoutOperatorInput, OperatorInvitationUncheckedUpdateWithoutOperatorInput>
    create: XOR<OperatorInvitationCreateWithoutOperatorInput, OperatorInvitationUncheckedCreateWithoutOperatorInput>
  }

  export type OperatorInvitationUpdateWithWhereUniqueWithoutOperatorInput = {
    where: OperatorInvitationWhereUniqueInput
    data: XOR<OperatorInvitationUpdateWithoutOperatorInput, OperatorInvitationUncheckedUpdateWithoutOperatorInput>
  }

  export type OperatorInvitationUpdateManyWithWhereWithoutOperatorInput = {
    where: OperatorInvitationScalarWhereInput
    data: XOR<OperatorInvitationUpdateManyMutationInput, OperatorInvitationUncheckedUpdateManyWithoutOperatorInput>
  }

  export type UserUpsertWithoutCreatedOperatorsInput = {
    update: XOR<UserUpdateWithoutCreatedOperatorsInput, UserUncheckedUpdateWithoutCreatedOperatorsInput>
    create: XOR<UserCreateWithoutCreatedOperatorsInput, UserUncheckedCreateWithoutCreatedOperatorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedOperatorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedOperatorsInput, UserUncheckedUpdateWithoutCreatedOperatorsInput>
  }

  export type UserUpdateWithoutCreatedOperatorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedOperatorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type GameLaunchLinkUpsertWithWhereUniqueWithoutOperatorInput = {
    where: GameLaunchLinkWhereUniqueInput
    update: XOR<GameLaunchLinkUpdateWithoutOperatorInput, GameLaunchLinkUncheckedUpdateWithoutOperatorInput>
    create: XOR<GameLaunchLinkCreateWithoutOperatorInput, GameLaunchLinkUncheckedCreateWithoutOperatorInput>
  }

  export type GameLaunchLinkUpdateWithWhereUniqueWithoutOperatorInput = {
    where: GameLaunchLinkWhereUniqueInput
    data: XOR<GameLaunchLinkUpdateWithoutOperatorInput, GameLaunchLinkUncheckedUpdateWithoutOperatorInput>
  }

  export type GameLaunchLinkUpdateManyWithWhereWithoutOperatorInput = {
    where: GameLaunchLinkScalarWhereInput
    data: XOR<GameLaunchLinkUpdateManyMutationInput, GameLaunchLinkUncheckedUpdateManyWithoutOperatorInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutOperatorInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutOperatorInput, ProductUncheckedUpdateWithoutOperatorInput>
    create: XOR<ProductCreateWithoutOperatorInput, ProductUncheckedCreateWithoutOperatorInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutOperatorInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutOperatorInput, ProductUncheckedUpdateWithoutOperatorInput>
  }

  export type ProductUpdateManyWithWhereWithoutOperatorInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutOperatorInput>
  }

  export type GameUpsertWithWhereUniqueWithoutOperatorInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutOperatorInput, GameUncheckedUpdateWithoutOperatorInput>
    create: XOR<GameCreateWithoutOperatorInput, GameUncheckedCreateWithoutOperatorInput>
  }

  export type GameUpdateWithWhereUniqueWithoutOperatorInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutOperatorInput, GameUncheckedUpdateWithoutOperatorInput>
  }

  export type GameUpdateManyWithWhereWithoutOperatorInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutOperatorInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: StringFilter<"Game"> | string
    name?: StringFilter<"Game"> | string
    title?: StringFilter<"Game"> | string
    goldsvetData?: JsonNullableFilter<"Game">
    description?: StringNullableFilter<"Game"> | string | null
    provider?: EnumGameProviderFilter<"Game"> | $Enums.GameProvider
    category?: EnumGameCategoryFilter<"Game"> | $Enums.GameCategory
    tags?: StringNullableListFilter<"Game">
    isActive?: BoolFilter<"Game"> | boolean
    thumbnailUrl?: StringNullableFilter<"Game"> | string | null
    bannerUrl?: StringNullableFilter<"Game"> | string | null
    meta?: JsonNullableFilter<"Game">
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    featured?: BoolFilter<"Game"> | boolean
    operatorId?: StringNullableFilter<"Game"> | string | null
  }

  export type ProfileUpsertWithWhereUniqueWithoutOperatorInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutOperatorInput, ProfileUncheckedUpdateWithoutOperatorInput>
    create: XOR<ProfileCreateWithoutOperatorInput, ProfileUncheckedCreateWithoutOperatorInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutOperatorInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutOperatorInput, ProfileUncheckedUpdateWithoutOperatorInput>
  }

  export type ProfileUpdateManyWithWhereWithoutOperatorInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutOperatorInput>
  }

  export type UserAchievementCreateWithoutAchievementInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutAchievementInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UserAchievementCreateOrConnectWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementCreateManyAchievementInputEnvelope = {
    data: UserAchievementCreateManyAchievementInput | UserAchievementCreateManyAchievementInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutAchievementInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutAchievementInput>
  }

  export type GameSessionCreateWithoutGameInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    profileId?: string | null
    spins?: GameSpinCreateNestedManyWithoutGameSessionInput
    user: UserCreateNestedOneWithoutGameSessionsInput
    Profile?: ProfileCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionUncheckedCreateWithoutGameInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    userId: string
    profileId?: string | null
    spins?: GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
    Profile?: ProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionCreateOrConnectWithoutGameInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutGameInput, GameSessionUncheckedCreateWithoutGameInput>
  }

  export type GameSessionCreateManyGameInputEnvelope = {
    data: GameSessionCreateManyGameInput | GameSessionCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GameLaunchLinkCreateWithoutGameInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGameLaunchLinksInput
    operator: OperatorAccessCreateNestedOneWithoutGameLaunchLinksInput
  }

  export type GameLaunchLinkUncheckedCreateWithoutGameInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    operatorId: string
  }

  export type GameLaunchLinkCreateOrConnectWithoutGameInput = {
    where: GameLaunchLinkWhereUniqueInput
    create: XOR<GameLaunchLinkCreateWithoutGameInput, GameLaunchLinkUncheckedCreateWithoutGameInput>
  }

  export type GameLaunchLinkCreateManyGameInputEnvelope = {
    data: GameLaunchLinkCreateManyGameInput | GameLaunchLinkCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type OperatorAccessCreateWithoutGamesInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationCreateNestedManyWithoutOperatorInput
    owner?: UserCreateNestedOneWithoutCreatedOperatorsInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutOperatorInput
    products?: ProductCreateNestedManyWithoutOperatorInput
    profiles?: ProfileCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUncheckedCreateWithoutGamesInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: string | null
    invitations?: OperatorInvitationUncheckedCreateNestedManyWithoutOperatorInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutOperatorInput
    products?: ProductUncheckedCreateNestedManyWithoutOperatorInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessCreateOrConnectWithoutGamesInput = {
    where: OperatorAccessWhereUniqueInput
    create: XOR<OperatorAccessCreateWithoutGamesInput, OperatorAccessUncheckedCreateWithoutGamesInput>
  }

  export type GameSessionUpsertWithWhereUniqueWithoutGameInput = {
    where: GameSessionWhereUniqueInput
    update: XOR<GameSessionUpdateWithoutGameInput, GameSessionUncheckedUpdateWithoutGameInput>
    create: XOR<GameSessionCreateWithoutGameInput, GameSessionUncheckedCreateWithoutGameInput>
  }

  export type GameSessionUpdateWithWhereUniqueWithoutGameInput = {
    where: GameSessionWhereUniqueInput
    data: XOR<GameSessionUpdateWithoutGameInput, GameSessionUncheckedUpdateWithoutGameInput>
  }

  export type GameSessionUpdateManyWithWhereWithoutGameInput = {
    where: GameSessionScalarWhereInput
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyWithoutGameInput>
  }

  export type GameLaunchLinkUpsertWithWhereUniqueWithoutGameInput = {
    where: GameLaunchLinkWhereUniqueInput
    update: XOR<GameLaunchLinkUpdateWithoutGameInput, GameLaunchLinkUncheckedUpdateWithoutGameInput>
    create: XOR<GameLaunchLinkCreateWithoutGameInput, GameLaunchLinkUncheckedCreateWithoutGameInput>
  }

  export type GameLaunchLinkUpdateWithWhereUniqueWithoutGameInput = {
    where: GameLaunchLinkWhereUniqueInput
    data: XOR<GameLaunchLinkUpdateWithoutGameInput, GameLaunchLinkUncheckedUpdateWithoutGameInput>
  }

  export type GameLaunchLinkUpdateManyWithWhereWithoutGameInput = {
    where: GameLaunchLinkScalarWhereInput
    data: XOR<GameLaunchLinkUpdateManyMutationInput, GameLaunchLinkUncheckedUpdateManyWithoutGameInput>
  }

  export type OperatorAccessUpsertWithoutGamesInput = {
    update: XOR<OperatorAccessUpdateWithoutGamesInput, OperatorAccessUncheckedUpdateWithoutGamesInput>
    create: XOR<OperatorAccessCreateWithoutGamesInput, OperatorAccessUncheckedCreateWithoutGamesInput>
    where?: OperatorAccessWhereInput
  }

  export type OperatorAccessUpdateToOneWithWhereWithoutGamesInput = {
    where?: OperatorAccessWhereInput
    data: XOR<OperatorAccessUpdateWithoutGamesInput, OperatorAccessUncheckedUpdateWithoutGamesInput>
  }

  export type OperatorAccessUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUpdateManyWithoutOperatorNestedInput
    owner?: UserUpdateOneWithoutCreatedOperatorsNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutOperatorNestedInput
    products?: ProductUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: NullableStringFieldUpdateOperationsInput | string | null
    invitations?: OperatorInvitationUncheckedUpdateManyWithoutOperatorNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutOperatorNestedInput
    products?: ProductUncheckedUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type UserCreateWithoutPostsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type CommentCreateWithoutPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: CommentCreateManyPostInput | CommentCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostInput>
  }

  export type PostCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type PostUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type GameSessionCreateWithoutSpinsInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    profileId?: string | null
    user: UserCreateNestedOneWithoutGameSessionsInput
    game: GameCreateNestedOneWithoutGameSessionsInput
    Profile?: ProfileCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionUncheckedCreateWithoutSpinsInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    userId: string
    gameId: string
    profileId?: string | null
    Profile?: ProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
  }

  export type GameSessionCreateOrConnectWithoutSpinsInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutSpinsInput, GameSessionUncheckedCreateWithoutSpinsInput>
  }

  export type GameSessionUpsertWithoutSpinsInput = {
    update: XOR<GameSessionUpdateWithoutSpinsInput, GameSessionUncheckedUpdateWithoutSpinsInput>
    create: XOR<GameSessionCreateWithoutSpinsInput, GameSessionUncheckedCreateWithoutSpinsInput>
    where?: GameSessionWhereInput
  }

  export type GameSessionUpdateToOneWithWhereWithoutSpinsInput = {
    where?: GameSessionWhereInput
    data: XOR<GameSessionUpdateWithoutSpinsInput, GameSessionUncheckedUpdateWithoutSpinsInput>
  }

  export type GameSessionUpdateWithoutSpinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutGameSessionsNestedInput
    game?: GameUpdateOneRequiredWithoutGameSessionsNestedInput
    Profile?: ProfileUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutSpinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    Profile?: ProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSpinCreateWithoutGameSessionInput = {
    id?: string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    grossWinAmount?: number
    currencyId?: string | null
    spinNumber?: number
    wagerAmount?: number
    sessionId: string
    timeStamp: Date | string
  }

  export type GameSpinUncheckedCreateWithoutGameSessionInput = {
    id?: string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    grossWinAmount?: number
    currencyId?: string | null
    spinNumber?: number
    wagerAmount?: number
    sessionId: string
    timeStamp: Date | string
  }

  export type GameSpinCreateOrConnectWithoutGameSessionInput = {
    where: GameSpinWhereUniqueInput
    create: XOR<GameSpinCreateWithoutGameSessionInput, GameSpinUncheckedCreateWithoutGameSessionInput>
  }

  export type GameSpinCreateManyGameSessionInputEnvelope = {
    data: GameSpinCreateManyGameSessionInput | GameSpinCreateManyGameSessionInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutGameSessionsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutGameSessionsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutGameSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
  }

  export type GameCreateWithoutGameSessionsInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutGameInput
    operator?: OperatorAccessCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateWithoutGameSessionsInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    operatorId?: string | null
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameSessionsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameSessionsInput, GameUncheckedCreateWithoutGameSessionsInput>
  }

  export type ProfileCreateWithoutCurrentGameSessionInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.Role | null
    user: UserCreateNestedOneWithoutProfileInput
    otherUser?: UserCreateNestedOneWithoutOtherProfilesInput
    operator?: OperatorAccessCreateNestedOneWithoutProfilesInput
  }

  export type ProfileUncheckedCreateWithoutCurrentGameSessionInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    otherUserid?: string | null
    role?: $Enums.Role | null
    operatorAccessId?: string | null
  }

  export type ProfileCreateOrConnectWithoutCurrentGameSessionInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCurrentGameSessionInput, ProfileUncheckedCreateWithoutCurrentGameSessionInput>
  }

  export type ProfileCreateManyCurrentGameSessionInputEnvelope = {
    data: ProfileCreateManyCurrentGameSessionInput | ProfileCreateManyCurrentGameSessionInput[]
    skipDuplicates?: boolean
  }

  export type GameSpinUpsertWithWhereUniqueWithoutGameSessionInput = {
    where: GameSpinWhereUniqueInput
    update: XOR<GameSpinUpdateWithoutGameSessionInput, GameSpinUncheckedUpdateWithoutGameSessionInput>
    create: XOR<GameSpinCreateWithoutGameSessionInput, GameSpinUncheckedCreateWithoutGameSessionInput>
  }

  export type GameSpinUpdateWithWhereUniqueWithoutGameSessionInput = {
    where: GameSpinWhereUniqueInput
    data: XOR<GameSpinUpdateWithoutGameSessionInput, GameSpinUncheckedUpdateWithoutGameSessionInput>
  }

  export type GameSpinUpdateManyWithWhereWithoutGameSessionInput = {
    where: GameSpinScalarWhereInput
    data: XOR<GameSpinUpdateManyMutationInput, GameSpinUncheckedUpdateManyWithoutGameSessionInput>
  }

  export type GameSpinScalarWhereInput = {
    AND?: GameSpinScalarWhereInput | GameSpinScalarWhereInput[]
    OR?: GameSpinScalarWhereInput[]
    NOT?: GameSpinScalarWhereInput | GameSpinScalarWhereInput[]
    id?: StringFilter<"GameSpin"> | string
    spinData?: JsonNullableFilter<"GameSpin">
    createdAt?: DateTimeFilter<"GameSpin"> | Date | string
    grossWinAmount?: IntFilter<"GameSpin"> | number
    currencyId?: StringNullableFilter<"GameSpin"> | string | null
    spinNumber?: IntFilter<"GameSpin"> | number
    gameSessionId?: StringFilter<"GameSpin"> | string
    wagerAmount?: IntFilter<"GameSpin"> | number
    sessionId?: StringFilter<"GameSpin"> | string
    timeStamp?: DateTimeFilter<"GameSpin"> | Date | string
  }

  export type UserUpsertWithoutGameSessionsInput = {
    update: XOR<UserUpdateWithoutGameSessionsInput, UserUncheckedUpdateWithoutGameSessionsInput>
    create: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGameSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGameSessionsInput, UserUncheckedUpdateWithoutGameSessionsInput>
  }

  export type UserUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type GameUpsertWithoutGameSessionsInput = {
    update: XOR<GameUpdateWithoutGameSessionsInput, GameUncheckedUpdateWithoutGameSessionsInput>
    create: XOR<GameCreateWithoutGameSessionsInput, GameUncheckedCreateWithoutGameSessionsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameSessionsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameSessionsInput, GameUncheckedUpdateWithoutGameSessionsInput>
  }

  export type GameUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutGameNestedInput
    operator?: OperatorAccessUpdateOneWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
  }

  export type ProfileUpsertWithWhereUniqueWithoutCurrentGameSessionInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutCurrentGameSessionInput, ProfileUncheckedUpdateWithoutCurrentGameSessionInput>
    create: XOR<ProfileCreateWithoutCurrentGameSessionInput, ProfileUncheckedCreateWithoutCurrentGameSessionInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutCurrentGameSessionInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutCurrentGameSessionInput, ProfileUncheckedUpdateWithoutCurrentGameSessionInput>
  }

  export type ProfileUpdateManyWithWhereWithoutCurrentGameSessionInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutCurrentGameSessionInput>
  }

  export type UserCreateWithoutUserAchievementsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutUserAchievementsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutUserAchievementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
  }

  export type AchievementCreateWithoutUserAchievementsInput = {
    id?: string
    name: string
    description: string
    xpReward: number
    iconUrl?: string | null
    secret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    blur: number
  }

  export type AchievementUncheckedCreateWithoutUserAchievementsInput = {
    id?: string
    name: string
    description: string
    xpReward: number
    iconUrl?: string | null
    secret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    blur: number
  }

  export type AchievementCreateOrConnectWithoutUserAchievementsInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
  }

  export type UserUpsertWithoutUserAchievementsInput = {
    update: XOR<UserUpdateWithoutUserAchievementsInput, UserUncheckedUpdateWithoutUserAchievementsInput>
    create: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserAchievementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserAchievementsInput, UserUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type UserUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type AchievementUpsertWithoutUserAchievementsInput = {
    update: XOR<AchievementUpdateWithoutUserAchievementsInput, AchievementUncheckedUpdateWithoutUserAchievementsInput>
    create: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    where?: AchievementWhereInput
  }

  export type AchievementUpdateToOneWithWhereWithoutUserAchievementsInput = {
    where?: AchievementWhereInput
    data: XOR<AchievementUpdateWithoutUserAchievementsInput, AchievementUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type AchievementUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: IntFieldUpdateOperationsInput | number
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blur?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementUncheckedUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: IntFieldUpdateOperationsInput | number
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blur?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutXpEventsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutXpEventsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutXpEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutXpEventsInput, UserUncheckedCreateWithoutXpEventsInput>
  }

  export type UserUpsertWithoutXpEventsInput = {
    update: XOR<UserUpdateWithoutXpEventsInput, UserUncheckedUpdateWithoutXpEventsInput>
    create: XOR<UserCreateWithoutXpEventsInput, UserUncheckedCreateWithoutXpEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutXpEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutXpEventsInput, UserUncheckedUpdateWithoutXpEventsInput>
  }

  export type UserUpdateWithoutXpEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutXpEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutSentNotificationsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSentNotificationsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSentNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
  }

  export type UserCreateWithoutReceivedNotificationsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutReceivedNotificationsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutReceivedNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
  }

  export type UserUpsertWithoutSentNotificationsInput = {
    update: XOR<UserUpdateWithoutSentNotificationsInput, UserUncheckedUpdateWithoutSentNotificationsInput>
    create: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentNotificationsInput, UserUncheckedUpdateWithoutSentNotificationsInput>
  }

  export type UserUpdateWithoutSentNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSentNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutReceivedNotificationsInput = {
    update: XOR<UserUpdateWithoutReceivedNotificationsInput, UserUncheckedUpdateWithoutReceivedNotificationsInput>
    create: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedNotificationsInput, UserUncheckedUpdateWithoutReceivedNotificationsInput>
  }

  export type UserUpdateWithoutReceivedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutSentMessagesInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutFriendshipsSentInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutFriendshipsSentInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutFriendshipsSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendshipsSentInput, UserUncheckedCreateWithoutFriendshipsSentInput>
  }

  export type UserCreateWithoutFriendshipsReceivedInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutFriendshipsReceivedInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutFriendshipsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendshipsReceivedInput, UserUncheckedCreateWithoutFriendshipsReceivedInput>
  }

  export type UserUpsertWithoutFriendshipsSentInput = {
    update: XOR<UserUpdateWithoutFriendshipsSentInput, UserUncheckedUpdateWithoutFriendshipsSentInput>
    create: XOR<UserCreateWithoutFriendshipsSentInput, UserUncheckedCreateWithoutFriendshipsSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFriendshipsSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFriendshipsSentInput, UserUncheckedUpdateWithoutFriendshipsSentInput>
  }

  export type UserUpdateWithoutFriendshipsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutFriendshipsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutFriendshipsReceivedInput = {
    update: XOR<UserUpdateWithoutFriendshipsReceivedInput, UserUncheckedUpdateWithoutFriendshipsReceivedInput>
    create: XOR<UserCreateWithoutFriendshipsReceivedInput, UserUncheckedCreateWithoutFriendshipsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFriendshipsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFriendshipsReceivedInput, UserUncheckedUpdateWithoutFriendshipsReceivedInput>
  }

  export type UserUpdateWithoutFriendshipsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutFriendshipsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutOriginatedTransactionsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutOriginatedTransactionsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutOriginatedTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOriginatedTransactionsInput, UserUncheckedCreateWithoutOriginatedTransactionsInput>
  }

  export type UserCreateWithoutReceivedTransactionsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
  }

  export type UserUncheckedCreateWithoutReceivedTransactionsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
  }

  export type UserCreateOrConnectWithoutReceivedTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
  }

  export type WalletCreateWithoutTransactionsInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bonusBalance?: number
    lockedBalance?: number
    user: UserCreateNestedOneWithoutWalletsInput
    currency: CurrencyCreateNestedOneWithoutWalletsInput
  }

  export type WalletUncheckedCreateWithoutTransactionsInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    currencyId: string
    bonusBalance?: number
    lockedBalance?: number
  }

  export type WalletCreateOrConnectWithoutTransactionsInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
  }

  export type ProductCreateWithoutTransactionsInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    currency: CurrencyCreateNestedOneWithoutProductsInput
    operator?: OperatorAccessCreateNestedOneWithoutProductsInput
    Transaction?: TransactionCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutTransactionsInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    currencyId: string
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    shopId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactionId?: string | null
  }

  export type ProductCreateOrConnectWithoutTransactionsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutTransactionsInput, ProductUncheckedCreateWithoutTransactionsInput>
  }

  export type CurrencyCreateWithoutTransactionsInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserCreateNestedManyWithoutPreferredCurrencyInput
    wallets?: WalletCreateNestedManyWithoutCurrencyInput
    products?: ProductCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserUncheckedCreateNestedManyWithoutPreferredCurrencyInput
    wallets?: WalletUncheckedCreateNestedManyWithoutCurrencyInput
    products?: ProductUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutTransactionsInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutTransactionsInput, CurrencyUncheckedCreateWithoutTransactionsInput>
  }

  export type RebateTransactionCreateWithoutOriginalTransactionInput = {
    id?: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRebateTransactionInput
  }

  export type RebateTransactionUncheckedCreateWithoutOriginalTransactionInput = {
    id?: string
    userId: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RebateTransactionCreateOrConnectWithoutOriginalTransactionInput = {
    where: RebateTransactionWhereUniqueInput
    create: XOR<RebateTransactionCreateWithoutOriginalTransactionInput, RebateTransactionUncheckedCreateWithoutOriginalTransactionInput>
  }

  export type ProductCreateWithoutTransactionInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    currency: CurrencyCreateNestedOneWithoutProductsInput
    operator?: OperatorAccessCreateNestedOneWithoutProductsInput
    transactions?: TransactionCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutTransactionInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    currencyId: string
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    shopId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactions?: TransactionUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutTransactionInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutTransactionInput, ProductUncheckedCreateWithoutTransactionInput>
  }

  export type ProductCreateManyTransactionInputEnvelope = {
    data: ProductCreateManyTransactionInput | ProductCreateManyTransactionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOriginatedTransactionsInput = {
    update: XOR<UserUpdateWithoutOriginatedTransactionsInput, UserUncheckedUpdateWithoutOriginatedTransactionsInput>
    create: XOR<UserCreateWithoutOriginatedTransactionsInput, UserUncheckedCreateWithoutOriginatedTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOriginatedTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOriginatedTransactionsInput, UserUncheckedUpdateWithoutOriginatedTransactionsInput>
  }

  export type UserUpdateWithoutOriginatedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutOriginatedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutReceivedTransactionsInput = {
    update: XOR<UserUpdateWithoutReceivedTransactionsInput, UserUncheckedUpdateWithoutReceivedTransactionsInput>
    create: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedTransactionsInput, UserUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type UserUpdateWithoutReceivedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
  }

  export type WalletUpsertWithoutTransactionsInput = {
    update: XOR<WalletUpdateWithoutTransactionsInput, WalletUncheckedUpdateWithoutTransactionsInput>
    create: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutTransactionsInput, WalletUncheckedUpdateWithoutTransactionsInput>
  }

  export type WalletUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutWalletsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutWalletsNestedInput
  }

  export type WalletUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUpsertWithoutTransactionsInput = {
    update: XOR<ProductUpdateWithoutTransactionsInput, ProductUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ProductCreateWithoutTransactionsInput, ProductUncheckedCreateWithoutTransactionsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutTransactionsInput, ProductUncheckedUpdateWithoutTransactionsInput>
  }

  export type ProductUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: CurrencyUpdateOneRequiredWithoutProductsNestedInput
    operator?: OperatorAccessUpdateOneWithoutProductsNestedInput
    Transaction?: TransactionUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currencyId?: StringFieldUpdateOperationsInput | string
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    shopId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CurrencyUpsertWithoutTransactionsInput = {
    update: XOR<CurrencyUpdateWithoutTransactionsInput, CurrencyUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CurrencyCreateWithoutTransactionsInput, CurrencyUncheckedCreateWithoutTransactionsInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutTransactionsInput, CurrencyUncheckedUpdateWithoutTransactionsInput>
  }

  export type CurrencyUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUpdateManyWithoutPreferredCurrencyNestedInput
    wallets?: WalletUpdateManyWithoutCurrencyNestedInput
    products?: ProductUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUncheckedUpdateManyWithoutPreferredCurrencyNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutCurrencyNestedInput
    products?: ProductUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type RebateTransactionUpsertWithoutOriginalTransactionInput = {
    update: XOR<RebateTransactionUpdateWithoutOriginalTransactionInput, RebateTransactionUncheckedUpdateWithoutOriginalTransactionInput>
    create: XOR<RebateTransactionCreateWithoutOriginalTransactionInput, RebateTransactionUncheckedCreateWithoutOriginalTransactionInput>
    where?: RebateTransactionWhereInput
  }

  export type RebateTransactionUpdateToOneWithWhereWithoutOriginalTransactionInput = {
    where?: RebateTransactionWhereInput
    data: XOR<RebateTransactionUpdateWithoutOriginalTransactionInput, RebateTransactionUncheckedUpdateWithoutOriginalTransactionInput>
  }

  export type RebateTransactionUpdateWithoutOriginalTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRebateTransactionNestedInput
  }

  export type RebateTransactionUncheckedUpdateWithoutOriginalTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithWhereUniqueWithoutTransactionInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutTransactionInput, ProductUncheckedUpdateWithoutTransactionInput>
    create: XOR<ProductCreateWithoutTransactionInput, ProductUncheckedCreateWithoutTransactionInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutTransactionInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutTransactionInput, ProductUncheckedUpdateWithoutTransactionInput>
  }

  export type ProductUpdateManyWithWhereWithoutTransactionInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutTransactionInput>
  }

  export type UserCreateWithoutGameLaunchLinksInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutGameLaunchLinksInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutGameLaunchLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameLaunchLinksInput, UserUncheckedCreateWithoutGameLaunchLinksInput>
  }

  export type GameCreateWithoutGameLaunchLinksInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    gameSessions?: GameSessionCreateNestedManyWithoutGameInput
    operator?: OperatorAccessCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateWithoutGameLaunchLinksInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
    operatorId?: string | null
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameLaunchLinksInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameLaunchLinksInput, GameUncheckedCreateWithoutGameLaunchLinksInput>
  }

  export type OperatorAccessCreateWithoutGameLaunchLinksInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationCreateNestedManyWithoutOperatorInput
    owner?: UserCreateNestedOneWithoutCreatedOperatorsInput
    products?: ProductCreateNestedManyWithoutOperatorInput
    games?: GameCreateNestedManyWithoutOperatorInput
    profiles?: ProfileCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUncheckedCreateWithoutGameLaunchLinksInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: string | null
    invitations?: OperatorInvitationUncheckedCreateNestedManyWithoutOperatorInput
    products?: ProductUncheckedCreateNestedManyWithoutOperatorInput
    games?: GameUncheckedCreateNestedManyWithoutOperatorInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessCreateOrConnectWithoutGameLaunchLinksInput = {
    where: OperatorAccessWhereUniqueInput
    create: XOR<OperatorAccessCreateWithoutGameLaunchLinksInput, OperatorAccessUncheckedCreateWithoutGameLaunchLinksInput>
  }

  export type UserUpsertWithoutGameLaunchLinksInput = {
    update: XOR<UserUpdateWithoutGameLaunchLinksInput, UserUncheckedUpdateWithoutGameLaunchLinksInput>
    create: XOR<UserCreateWithoutGameLaunchLinksInput, UserUncheckedCreateWithoutGameLaunchLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGameLaunchLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGameLaunchLinksInput, UserUncheckedUpdateWithoutGameLaunchLinksInput>
  }

  export type UserUpdateWithoutGameLaunchLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutGameLaunchLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type GameUpsertWithoutGameLaunchLinksInput = {
    update: XOR<GameUpdateWithoutGameLaunchLinksInput, GameUncheckedUpdateWithoutGameLaunchLinksInput>
    create: XOR<GameCreateWithoutGameLaunchLinksInput, GameUncheckedCreateWithoutGameLaunchLinksInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameLaunchLinksInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameLaunchLinksInput, GameUncheckedUpdateWithoutGameLaunchLinksInput>
  }

  export type GameUpdateWithoutGameLaunchLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    gameSessions?: GameSessionUpdateManyWithoutGameNestedInput
    operator?: OperatorAccessUpdateOneWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutGameLaunchLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    gameSessions?: GameSessionUncheckedUpdateManyWithoutGameNestedInput
  }

  export type OperatorAccessUpsertWithoutGameLaunchLinksInput = {
    update: XOR<OperatorAccessUpdateWithoutGameLaunchLinksInput, OperatorAccessUncheckedUpdateWithoutGameLaunchLinksInput>
    create: XOR<OperatorAccessCreateWithoutGameLaunchLinksInput, OperatorAccessUncheckedCreateWithoutGameLaunchLinksInput>
    where?: OperatorAccessWhereInput
  }

  export type OperatorAccessUpdateToOneWithWhereWithoutGameLaunchLinksInput = {
    where?: OperatorAccessWhereInput
    data: XOR<OperatorAccessUpdateWithoutGameLaunchLinksInput, OperatorAccessUncheckedUpdateWithoutGameLaunchLinksInput>
  }

  export type OperatorAccessUpdateWithoutGameLaunchLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUpdateManyWithoutOperatorNestedInput
    owner?: UserUpdateOneWithoutCreatedOperatorsNestedInput
    products?: ProductUpdateManyWithoutOperatorNestedInput
    games?: GameUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateWithoutGameLaunchLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: NullableStringFieldUpdateOperationsInput | string | null
    invitations?: OperatorInvitationUncheckedUpdateManyWithoutOperatorNestedInput
    products?: ProductUncheckedUpdateManyWithoutOperatorNestedInput
    games?: GameUncheckedUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type CurrencyCreateWithoutProductsInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserCreateNestedManyWithoutPreferredCurrencyInput
    wallets?: WalletCreateNestedManyWithoutCurrencyInput
    transactions?: TransactionCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    symbol: string
    type?: string
    precision?: number
    isActive?: boolean
    isDefault?: boolean
    contractAddress?: string | null
    blockchain?: string | null
    withdrawalFeeFixed?: number | null
    withdrawalFeePercent?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usersPreferringThisCurrency?: UserUncheckedCreateNestedManyWithoutPreferredCurrencyInput
    wallets?: WalletUncheckedCreateNestedManyWithoutCurrencyInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutProductsInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
  }

  export type OperatorAccessCreateWithoutProductsInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationCreateNestedManyWithoutOperatorInput
    owner?: UserCreateNestedOneWithoutCreatedOperatorsInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutOperatorInput
    games?: GameCreateNestedManyWithoutOperatorInput
    profiles?: ProfileCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: string | null
    invitations?: OperatorInvitationUncheckedCreateNestedManyWithoutOperatorInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutOperatorInput
    games?: GameUncheckedCreateNestedManyWithoutOperatorInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessCreateOrConnectWithoutProductsInput = {
    where: OperatorAccessWhereUniqueInput
    create: XOR<OperatorAccessCreateWithoutProductsInput, OperatorAccessUncheckedCreateWithoutProductsInput>
  }

  export type TransactionCreateWithoutProductInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutOriginatedTransactionsInput
    receiver?: UserCreateNestedOneWithoutReceivedTransactionsInput
    wallet?: WalletCreateNestedOneWithoutTransactionsInput
    currency: CurrencyCreateNestedOneWithoutTransactionsInput
    rebateGenerated?: RebateTransactionCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutProductInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    rebateGenerated?: RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput
    Product?: ProductUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutProductInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput>
  }

  export type TransactionCreateManyProductInputEnvelope = {
    data: TransactionCreateManyProductInput | TransactionCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutProductInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutOriginatedTransactionsInput
    receiver?: UserCreateNestedOneWithoutReceivedTransactionsInput
    wallet?: WalletCreateNestedOneWithoutTransactionsInput
    product?: ProductCreateNestedOneWithoutTransactionsInput
    currency: CurrencyCreateNestedOneWithoutTransactionsInput
    rebateGenerated?: RebateTransactionCreateNestedOneWithoutOriginalTransactionInput
  }

  export type TransactionUncheckedCreateWithoutProductInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    rebateGenerated?: RebateTransactionUncheckedCreateNestedOneWithoutOriginalTransactionInput
  }

  export type CurrencyUpsertWithoutProductsInput = {
    update: XOR<CurrencyUpdateWithoutProductsInput, CurrencyUncheckedUpdateWithoutProductsInput>
    create: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutProductsInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutProductsInput, CurrencyUncheckedUpdateWithoutProductsInput>
  }

  export type CurrencyUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUpdateManyWithoutPreferredCurrencyNestedInput
    wallets?: WalletUpdateManyWithoutCurrencyNestedInput
    transactions?: TransactionUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    precision?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    blockchain?: NullableStringFieldUpdateOperationsInput | string | null
    withdrawalFeeFixed?: NullableIntFieldUpdateOperationsInput | number | null
    withdrawalFeePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersPreferringThisCurrency?: UserUncheckedUpdateManyWithoutPreferredCurrencyNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutCurrencyNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type OperatorAccessUpsertWithoutProductsInput = {
    update: XOR<OperatorAccessUpdateWithoutProductsInput, OperatorAccessUncheckedUpdateWithoutProductsInput>
    create: XOR<OperatorAccessCreateWithoutProductsInput, OperatorAccessUncheckedCreateWithoutProductsInput>
    where?: OperatorAccessWhereInput
  }

  export type OperatorAccessUpdateToOneWithWhereWithoutProductsInput = {
    where?: OperatorAccessWhereInput
    data: XOR<OperatorAccessUpdateWithoutProductsInput, OperatorAccessUncheckedUpdateWithoutProductsInput>
  }

  export type OperatorAccessUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUpdateManyWithoutOperatorNestedInput
    owner?: UserUpdateOneWithoutCreatedOperatorsNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutOperatorNestedInput
    games?: GameUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: NullableStringFieldUpdateOperationsInput | string | null
    invitations?: OperatorInvitationUncheckedUpdateManyWithoutOperatorNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutOperatorNestedInput
    games?: GameUncheckedUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutProductInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutProductInput, TransactionUncheckedUpdateWithoutProductInput>
    create: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutProductInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutProductInput, TransactionUncheckedUpdateWithoutProductInput>
  }

  export type TransactionUpdateManyWithWhereWithoutProductInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutProductInput>
  }

  export type TransactionUpsertWithoutProductInput = {
    update: XOR<TransactionUpdateWithoutProductInput, TransactionUncheckedUpdateWithoutProductInput>
    create: XOR<TransactionCreateWithoutProductInput, TransactionUncheckedCreateWithoutProductInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutProductInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutProductInput, TransactionUncheckedUpdateWithoutProductInput>
  }

  export type TransactionUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput
    receiver?: UserUpdateOneWithoutReceivedTransactionsNestedInput
    wallet?: WalletUpdateOneWithoutTransactionsNestedInput
    product?: ProductUpdateOneWithoutTransactionsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
    rebateGenerated?: RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rebateGenerated?: RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput
  }

  export type UserCreateWithoutEventLogsAsActorInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutEventLogsAsActorInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutEventLogsAsActorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventLogsAsActorInput, UserUncheckedCreateWithoutEventLogsAsActorInput>
  }

  export type UserUpsertWithoutEventLogsAsActorInput = {
    update: XOR<UserUpdateWithoutEventLogsAsActorInput, UserUncheckedUpdateWithoutEventLogsAsActorInput>
    create: XOR<UserCreateWithoutEventLogsAsActorInput, UserUncheckedCreateWithoutEventLogsAsActorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventLogsAsActorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventLogsAsActorInput, UserUncheckedUpdateWithoutEventLogsAsActorInput>
  }

  export type UserUpdateWithoutEventLogsAsActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutEventLogsAsActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type OperatorAccessCreateWithoutInvitationsInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    owner?: UserCreateNestedOneWithoutCreatedOperatorsInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutOperatorInput
    products?: ProductCreateNestedManyWithoutOperatorInput
    games?: GameCreateNestedManyWithoutOperatorInput
    profiles?: ProfileCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessUncheckedCreateWithoutInvitationsInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: string | null
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutOperatorInput
    products?: ProductUncheckedCreateNestedManyWithoutOperatorInput
    games?: GameUncheckedCreateNestedManyWithoutOperatorInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorAccessCreateOrConnectWithoutInvitationsInput = {
    where: OperatorAccessWhereUniqueInput
    create: XOR<OperatorAccessCreateWithoutInvitationsInput, OperatorAccessUncheckedCreateWithoutInvitationsInput>
  }

  export type UserCreateWithoutInvitationsSentInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutInvitationsSentInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutInvitationsSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
  }

  export type UserCreateWithoutInvitationsReceivedInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutInvitationsReceivedInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutInvitationsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitationsReceivedInput, UserUncheckedCreateWithoutInvitationsReceivedInput>
  }

  export type OperatorAccessUpsertWithoutInvitationsInput = {
    update: XOR<OperatorAccessUpdateWithoutInvitationsInput, OperatorAccessUncheckedUpdateWithoutInvitationsInput>
    create: XOR<OperatorAccessCreateWithoutInvitationsInput, OperatorAccessUncheckedCreateWithoutInvitationsInput>
    where?: OperatorAccessWhereInput
  }

  export type OperatorAccessUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: OperatorAccessWhereInput
    data: XOR<OperatorAccessUpdateWithoutInvitationsInput, OperatorAccessUncheckedUpdateWithoutInvitationsInput>
  }

  export type OperatorAccessUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    owner?: UserUpdateOneWithoutCreatedOperatorsNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutOperatorNestedInput
    products?: ProductUpdateManyWithoutOperatorNestedInput
    games?: GameUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    ownedById?: NullableStringFieldUpdateOperationsInput | string | null
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutOperatorNestedInput
    products?: ProductUncheckedUpdateManyWithoutOperatorNestedInput
    games?: GameUncheckedUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type UserUpsertWithoutInvitationsSentInput = {
    update: XOR<UserUpdateWithoutInvitationsSentInput, UserUncheckedUpdateWithoutInvitationsSentInput>
    create: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitationsSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitationsSentInput, UserUncheckedUpdateWithoutInvitationsSentInput>
  }

  export type UserUpdateWithoutInvitationsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitationsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutInvitationsReceivedInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutInvitationsReceivedInput, UserUncheckedUpdateWithoutInvitationsReceivedInput>
    create: XOR<UserCreateWithoutInvitationsReceivedInput, UserUncheckedCreateWithoutInvitationsReceivedInput>
  }

  export type UserUpdateWithWhereUniqueWithoutInvitationsReceivedInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutInvitationsReceivedInput, UserUncheckedUpdateWithoutInvitationsReceivedInput>
  }

  export type UserUpdateManyWithWhereWithoutInvitationsReceivedInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutInvitationsReceivedInput>
  }

  export type UserCreateWithoutVipInfoInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutVipInfoInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutVipInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVipInfoInput, UserUncheckedCreateWithoutVipInfoInput>
  }

  export type UserUpsertWithoutVipInfoInput = {
    update: XOR<UserUpdateWithoutVipInfoInput, UserUncheckedUpdateWithoutVipInfoInput>
    create: XOR<UserCreateWithoutVipInfoInput, UserUncheckedCreateWithoutVipInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVipInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVipInfoInput, UserUncheckedUpdateWithoutVipInfoInput>
  }

  export type UserUpdateWithoutVipInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutVipInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutUserRewardsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutUserRewardsInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutUserRewardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
  }

  export type UserUpsertWithoutUserRewardsInput = {
    update: XOR<UserUpdateWithoutUserRewardsInput, UserUncheckedUpdateWithoutUserRewardsInput>
    create: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRewardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRewardsInput, UserUncheckedUpdateWithoutUserRewardsInput>
  }

  export type UserUpdateWithoutUserRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserVipTaskProgressCreateWithoutTaskInput = {
    id?: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserVipTaskProgressInput
  }

  export type UserVipTaskProgressUncheckedCreateWithoutTaskInput = {
    id?: string
    userId: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserVipTaskProgressCreateOrConnectWithoutTaskInput = {
    where: UserVipTaskProgressWhereUniqueInput
    create: XOR<UserVipTaskProgressCreateWithoutTaskInput, UserVipTaskProgressUncheckedCreateWithoutTaskInput>
  }

  export type UserVipTaskProgressCreateManyTaskInputEnvelope = {
    data: UserVipTaskProgressCreateManyTaskInput | UserVipTaskProgressCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type UserVipTaskProgressUpsertWithWhereUniqueWithoutTaskInput = {
    where: UserVipTaskProgressWhereUniqueInput
    update: XOR<UserVipTaskProgressUpdateWithoutTaskInput, UserVipTaskProgressUncheckedUpdateWithoutTaskInput>
    create: XOR<UserVipTaskProgressCreateWithoutTaskInput, UserVipTaskProgressUncheckedCreateWithoutTaskInput>
  }

  export type UserVipTaskProgressUpdateWithWhereUniqueWithoutTaskInput = {
    where: UserVipTaskProgressWhereUniqueInput
    data: XOR<UserVipTaskProgressUpdateWithoutTaskInput, UserVipTaskProgressUncheckedUpdateWithoutTaskInput>
  }

  export type UserVipTaskProgressUpdateManyWithWhereWithoutTaskInput = {
    where: UserVipTaskProgressScalarWhereInput
    data: XOR<UserVipTaskProgressUpdateManyMutationInput, UserVipTaskProgressUncheckedUpdateManyWithoutTaskInput>
  }

  export type UserCreateWithoutUserVipTaskProgressInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionCreateNestedManyWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutUserVipTaskProgressInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    rebateTransaction?: RebateTransactionUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutUserVipTaskProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserVipTaskProgressInput, UserUncheckedCreateWithoutUserVipTaskProgressInput>
  }

  export type VipTaskCreateWithoutUserTaskProgressInput = {
    id?: string
    taskType: $Enums.VipTaskType
    title?: string | null
    description: string
    xpReward?: number | null
    itemRewardId?: string | null
    bonusRewardAmount?: number | null
    bonusCurrencyId?: string | null
    targetValue?: number | null
    durationDays?: number | null
    isActive?: boolean
    requiredVipLevel?: number
    resetCycle?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VipTaskUncheckedCreateWithoutUserTaskProgressInput = {
    id?: string
    taskType: $Enums.VipTaskType
    title?: string | null
    description: string
    xpReward?: number | null
    itemRewardId?: string | null
    bonusRewardAmount?: number | null
    bonusCurrencyId?: string | null
    targetValue?: number | null
    durationDays?: number | null
    isActive?: boolean
    requiredVipLevel?: number
    resetCycle?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VipTaskCreateOrConnectWithoutUserTaskProgressInput = {
    where: VipTaskWhereUniqueInput
    create: XOR<VipTaskCreateWithoutUserTaskProgressInput, VipTaskUncheckedCreateWithoutUserTaskProgressInput>
  }

  export type UserUpsertWithoutUserVipTaskProgressInput = {
    update: XOR<UserUpdateWithoutUserVipTaskProgressInput, UserUncheckedUpdateWithoutUserVipTaskProgressInput>
    create: XOR<UserCreateWithoutUserVipTaskProgressInput, UserUncheckedCreateWithoutUserVipTaskProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserVipTaskProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserVipTaskProgressInput, UserUncheckedUpdateWithoutUserVipTaskProgressInput>
  }

  export type UserUpdateWithoutUserVipTaskProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutUserVipTaskProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type VipTaskUpsertWithoutUserTaskProgressInput = {
    update: XOR<VipTaskUpdateWithoutUserTaskProgressInput, VipTaskUncheckedUpdateWithoutUserTaskProgressInput>
    create: XOR<VipTaskCreateWithoutUserTaskProgressInput, VipTaskUncheckedCreateWithoutUserTaskProgressInput>
    where?: VipTaskWhereInput
  }

  export type VipTaskUpdateToOneWithWhereWithoutUserTaskProgressInput = {
    where?: VipTaskWhereInput
    data: XOR<VipTaskUpdateWithoutUserTaskProgressInput, VipTaskUncheckedUpdateWithoutUserTaskProgressInput>
  }

  export type VipTaskUpdateWithoutUserTaskProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumVipTaskTypeFieldUpdateOperationsInput | $Enums.VipTaskType
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: NullableIntFieldUpdateOperationsInput | number | null
    itemRewardId?: NullableStringFieldUpdateOperationsInput | string | null
    bonusRewardAmount?: NullableIntFieldUpdateOperationsInput | number | null
    bonusCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    targetValue?: NullableIntFieldUpdateOperationsInput | number | null
    durationDays?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiredVipLevel?: IntFieldUpdateOperationsInput | number
    resetCycle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VipTaskUncheckedUpdateWithoutUserTaskProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumVipTaskTypeFieldUpdateOperationsInput | $Enums.VipTaskType
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    xpReward?: NullableIntFieldUpdateOperationsInput | number | null
    itemRewardId?: NullableStringFieldUpdateOperationsInput | string | null
    bonusRewardAmount?: NullableIntFieldUpdateOperationsInput | number | null
    bonusCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    targetValue?: NullableIntFieldUpdateOperationsInput | number | null
    durationDays?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiredVipLevel?: IntFieldUpdateOperationsInput | number
    resetCycle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutRebateTransactionInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileCreateNestedManyWithoutOtherUserInput
    settings?: SettingsCreateNestedOneWithoutUserInput
    wallets?: WalletCreateNestedManyWithoutUserInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    xpEvents?: XpEventCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationCreateNestedManyWithoutUserInput
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoCreateNestedOneWithoutUserInput
    preferredCurrency?: CurrencyCreateNestedOneWithoutUsersPreferringThisCurrencyInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutRebateTransactionInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otherProfiles?: ProfileUncheckedCreateNestedManyWithoutOtherUserInput
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    xpEvents?: XpEventUncheckedCreateNestedManyWithoutUserInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendshipsSent?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    friendshipsReceived?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    gameLaunchLinks?: GameLaunchLinkUncheckedCreateNestedManyWithoutUserInput
    eventLogsAsActor?: EventLogUncheckedCreateNestedManyWithoutActorInput
    createdOperators?: OperatorAccessUncheckedCreateNestedManyWithoutOwnerInput
    invitationsSent?: OperatorInvitationUncheckedCreateNestedManyWithoutInvitedByInput
    invitationsReceived?: OperatorInvitationUncheckedCreateNestedManyWithoutUserInput
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
    vipInfo?: VipInfoUncheckedCreateNestedOneWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedCreateNestedManyWithoutUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutOriginatorInput
    originatedTransactions?: TransactionUncheckedCreateNestedManyWithoutOriginatorInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutRebateTransactionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRebateTransactionInput, UserUncheckedCreateWithoutRebateTransactionInput>
  }

  export type TransactionCreateWithoutRebateGeneratedInput = {
    id?: string
    processedAt?: Date | string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    originator: UserCreateNestedOneWithoutOriginatedTransactionsInput
    receiver?: UserCreateNestedOneWithoutReceivedTransactionsInput
    wallet?: WalletCreateNestedOneWithoutTransactionsInput
    product?: ProductCreateNestedOneWithoutTransactionsInput
    currency: CurrencyCreateNestedOneWithoutTransactionsInput
    Product?: ProductCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutRebateGeneratedInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    Product?: ProductUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutRebateGeneratedInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutRebateGeneratedInput, TransactionUncheckedCreateWithoutRebateGeneratedInput>
  }

  export type UserUpsertWithoutRebateTransactionInput = {
    update: XOR<UserUpdateWithoutRebateTransactionInput, UserUncheckedUpdateWithoutRebateTransactionInput>
    create: XOR<UserCreateWithoutRebateTransactionInput, UserUncheckedCreateWithoutRebateTransactionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRebateTransactionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRebateTransactionInput, UserUncheckedUpdateWithoutRebateTransactionInput>
  }

  export type UserUpdateWithoutRebateTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutRebateTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type TransactionUpsertWithoutRebateGeneratedInput = {
    update: XOR<TransactionUpdateWithoutRebateGeneratedInput, TransactionUncheckedUpdateWithoutRebateGeneratedInput>
    create: XOR<TransactionCreateWithoutRebateGeneratedInput, TransactionUncheckedCreateWithoutRebateGeneratedInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutRebateGeneratedInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutRebateGeneratedInput, TransactionUncheckedUpdateWithoutRebateGeneratedInput>
  }

  export type TransactionUpdateWithoutRebateGeneratedInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput
    receiver?: UserUpdateOneWithoutReceivedTransactionsNestedInput
    wallet?: WalletUpdateOneWithoutTransactionsNestedInput
    product?: ProductUpdateOneWithoutTransactionsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
    Product?: ProductUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutRebateGeneratedInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type ProfileCreateManyOtherUserInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGameSessionid?: string | null
    userId: string
    role?: $Enums.Role | null
    operatorAccessId?: string | null
  }

  export type WalletCreateManyUserInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currencyId: string
    bonusBalance?: number
    lockedBalance?: number
  }

  export type PostCreateManyAuthorInput = {
    id?: string
    title: string
    content: string
    published?: boolean
    tags?: PostCreatetagsInput | string[]
    viewCount?: number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
  }

  export type GameSessionCreateManyUserInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    gameId: string
    profileId?: string | null
  }

  export type XpEventCreateManyUserInput = {
    id?: string
    points: number
    source: string
    sourceId?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAchievementCreateManyUserInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    achievementId: string
  }

  export type ChatMessageCreateManyAuthorInput = {
    id?: string
    channel: string
    content: string
    mediaUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateManyRequesterInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    receiverId: string
  }

  export type FriendshipCreateManyReceiverInput = {
    id?: string
    status?: $Enums.FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requesterId: string
  }

  export type GameLaunchLinkCreateManyUserInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId: string
    operatorId: string
  }

  export type EventLogCreateManyActorInput = {
    id?: string
    action: string
    targetType?: string | null
    targetId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperatorAccessCreateManyOwnerInput = {
    id?: string
    name: string
    operator_secret: string
    operator_access: string
    callbackUrl: string
    active?: boolean
    permissions?: OperatorAccessCreatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessCreateipsInput | string[]
    description?: string | null
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId?: string | null
    acceptedPayments?: OperatorAccessCreateacceptedPaymentsInput | $Enums.PaymentMethod[]
  }

  export type OperatorInvitationCreateManyInvitedByInput = {
    id?: string
    operatorId: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
  }

  export type UserCreateManyReferrerInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    preferredCurrencyId?: string | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
  }

  export type AccountCreateManyUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    username?: string | null
    name?: string | null
    activeGameId?: string | null
    ipAddress?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    lastActivityAt?: Date | string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    refreshToken?: string | null
    active?: boolean
    token: string
    updatedAt?: Date | string | null
  }

  export type RebateTransactionCreateManyUserInput = {
    id?: string
    transactionId: string
    rebateAmount: number
    currencyId: string
    vipLevel: number
    rebatePercentage: number
    status?: $Enums.RewardStatus
    paidOutAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRewardCreateManyUserInput = {
    id?: string
    rewardType: $Enums.RewardType
    claimedAt?: Date | string | null
    description: string
    status?: $Enums.RewardStatus
    amount?: number | null
    currencyId?: string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: Date | string | null
    availableFrom?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    vipLevelRequirement?: number | null
  }

  export type UserVipTaskProgressCreateManyUserInput = {
    id?: string
    taskId: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManySenderInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyOriginatorInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    imageUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyOriginatorInput = {
    id?: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyReceiverInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateWithoutOtherUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    currentGameSession?: GameSessionUpdateOneWithoutProfileNestedInput
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    operator?: OperatorAccessUpdateOneWithoutProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutOtherUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGameSessionid?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    operatorAccessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyWithoutOtherUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGameSessionid?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    operatorAccessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WalletUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
    currency?: CurrencyUpdateOneRequiredWithoutWalletsNestedInput
    transactions?: TransactionUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: StringFieldUpdateOperationsInput | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: StringFieldUpdateOperationsInput | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    tags?: PostUpdatetagsInput | string[]
    viewCount?: IntFieldUpdateOperationsInput | number
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type GameSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUpdateManyWithoutGameSessionNestedInput
    game?: GameUpdateOneRequiredWithoutGameSessionsNestedInput
    Profile?: ProfileUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    gameId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
    Profile?: ProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    gameId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type XpEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XpEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XpEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutFriendshipsReceivedNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipUncheckedUpdateManyWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutFriendshipsSentNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requesterId?: StringFieldUpdateOperationsInput | string
  }

  export type GameLaunchLinkUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutGameLaunchLinksNestedInput
    operator?: OperatorAccessUpdateOneRequiredWithoutGameLaunchLinksNestedInput
  }

  export type GameLaunchLinkUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
  }

  export type GameLaunchLinkUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
  }

  export type EventLogUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventLogUncheckedUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventLogUncheckedUpdateManyWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperatorAccessUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUpdateManyWithoutOperatorNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutOperatorNestedInput
    products?: ProductUpdateManyWithoutOperatorNestedInput
    games?: GameUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
    invitations?: OperatorInvitationUncheckedUpdateManyWithoutOperatorNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutOperatorNestedInput
    products?: ProductUncheckedUpdateManyWithoutOperatorNestedInput
    games?: GameUncheckedUpdateManyWithoutOperatorNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorAccessUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    operator_secret?: StringFieldUpdateOperationsInput | string
    operator_access?: StringFieldUpdateOperationsInput | string
    callbackUrl?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    permissions?: OperatorAccessUpdatepermissionsInput | $Enums.KeyMode[]
    ips?: OperatorAccessUpdateipsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedPayments?: OperatorAccessUpdateacceptedPaymentsInput | $Enums.PaymentMethod[]
  }

  export type OperatorInvitationUpdateWithoutInvitedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operator?: OperatorAccessUpdateOneRequiredWithoutInvitationsNestedInput
    User?: UserUpdateManyWithoutInvitationsReceivedNestedInput
  }

  export type OperatorInvitationUncheckedUpdateWithoutInvitedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUncheckedUpdateManyWithoutInvitationsReceivedNestedInput
  }

  export type OperatorInvitationUncheckedUpdateManyWithoutInvitedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OperatorInvitationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operator?: OperatorAccessUpdateOneRequiredWithoutInvitationsNestedInput
    invitedBy?: UserUpdateOneRequiredWithoutInvitationsSentNestedInput
  }

  export type OperatorInvitationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invitedById?: StringFieldUpdateOperationsInput | string
  }

  export type OperatorInvitationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invitedById?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    activeGameId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    activeGameId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    activeGameId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    token?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RebateTransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTransaction?: TransactionUpdateOneRequiredWithoutRebateGeneratedNestedInput
  }

  export type RebateTransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RebateTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    rebateAmount?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    vipLevel?: IntFieldUpdateOperationsInput | number
    rebatePercentage?: FloatFieldUpdateOperationsInput | number
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    paidOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardType?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availableFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vipLevelRequirement?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserRewardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardType?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availableFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vipLevelRequirement?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserRewardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewardType?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    metaData?: NullableJsonNullValueInput | InputJsonValue
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availableFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vipLevelRequirement?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserVipTaskProgressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: VipTaskUpdateOneRequiredWithoutUserTaskProgressNestedInput
  }

  export type UserVipTaskProgressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVipTaskProgressUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutOriginatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutOriginatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutOriginatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutOriginatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneWithoutReceivedTransactionsNestedInput
    wallet?: WalletUpdateOneWithoutTransactionsNestedInput
    product?: ProductUpdateOneWithoutTransactionsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
    rebateGenerated?: RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutOriginatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rebateGenerated?: RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutOriginatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput
    wallet?: WalletUpdateOneWithoutTransactionsNestedInput
    product?: ProductUpdateOneWithoutTransactionsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
    rebateGenerated?: RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rebateGenerated?: RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyPreferredCurrencyInput = {
    id?: string
    username?: string | null
    name: string
    email: string
    emailVerified?: boolean | null
    displayUsername?: string | null
    phone?: string | null
    cashtag?: string | null
    phoneVerified?: Date | string | null
    isVerified?: boolean
    passwordHash?: string | null
    role?: $Enums.Role
    status?: $Enums.UserStatus
    totalXp?: number
    currentLevel?: number
    referralCode?: string | null
    commissionRate?: number | null
    twoFactorEnabled?: boolean | null
    isOnline?: boolean | null
    twoFactorSecret?: string | null
    image?: string | null
    twoFactorRecoveryCodes?: UserCreatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: Date | string | null
    lastIp?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activeWalletId?: string | null
    referrerId?: string | null
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    timezone?: string | null
    locale?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
  }

  export type WalletCreateManyCurrencyInput = {
    id?: string
    balance?: number
    isActive?: boolean
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    bonusBalance?: number
    lockedBalance?: number
  }

  export type TransactionCreateManyCurrencyInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateManyCurrencyInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    shopId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactionId?: string | null
  }

  export type UserUpdateWithoutPreferredCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUpdateManyWithoutUserNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferredCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    invitationsReceived?: OperatorInvitationUncheckedUpdateManyWithoutUserNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPreferredCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WalletUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutWalletsNestedInput
    transactions?: TransactionUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateManyWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    bonusBalance?: IntFieldUpdateOperationsInput | number
    lockedBalance?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput
    receiver?: UserUpdateOneWithoutReceivedTransactionsNestedInput
    wallet?: WalletUpdateOneWithoutTransactionsNestedInput
    product?: ProductUpdateOneWithoutTransactionsNestedInput
    rebateGenerated?: RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rebateGenerated?: RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operator?: OperatorAccessUpdateOneWithoutProductsNestedInput
    transactions?: TransactionUpdateManyWithoutProductNestedInput
    Transaction?: TransactionUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    shopId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: TransactionUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    shopId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionCreateManyWalletInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    productId?: string | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput
    receiver?: UserUpdateOneWithoutReceivedTransactionsNestedInput
    product?: ProductUpdateOneWithoutTransactionsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
    rebateGenerated?: RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rebateGenerated?: RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperatorInvitationCreateManyOperatorInput = {
    id?: string
    email: string
    role?: $Enums.Role
    token?: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    invitedById: string
  }

  export type GameLaunchLinkCreateManyOperatorInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    gameId: string
  }

  export type ProductCreateManyOperatorInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    currencyId: string
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    transactionId?: string | null
  }

  export type GameCreateManyOperatorInput = {
    id?: string
    name: string
    title: string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    provider: $Enums.GameProvider
    category: $Enums.GameCategory
    tags?: GameCreatetagsInput | string[]
    isActive?: boolean
    thumbnailUrl?: string | null
    bannerUrl?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    featured?: boolean
  }

  export type ProfileCreateManyOperatorInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentGameSessionid?: string | null
    userId: string
    otherUserid?: string | null
    role?: $Enums.Role | null
  }

  export type OperatorInvitationUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invitedBy?: UserUpdateOneRequiredWithoutInvitationsSentNestedInput
    User?: UserUpdateManyWithoutInvitationsReceivedNestedInput
  }

  export type OperatorInvitationUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invitedById?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutInvitationsReceivedNestedInput
  }

  export type OperatorInvitationUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invitedById?: StringFieldUpdateOperationsInput | string
  }

  export type GameLaunchLinkUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGameLaunchLinksNestedInput
    game?: GameUpdateOneRequiredWithoutGameLaunchLinksNestedInput
  }

  export type GameLaunchLinkUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
  }

  export type GameLaunchLinkUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: CurrencyUpdateOneRequiredWithoutProductsNestedInput
    transactions?: TransactionUpdateManyWithoutProductNestedInput
    Transaction?: TransactionUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currencyId?: StringFieldUpdateOperationsInput | string
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: TransactionUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currencyId?: StringFieldUpdateOperationsInput | string
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    gameSessions?: GameSessionUpdateManyWithoutGameNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
    gameSessions?: GameSessionUncheckedUpdateManyWithoutGameNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    goldsvetData?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: EnumGameProviderFieldUpdateOperationsInput | $Enums.GameProvider
    category?: EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
    tags?: GameUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bannerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featured?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfileUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    currentGameSession?: GameSessionUpdateOneWithoutProfileNestedInput
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    otherUser?: UserUpdateOneWithoutOtherProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGameSessionid?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    otherUserid?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
  }

  export type ProfileUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentGameSessionid?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    otherUserid?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
  }

  export type UserAchievementCreateManyAchievementInput = {
    id?: string
    unlockedAt?: Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type UserAchievementUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GameSessionCreateManyGameInput = {
    id?: string
    isActive?: boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: string | null
    currencyId?: string | null
    startedAt?: Date | string
    endTime?: Date | string | null
    startTime?: Date | string | null
    ipAddress?: string | null
    startingBalance?: number | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalWagered?: number
    totalWon?: number
    userId: string
    profileId?: string | null
  }

  export type GameLaunchLinkCreateManyGameInput = {
    id?: string
    token_internal?: string
    currency: string
    player_operator_id?: string | null
    mode: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: string | null
    userAgent?: string | null
    session_url?: string | null
    state?: string
    active?: boolean
    expiresAt?: Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    operatorId: string
  }

  export type GameSessionUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUpdateManyWithoutGameSessionNestedInput
    user?: UserUpdateOneRequiredWithoutGameSessionsNestedInput
    Profile?: ProfileUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    spins?: GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
    Profile?: ProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
  }

  export type GameSessionUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sessionData?: NullableJsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    startingBalance?: NullableIntFieldUpdateOperationsInput | number | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalWagered?: IntFieldUpdateOperationsInput | number
    totalWon?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameLaunchLinkUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGameLaunchLinksNestedInput
    operator?: OperatorAccessUpdateOneRequiredWithoutGameLaunchLinksNestedInput
  }

  export type GameLaunchLinkUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
  }

  export type GameLaunchLinkUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    token_internal?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    player_operator_id?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    requestIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    session_url?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    extra_meta?: NullableJsonNullValueInput | InputJsonValue
    token_original?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    operatorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type CommentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type GameSpinCreateManyGameSessionInput = {
    id?: string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    grossWinAmount?: number
    currencyId?: string | null
    spinNumber?: number
    wagerAmount?: number
    sessionId: string
    timeStamp: Date | string
  }

  export type ProfileCreateManyCurrentGameSessionInput = {
    id?: string
    balance?: number
    totalXpFromOperator?: number
    activeCurrencyType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    otherUserid?: string | null
    role?: $Enums.Role | null
    operatorAccessId?: string | null
  }

  export type GameSpinUpdateWithoutGameSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grossWinAmount?: IntFieldUpdateOperationsInput | number
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    spinNumber?: IntFieldUpdateOperationsInput | number
    wagerAmount?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSpinUncheckedUpdateWithoutGameSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grossWinAmount?: IntFieldUpdateOperationsInput | number
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    spinNumber?: IntFieldUpdateOperationsInput | number
    wagerAmount?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSpinUncheckedUpdateManyWithoutGameSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    spinData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grossWinAmount?: IntFieldUpdateOperationsInput | number
    currencyId?: NullableStringFieldUpdateOperationsInput | string | null
    spinNumber?: IntFieldUpdateOperationsInput | number
    wagerAmount?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUpdateWithoutCurrentGameSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    otherUser?: UserUpdateOneWithoutOtherProfilesNestedInput
    operator?: OperatorAccessUpdateOneWithoutProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutCurrentGameSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    otherUserid?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    operatorAccessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyWithoutCurrentGameSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: IntFieldUpdateOperationsInput | number
    totalXpFromOperator?: IntFieldUpdateOperationsInput | number
    activeCurrencyType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    otherUserid?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    operatorAccessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateManyTransactionInput = {
    id?: string
    title?: string
    description?: string
    url?: string
    iconUrl?: string | null
    productType?: string
    bonusCode?: string | null
    bonusTotalInCredits?: number
    isActive?: boolean | null
    currencyId: string
    priceInCents?: number
    amountToReceiveInCredits?: number
    bestValue?: number
    discountInCents?: number
    bonusSpins?: number
    isPromo?: boolean | null
    totalDiscountInCents?: number
    shopId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ProductUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: CurrencyUpdateOneRequiredWithoutProductsNestedInput
    operator?: OperatorAccessUpdateOneWithoutProductsNestedInput
    transactions?: TransactionUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currencyId?: StringFieldUpdateOperationsInput | string
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    shopId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: TransactionUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: StringFieldUpdateOperationsInput | string
    bonusCode?: NullableStringFieldUpdateOperationsInput | string | null
    bonusTotalInCredits?: IntFieldUpdateOperationsInput | number
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currencyId?: StringFieldUpdateOperationsInput | string
    priceInCents?: IntFieldUpdateOperationsInput | number
    amountToReceiveInCredits?: IntFieldUpdateOperationsInput | number
    bestValue?: IntFieldUpdateOperationsInput | number
    discountInCents?: IntFieldUpdateOperationsInput | number
    bonusSpins?: IntFieldUpdateOperationsInput | number
    isPromo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    totalDiscountInCents?: IntFieldUpdateOperationsInput | number
    shopId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionCreateManyProductInput = {
    id?: string
    originatorUserId: string
    processedAt?: Date | string | null
    receiverUserId?: string | null
    walletId?: string | null
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    amount: number
    netAmount?: number | null
    feeAmount?: number | null
    currencyId: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    bonusBalanceBefore?: number | null
    bonusBalanceAfter?: number | null
    bonusAmount?: number | null
    wageringRequirement?: number | null
    wageringProgress?: number | null
    description?: string | null
    provider?: string | null
    providerTxId?: string | null
    relatedGameId?: string | null
    relatedRoundId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originator?: UserUpdateOneRequiredWithoutOriginatedTransactionsNestedInput
    receiver?: UserUpdateOneWithoutReceivedTransactionsNestedInput
    wallet?: WalletUpdateOneWithoutTransactionsNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
    rebateGenerated?: RebateTransactionUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rebateGenerated?: RebateTransactionUncheckedUpdateOneWithoutOriginalTransactionNestedInput
    Product?: ProductUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    originatorUserId?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiverUserId?: NullableStringFieldUpdateOperationsInput | string | null
    walletId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    amount?: IntFieldUpdateOperationsInput | number
    netAmount?: NullableIntFieldUpdateOperationsInput | number | null
    feeAmount?: NullableIntFieldUpdateOperationsInput | number | null
    currencyId?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    bonusBalanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    bonusAmount?: NullableIntFieldUpdateOperationsInput | number | null
    wageringRequirement?: NullableIntFieldUpdateOperationsInput | number | null
    wageringProgress?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerTxId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedGameId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedRoundId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutInvitationsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUpdateOneWithoutUserNestedInput
    wallets?: WalletUpdateManyWithoutUserNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUpdateManyWithoutInvitedByNestedInput
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUpdateManyWithoutUserNestedInput
    preferredCurrency?: CurrencyUpdateOneWithoutUsersPreferringThisCurrencyNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitationsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otherProfiles?: ProfileUncheckedUpdateManyWithoutOtherUserNestedInput
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    xpEvents?: XpEventUncheckedUpdateManyWithoutUserNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendshipsSent?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    friendshipsReceived?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    gameLaunchLinks?: GameLaunchLinkUncheckedUpdateManyWithoutUserNestedInput
    eventLogsAsActor?: EventLogUncheckedUpdateManyWithoutActorNestedInput
    createdOperators?: OperatorAccessUncheckedUpdateManyWithoutOwnerNestedInput
    invitationsSent?: OperatorInvitationUncheckedUpdateManyWithoutInvitedByNestedInput
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    vipInfo?: VipInfoUncheckedUpdateOneWithoutUserNestedInput
    rebateTransaction?: RebateTransactionUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userVipTaskProgress?: UserVipTaskProgressUncheckedUpdateManyWithoutUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutOriginatorNestedInput
    originatedTransactions?: TransactionUncheckedUpdateManyWithoutOriginatorNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateManyWithoutInvitationsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    cashtag?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    totalXp?: IntFieldUpdateOperationsInput | number
    currentLevel?: IntFieldUpdateOperationsInput | number
    referralCode?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isOnline?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorRecoveryCodes?: UserUpdatetwoFactorRecoveryCodesInput | string[]
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activeWalletId?: NullableStringFieldUpdateOperationsInput | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    preferredCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserVipTaskProgressCreateManyTaskInput = {
    id?: string
    userId: string
    progress?: number
    isCompleted?: boolean
    rewardClaimedAt?: Date | string | null
    lastProgressAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserVipTaskProgressUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserVipTaskProgressNestedInput
  }

  export type UserVipTaskProgressUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVipTaskProgressUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    rewardClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProgressAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}